syntax = "proto3";

package apollo.canbus;

import "apollo_msgs/proto/common/header.proto";

message Signal {
  enum TurnSignal {
    TURN_NONE = 0;
    TURN_LEFT = 1;
    TURN_RIGHT = 2;
  };
  TurnSignal turn_signal = 1;
  // lights enable command
  bool high_beam = 2;
  bool low_beam = 3;
  bool horn = 4;
  bool emergency_light = 5;
}

// next id :28
message Chassis {
  enum DrivingMode {
    COMPLETE_MANUAL = 0;  // human drive
    COMPLETE_AUTO_DRIVE = 1;
    AUTO_STEER_ONLY = 2;  // only steer
    AUTO_SPEED_ONLY = 3;  // include throttle and brake

    // security mode when manual intervention happens, only response status
    EMERGENCY_MODE = 4;
  }

  // FIXME: To be merged with common::ErrorCode
  enum ErrorCode {
    NO_ERROR = 0;

    CMD_NOT_IN_PERIOD = 1;  // control cmd not in period

    // car chassis report error, like steer, brake, throttle, gear fault
    CHASSIS_ERROR = 2;

    MANUAL_INTERVENTION = 3;  // human manual intervention

    // receive car chassis can frame not in period
    CHASSIS_CAN_NOT_IN_PERIOD = 4;

    UNKNOWN_ERROR = 5;
  }

  enum GearPosition {
    GEAR_NEUTRAL = 0;
    GEAR_DRIVE = 1;
    GEAR_REVERSE = 2;
    GEAR_PARKING = 3;
    GEAR_LOW = 4;
    GEAR_INVALID = 5;
    GEAR_NONE = 6;
  }

  bool engine_started = 3;
  // Engine speed in RPM.
  float engine_rpm = 4;
  // Vehicle Speed in meters per second.
  float speed_mps = 5;
  // Vehicle odometer in meters.
  float odometer_m = 6;
  // Fuel range in meters.
  int32 fuel_range_m = 7;
  // Real throttle location in [%], ranging from 0 to 100.
  float throttle_percentage = 8;
  // Real brake location in [%], ranging from 0 to 100.
  float brake_percentage = 9;
  // Real gear location.
  // int32 gear_location = 10; deprecated use enum replace this [id 23]
  // Real steering location in [%], ranging from 0 to 100.
  float steering_percentage = 11;
  // Applied steering torque in [Nm].
  float steering_torque_nm = 12;

  // Parking brake status.
  bool parking_brake = 13;


  bool wiper = 19;
  bool disengage_status = 20;
  DrivingMode driving_mode = 21;
  ErrorCode error_code = 22;
  GearPosition gear_location = 23;

  // timestamp for steering module
  double steering_timestamp = 24;  // In seconds, with 1e-6 accuracy

  // chassis also needs it own sending timestamp
  apollo.common.Header header = 25;

  int32 chassis_error_mask = 26;

  Signal signal = 27;

  // Light signals.
  bool high_beam_signal = 14;
  bool low_beam_signal = 15;
  bool left_turn_signal = 16;
  bool right_turn_signal = 17;
  bool horn = 18;
}
