// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/common/vehicle_config.proto

#include "apollo_msgs/proto/common/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fconfig_5fextrinsics_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcommon_2fconfig_5fextrinsics_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Extrinsics;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fconfig_5fextrinsics_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleParam;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto
namespace apollo {
namespace common {
namespace config {
class VehicleParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleParam>
      _instance;
} _VehicleParam_default_instance_;
class VehicleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleConfig>
      _instance;
} _VehicleConfig_default_instance_;
}  // namespace config
}  // namespace common
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto {
static void InitDefaultsVehicleParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::config::_VehicleParam_default_instance_;
    new (ptr) ::apollo::common::config::VehicleParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::config::VehicleParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleParam}, {}};

static void InitDefaultsVehicleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::config::_VehicleConfig_default_instance_;
    new (ptr) ::apollo::common::config::VehicleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::config::VehicleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_VehicleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsVehicleConfig}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::scc_info_Header.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::scc_info_VehicleParam.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fconfig_5fextrinsics_2eproto::scc_info_Extrinsics.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleConfig.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, front_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, back_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, left_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, right_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, min_turn_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, max_steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, max_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, steer_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, wheel_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleParam, wheel_rolling_radius_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleConfig, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleConfig, vehicle_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::config::VehicleConfig, extrinsics_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::common::config::VehicleParam)},
  { 20, -1, sizeof(::apollo::common::config::VehicleConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::config::_VehicleParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::config::_VehicleConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/common/vehicle_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-apollo_msgs/proto/common/vehicle_confi"
      "g.proto\022\024apollo.common.config\032%apollo_ms"
      "gs/proto/common/header.proto\0320apollo_msg"
      "s/proto/common/config_extrinsics.proto\"\376"
      "\002\n\014VehicleParam\022\034\n\024front_edge_to_center\030"
      "\001 \001(\001\022\033\n\023back_edge_to_center\030\002 \001(\001\022\033\n\023le"
      "ft_edge_to_center\030\003 \001(\001\022\034\n\024right_edge_to"
      "_center\030\004 \001(\001\022\016\n\006length\030\005 \001(\001\022\r\n\005width\030\006"
      " \001(\001\022\016\n\006height\030\007 \001(\001\022\027\n\017min_turn_radius\030"
      "\010 \001(\001\022\030\n\020max_acceleration\030\t \001(\001\022\030\n\020max_d"
      "eceleration\030\n \001(\001\022\027\n\017max_steer_angle\030\013 \001"
      "(\001\022\034\n\024max_steer_angle_rate\030\014 \001(\001\022\023\n\013stee"
      "r_ratio\030\r \001(\001\022\022\n\nwheel_base\030\016 \001(\001\022\034\n\024whe"
      "el_rolling_radius\030\017 \001(\001\"\247\001\n\rVehicleConfi"
      "g\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
      "\0229\n\rvehicle_param\030\002 \001(\0132\".apollo.common."
      "config.VehicleParam\0224\n\nextrinsics\030\003 \001(\0132"
      " .apollo.common.config.Extrinsicsb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/common/vehicle_config.proto", &protobuf_RegisterTypes);
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::AddDescriptors();
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fconfig_5fextrinsics_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto
namespace apollo {
namespace common {
namespace config {

// ===================================================================

void VehicleParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::scc_info_VehicleParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.config.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_edge_to_center_, &from.front_edge_to_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_rolling_radius_) -
    reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(wheel_rolling_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.config.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::memset(&front_edge_to_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_rolling_radius_) -
      reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(wheel_rolling_radius_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:apollo.common.config.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
}

void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleParam::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleParam& VehicleParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::scc_info_VehicleParam.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.config.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_edge_to_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_rolling_radius_) -
      reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(wheel_rolling_radius_));
  _internal_metadata_.Clear();
}

bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.config.VehicleParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double front_edge_to_center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double back_edge_to_center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_edge_to_center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_edge_to_center = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_turn_radius = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_acceleration = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_deceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_steer_angle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_steer_angle_rate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_ratio = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_base = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_rolling_radius = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.config.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.config.VehicleParam)
  return false;
#undef DO_
}

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.config.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_edge_to_center = 1;
  if (this->front_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->front_edge_to_center(), output);
  }

  // double back_edge_to_center = 2;
  if (this->back_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->back_edge_to_center(), output);
  }

  // double left_edge_to_center = 3;
  if (this->left_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->left_edge_to_center(), output);
  }

  // double right_edge_to_center = 4;
  if (this->right_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->right_edge_to_center(), output);
  }

  // double length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // double height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // double min_turn_radius = 8;
  if (this->min_turn_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_turn_radius(), output);
  }

  // double max_acceleration = 9;
  if (this->max_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_acceleration(), output);
  }

  // double max_deceleration = 10;
  if (this->max_deceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_deceleration(), output);
  }

  // double max_steer_angle = 11;
  if (this->max_steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_steer_angle(), output);
  }

  // double max_steer_angle_rate = 12;
  if (this->max_steer_angle_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_steer_angle_rate(), output);
  }

  // double steer_ratio = 13;
  if (this->steer_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_ratio(), output);
  }

  // double wheel_base = 14;
  if (this->wheel_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->wheel_base(), output);
  }

  // double wheel_rolling_radius = 15;
  if (this->wheel_rolling_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wheel_rolling_radius(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.config.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.config.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_edge_to_center = 1;
  if (this->front_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->front_edge_to_center(), target);
  }

  // double back_edge_to_center = 2;
  if (this->back_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->back_edge_to_center(), target);
  }

  // double left_edge_to_center = 3;
  if (this->left_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->left_edge_to_center(), target);
  }

  // double right_edge_to_center = 4;
  if (this->right_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->right_edge_to_center(), target);
  }

  // double length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // double height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // double min_turn_radius = 8;
  if (this->min_turn_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->min_turn_radius(), target);
  }

  // double max_acceleration = 9;
  if (this->max_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_acceleration(), target);
  }

  // double max_deceleration = 10;
  if (this->max_deceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_deceleration(), target);
  }

  // double max_steer_angle = 11;
  if (this->max_steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_steer_angle(), target);
  }

  // double max_steer_angle_rate = 12;
  if (this->max_steer_angle_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_steer_angle_rate(), target);
  }

  // double steer_ratio = 13;
  if (this->steer_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_ratio(), target);
  }

  // double wheel_base = 14;
  if (this->wheel_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->wheel_base(), target);
  }

  // double wheel_rolling_radius = 15;
  if (this->wheel_rolling_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wheel_rolling_radius(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.config.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.config.VehicleParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double front_edge_to_center = 1;
  if (this->front_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // double back_edge_to_center = 2;
  if (this->back_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // double left_edge_to_center = 3;
  if (this->left_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // double right_edge_to_center = 4;
  if (this->right_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // double length = 5;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 7;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double min_turn_radius = 8;
  if (this->min_turn_radius() != 0) {
    total_size += 1 + 8;
  }

  // double max_acceleration = 9;
  if (this->max_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // double max_deceleration = 10;
  if (this->max_deceleration() != 0) {
    total_size += 1 + 8;
  }

  // double max_steer_angle = 11;
  if (this->max_steer_angle() != 0) {
    total_size += 1 + 8;
  }

  // double max_steer_angle_rate = 12;
  if (this->max_steer_angle_rate() != 0) {
    total_size += 1 + 8;
  }

  // double steer_ratio = 13;
  if (this->steer_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double wheel_base = 14;
  if (this->wheel_base() != 0) {
    total_size += 1 + 8;
  }

  // double wheel_rolling_radius = 15;
  if (this->wheel_rolling_radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.config.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.config.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.config.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.config.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.front_edge_to_center() != 0) {
    set_front_edge_to_center(from.front_edge_to_center());
  }
  if (from.back_edge_to_center() != 0) {
    set_back_edge_to_center(from.back_edge_to_center());
  }
  if (from.left_edge_to_center() != 0) {
    set_left_edge_to_center(from.left_edge_to_center());
  }
  if (from.right_edge_to_center() != 0) {
    set_right_edge_to_center(from.right_edge_to_center());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.min_turn_radius() != 0) {
    set_min_turn_radius(from.min_turn_radius());
  }
  if (from.max_acceleration() != 0) {
    set_max_acceleration(from.max_acceleration());
  }
  if (from.max_deceleration() != 0) {
    set_max_deceleration(from.max_deceleration());
  }
  if (from.max_steer_angle() != 0) {
    set_max_steer_angle(from.max_steer_angle());
  }
  if (from.max_steer_angle_rate() != 0) {
    set_max_steer_angle_rate(from.max_steer_angle_rate());
  }
  if (from.steer_ratio() != 0) {
    set_steer_ratio(from.steer_ratio());
  }
  if (from.wheel_base() != 0) {
    set_wheel_base(from.wheel_base());
  }
  if (from.wheel_rolling_radius() != 0) {
    set_wheel_rolling_radius(from.wheel_rolling_radius());
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.config.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.config.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  swap(front_edge_to_center_, other->front_edge_to_center_);
  swap(back_edge_to_center_, other->back_edge_to_center_);
  swap(left_edge_to_center_, other->left_edge_to_center_);
  swap(right_edge_to_center_, other->right_edge_to_center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(min_turn_radius_, other->min_turn_radius_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(max_steer_angle_, other->max_steer_angle_);
  swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  swap(steer_ratio_, other->steer_ratio_);
  swap(wheel_base_, other->wheel_base_);
  swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleConfig::InitAsDefaultInstance() {
  ::apollo::common::config::_VehicleConfig_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::common::config::_VehicleConfig_default_instance_._instance.get_mutable()->vehicle_param_ = const_cast< ::apollo::common::config::VehicleParam*>(
      ::apollo::common::config::VehicleParam::internal_default_instance());
  ::apollo::common::config::_VehicleConfig_default_instance_._instance.get_mutable()->extrinsics_ = const_cast< ::apollo::common::config::Extrinsics*>(
      ::apollo::common::config::Extrinsics::internal_default_instance());
}
void VehicleConfig::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void VehicleConfig::clear_extrinsics() {
  if (GetArenaNoVirtual() == NULL && extrinsics_ != NULL) {
    delete extrinsics_;
  }
  extrinsics_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleConfig::kHeaderFieldNumber;
const int VehicleConfig::kVehicleParamFieldNumber;
const int VehicleConfig::kExtrinsicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::scc_info_VehicleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.config.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_vehicle_param()) {
    vehicle_param_ = new ::apollo::common::config::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = NULL;
  }
  if (from.has_extrinsics()) {
    extrinsics_ = new ::apollo::common::config::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.config.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrinsics_) -
      reinterpret_cast<char*>(&header_)) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.config.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_param_;
  if (this != internal_default_instance()) delete extrinsics_;
}

void VehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleConfig& VehicleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::scc_info_VehicleConfig.base);
  return *internal_default_instance();
}


void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.config.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_param_ != NULL) {
    delete vehicle_param_;
  }
  vehicle_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && extrinsics_ != NULL) {
    delete extrinsics_;
  }
  extrinsics_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.config.VehicleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.config.VehicleParam vehicle_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.config.Extrinsics extrinsics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extrinsics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.config.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.config.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.config.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .apollo.common.config.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vehicle_param(), output);
  }

  // .apollo.common.config.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_extrinsics(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.config.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.config.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .apollo.common.config.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vehicle_param(), deterministic, target);
  }

  // .apollo.common.config.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_extrinsics(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.config.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.config.VehicleConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .apollo.common.config.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_param_);
  }

  // .apollo.common.config.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *extrinsics_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.config.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.config.VehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.config.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.config.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_vehicle_param()) {
    mutable_vehicle_param()->::apollo::common::config::VehicleParam::MergeFrom(from.vehicle_param());
  }
  if (from.has_extrinsics()) {
    mutable_extrinsics()->::apollo::common::config::Extrinsics::MergeFrom(from.extrinsics());
  }
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.config.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.config.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(vehicle_param_, other->vehicle_param_);
  swap(extrinsics_, other->extrinsics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::config::VehicleParam* Arena::CreateMaybeMessage< ::apollo::common::config::VehicleParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::config::VehicleParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::config::VehicleConfig* Arena::CreateMaybeMessage< ::apollo::common::config::VehicleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::config::VehicleConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
