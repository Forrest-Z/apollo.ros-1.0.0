// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/common/gnss_status.proto

#include "apollo_msgs/proto/common/gnss_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto
namespace apollo {
namespace common {
namespace gnss_status {
class StreamStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamStatus>
      _instance;
} _StreamStatus_default_instance_;
class InsStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InsStatus>
      _instance;
} _InsStatus_default_instance_;
class GnssStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GnssStatus>
      _instance;
} _GnssStatus_default_instance_;
}  // namespace gnss_status
}  // namespace common
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto {
static void InitDefaultsStreamStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::gnss_status::_StreamStatus_default_instance_;
    new (ptr) ::apollo::common::gnss_status::StreamStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::gnss_status::StreamStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamStatus}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsInsStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::gnss_status::_InsStatus_default_instance_;
    new (ptr) ::apollo::common::gnss_status::InsStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::gnss_status::InsStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InsStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInsStatus}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsGnssStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::gnss_status::_GnssStatus_default_instance_;
    new (ptr) ::apollo::common::gnss_status::GnssStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::gnss_status::GnssStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GnssStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGnssStatus}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StreamStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InsStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GnssStatus.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::StreamStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::StreamStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::StreamStatus, ins_stream_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::StreamStatus, rtk_stream_in_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::StreamStatus, rtk_stream_out_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::InsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::InsStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::InsStatus, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::GnssStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::GnssStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::GnssStatus, solution_completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::GnssStatus, solution_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::GnssStatus, position_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::gnss_status::GnssStatus, num_sats_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::common::gnss_status::StreamStatus)},
  { 9, -1, sizeof(::apollo::common::gnss_status::InsStatus)},
  { 16, -1, sizeof(::apollo::common::gnss_status::GnssStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::gnss_status::_StreamStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::gnss_status::_InsStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::gnss_status::_GnssStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/common/gnss_status.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*apollo_msgs/proto/common/gnss_status.p"
      "roto\022\031apollo.common.gnss_status\032%apollo_"
      "msgs/proto/common/header.proto\"\272\002\n\014Strea"
      "mStatus\022%\n\006header\030\001 \001(\0132\025.apollo.common."
      "Header\022E\n\017ins_stream_type\030\002 \001(\0162,.apollo"
      ".common.gnss_status.StreamStatus.Type\022H\n"
      "\022rtk_stream_in_type\030\003 \001(\0162,.apollo.commo"
      "n.gnss_status.StreamStatus.Type\022I\n\023rtk_s"
      "tream_out_type\030\004 \001(\0162,.apollo.common.gns"
      "s_status.StreamStatus.Type\"\'\n\004Type\022\020\n\014DI"
      "SCONNECTED\020\000\022\r\n\tCONNECTED\020\001\"\232\001\n\tInsStatu"
      "s\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
      "\0227\n\004type\030\002 \001(\0162).apollo.common.gnss_stat"
      "us.InsStatus.Type\"-\n\004Type\022\013\n\007INVALID\020\000\022\016"
      "\n\nCONVERGING\020\001\022\010\n\004GOOD\020\002\"\221\001\n\nGnssStatus\022"
      "%\n\006header\030\001 \001(\0132\025.apollo.common.Header\022\032"
      "\n\022solution_completed\030\002 \001(\010\022\027\n\017solution_s"
      "tatus\030\003 \001(\r\022\025\n\rposition_type\030\004 \001(\r\022\020\n\010nu"
      "m_sats\030\005 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 740);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/common/gnss_status.proto", &protobuf_RegisterTypes);
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto
namespace apollo {
namespace common {
namespace gnss_status {
const ::google::protobuf::EnumDescriptor* StreamStatus_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_enum_descriptors[0];
}
bool StreamStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamStatus_Type StreamStatus::DISCONNECTED;
const StreamStatus_Type StreamStatus::CONNECTED;
const StreamStatus_Type StreamStatus::Type_MIN;
const StreamStatus_Type StreamStatus::Type_MAX;
const int StreamStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InsStatus_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_enum_descriptors[1];
}
bool InsStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InsStatus_Type InsStatus::INVALID;
const InsStatus_Type InsStatus::CONVERGING;
const InsStatus_Type InsStatus::GOOD;
const InsStatus_Type InsStatus::Type_MIN;
const InsStatus_Type InsStatus::Type_MAX;
const int InsStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void StreamStatus::InitAsDefaultInstance() {
  ::apollo::common::gnss_status::_StreamStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void StreamStatus::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamStatus::kHeaderFieldNumber;
const int StreamStatus::kInsStreamTypeFieldNumber;
const int StreamStatus::kRtkStreamInTypeFieldNumber;
const int StreamStatus::kRtkStreamOutTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamStatus::StreamStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::scc_info_StreamStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.gnss_status.StreamStatus)
}
StreamStatus::StreamStatus(const StreamStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ins_stream_type_, &from.ins_stream_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtk_stream_out_type_) -
    reinterpret_cast<char*>(&ins_stream_type_)) + sizeof(rtk_stream_out_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.gnss_status.StreamStatus)
}

void StreamStatus::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtk_stream_out_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(rtk_stream_out_type_));
}

StreamStatus::~StreamStatus() {
  // @@protoc_insertion_point(destructor:apollo.common.gnss_status.StreamStatus)
  SharedDtor();
}

void StreamStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void StreamStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamStatus::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamStatus& StreamStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::scc_info_StreamStatus.base);
  return *internal_default_instance();
}


void StreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.gnss_status.StreamStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&ins_stream_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtk_stream_out_type_) -
      reinterpret_cast<char*>(&ins_stream_type_)) + sizeof(rtk_stream_out_type_));
  _internal_metadata_.Clear();
}

bool StreamStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.gnss_status.StreamStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ins_stream_type(static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rtk_stream_in_type(static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rtk_stream_out_type(static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.gnss_status.StreamStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.gnss_status.StreamStatus)
  return false;
#undef DO_
}

void StreamStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.gnss_status.StreamStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2;
  if (this->ins_stream_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ins_stream_type(), output);
  }

  // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3;
  if (this->rtk_stream_in_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rtk_stream_in_type(), output);
  }

  // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4;
  if (this->rtk_stream_out_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rtk_stream_out_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.gnss_status.StreamStatus)
}

::google::protobuf::uint8* StreamStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.gnss_status.StreamStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2;
  if (this->ins_stream_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ins_stream_type(), target);
  }

  // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3;
  if (this->rtk_stream_in_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rtk_stream_in_type(), target);
  }

  // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4;
  if (this->rtk_stream_out_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rtk_stream_out_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.gnss_status.StreamStatus)
  return target;
}

size_t StreamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.gnss_status.StreamStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2;
  if (this->ins_stream_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ins_stream_type());
  }

  // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3;
  if (this->rtk_stream_in_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_stream_in_type());
  }

  // .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4;
  if (this->rtk_stream_out_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_stream_out_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.gnss_status.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.gnss_status.StreamStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.gnss_status.StreamStatus)
    MergeFrom(*source);
  }
}

void StreamStatus::MergeFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.gnss_status.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.ins_stream_type() != 0) {
    set_ins_stream_type(from.ins_stream_type());
  }
  if (from.rtk_stream_in_type() != 0) {
    set_rtk_stream_in_type(from.rtk_stream_in_type());
  }
  if (from.rtk_stream_out_type() != 0) {
    set_rtk_stream_out_type(from.rtk_stream_out_type());
  }
}

void StreamStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStatus::CopyFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStatus::IsInitialized() const {
  return true;
}

void StreamStatus::Swap(StreamStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamStatus::InternalSwap(StreamStatus* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ins_stream_type_, other->ins_stream_type_);
  swap(rtk_stream_in_type_, other->rtk_stream_in_type_);
  swap(rtk_stream_out_type_, other->rtk_stream_out_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamStatus::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InsStatus::InitAsDefaultInstance() {
  ::apollo::common::gnss_status::_InsStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void InsStatus::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsStatus::kHeaderFieldNumber;
const int InsStatus::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsStatus::InsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::scc_info_InsStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.gnss_status.InsStatus)
}
InsStatus::InsStatus(const InsStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.gnss_status.InsStatus)
}

void InsStatus::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

InsStatus::~InsStatus() {
  // @@protoc_insertion_point(destructor:apollo.common.gnss_status.InsStatus)
  SharedDtor();
}

void InsStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void InsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InsStatus::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsStatus& InsStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::scc_info_InsStatus.base);
  return *internal_default_instance();
}


void InsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.gnss_status.InsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool InsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.gnss_status.InsStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.gnss_status.InsStatus.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::common::gnss_status::InsStatus_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.gnss_status.InsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.gnss_status.InsStatus)
  return false;
#undef DO_
}

void InsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.gnss_status.InsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .apollo.common.gnss_status.InsStatus.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.gnss_status.InsStatus)
}

::google::protobuf::uint8* InsStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.gnss_status.InsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .apollo.common.gnss_status.InsStatus.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.gnss_status.InsStatus)
  return target;
}

size_t InsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.gnss_status.InsStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .apollo.common.gnss_status.InsStatus.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.gnss_status.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const InsStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.gnss_status.InsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.gnss_status.InsStatus)
    MergeFrom(*source);
  }
}

void InsStatus::MergeFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.gnss_status.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void InsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStatus::CopyFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStatus::IsInitialized() const {
  return true;
}

void InsStatus::Swap(InsStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsStatus::InternalSwap(InsStatus* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InsStatus::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GnssStatus::InitAsDefaultInstance() {
  ::apollo::common::gnss_status::_GnssStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void GnssStatus::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssStatus::kHeaderFieldNumber;
const int GnssStatus::kSolutionCompletedFieldNumber;
const int GnssStatus::kSolutionStatusFieldNumber;
const int GnssStatus::kPositionTypeFieldNumber;
const int GnssStatus::kNumSatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssStatus::GnssStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::scc_info_GnssStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.gnss_status.GnssStatus)
}
GnssStatus::GnssStatus(const GnssStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&solution_completed_, &from.solution_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sats_) -
    reinterpret_cast<char*>(&solution_completed_)) + sizeof(num_sats_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.gnss_status.GnssStatus)
}

void GnssStatus::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sats_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_sats_));
}

GnssStatus::~GnssStatus() {
  // @@protoc_insertion_point(destructor:apollo.common.gnss_status.GnssStatus)
  SharedDtor();
}

void GnssStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GnssStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GnssStatus::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssStatus& GnssStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::scc_info_GnssStatus.base);
  return *internal_default_instance();
}


void GnssStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.gnss_status.GnssStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&solution_completed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sats_) -
      reinterpret_cast<char*>(&solution_completed_)) + sizeof(num_sats_));
  _internal_metadata_.Clear();
}

bool GnssStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.gnss_status.GnssStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool solution_completed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solution_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 solution_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 position_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_sats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.gnss_status.GnssStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.gnss_status.GnssStatus)
  return false;
#undef DO_
}

void GnssStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.gnss_status.GnssStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // bool solution_completed = 2;
  if (this->solution_completed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->solution_completed(), output);
  }

  // uint32 solution_status = 3;
  if (this->solution_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->solution_status(), output);
  }

  // uint32 position_type = 4;
  if (this->position_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position_type(), output);
  }

  // int32 num_sats = 5;
  if (this->num_sats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_sats(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.gnss_status.GnssStatus)
}

::google::protobuf::uint8* GnssStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.gnss_status.GnssStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // bool solution_completed = 2;
  if (this->solution_completed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->solution_completed(), target);
  }

  // uint32 solution_status = 3;
  if (this->solution_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->solution_status(), target);
  }

  // uint32 position_type = 4;
  if (this->position_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position_type(), target);
  }

  // int32 num_sats = 5;
  if (this->num_sats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_sats(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.gnss_status.GnssStatus)
  return target;
}

size_t GnssStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.gnss_status.GnssStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool solution_completed = 2;
  if (this->solution_completed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 solution_status = 3;
  if (this->solution_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->solution_status());
  }

  // uint32 position_type = 4;
  if (this->position_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position_type());
  }

  // int32 num_sats = 5;
  if (this->num_sats() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_sats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.gnss_status.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.gnss_status.GnssStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.gnss_status.GnssStatus)
    MergeFrom(*source);
  }
}

void GnssStatus::MergeFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.gnss_status.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.solution_completed() != 0) {
    set_solution_completed(from.solution_completed());
  }
  if (from.solution_status() != 0) {
    set_solution_status(from.solution_status());
  }
  if (from.position_type() != 0) {
    set_position_type(from.position_type());
  }
  if (from.num_sats() != 0) {
    set_num_sats(from.num_sats());
  }
}

void GnssStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssStatus::CopyFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssStatus::IsInitialized() const {
  return true;
}

void GnssStatus::Swap(GnssStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssStatus::InternalSwap(GnssStatus* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(solution_completed_, other->solution_completed_);
  swap(solution_status_, other->solution_status_);
  swap(position_type_, other->position_type_);
  swap(num_sats_, other->num_sats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GnssStatus::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_status
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::gnss_status::StreamStatus* Arena::CreateMaybeMessage< ::apollo::common::gnss_status::StreamStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::gnss_status::StreamStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::gnss_status::InsStatus* Arena::CreateMaybeMessage< ::apollo::common::gnss_status::InsStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::gnss_status::InsStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::gnss_status::GnssStatus* Arena::CreateMaybeMessage< ::apollo::common::gnss_status::GnssStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::gnss_status::GnssStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
