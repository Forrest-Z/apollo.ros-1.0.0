// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/common/vehicle_config.proto

#ifndef PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto
#define PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/common/header.pb.h"
#include "apollo_msgs/proto/common/config_extrinsics.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto 

namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto
namespace apollo {
namespace common {
namespace config {
class VehicleConfig;
class VehicleConfigDefaultTypeInternal;
extern VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace config
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::common::config::VehicleConfig* Arena::CreateMaybeMessage<::apollo::common::config::VehicleConfig>(Arena*);
template<> ::apollo::common::config::VehicleParam* Arena::CreateMaybeMessage<::apollo::common::config::VehicleParam>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace common {
namespace config {

// ===================================================================

class VehicleParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.config.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleParam* other);
  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(NULL);
  }

  VehicleParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double front_edge_to_center = 1;
  void clear_front_edge_to_center();
  static const int kFrontEdgeToCenterFieldNumber = 1;
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);

  // double back_edge_to_center = 2;
  void clear_back_edge_to_center();
  static const int kBackEdgeToCenterFieldNumber = 2;
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);

  // double left_edge_to_center = 3;
  void clear_left_edge_to_center();
  static const int kLeftEdgeToCenterFieldNumber = 3;
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);

  // double right_edge_to_center = 4;
  void clear_right_edge_to_center();
  static const int kRightEdgeToCenterFieldNumber = 4;
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);

  // double length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // double width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // double height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // double min_turn_radius = 8;
  void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 8;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  // double max_acceleration = 9;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 9;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // double max_deceleration = 10;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 10;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // double max_steer_angle = 11;
  void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 11;
  double max_steer_angle() const;
  void set_max_steer_angle(double value);

  // double max_steer_angle_rate = 12;
  void clear_max_steer_angle_rate();
  static const int kMaxSteerAngleRateFieldNumber = 12;
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);

  // double steer_ratio = 13;
  void clear_steer_ratio();
  static const int kSteerRatioFieldNumber = 13;
  double steer_ratio() const;
  void set_steer_ratio(double value);

  // double wheel_base = 14;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 14;
  double wheel_base() const;
  void set_wheel_base(double value);

  // double wheel_rolling_radius = 15;
  void clear_wheel_rolling_radius();
  static const int kWheelRollingRadiusFieldNumber = 15;
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.config.VehicleParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.config.VehicleConfig) */ {
 public:
  VehicleConfig();
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleConfig(VehicleConfig&& from) noexcept
    : VehicleConfig() {
    *this = ::std::move(from);
  }

  inline VehicleConfig& operator=(VehicleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleConfig*>(
               &_VehicleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehicleConfig* other);
  friend void swap(VehicleConfig& a, VehicleConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleConfig* New() const final {
    return CreateMaybeMessage<VehicleConfig>(NULL);
  }

  VehicleConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // .apollo.common.config.VehicleParam vehicle_param = 2;
  bool has_vehicle_param() const;
  void clear_vehicle_param();
  static const int kVehicleParamFieldNumber = 2;
  private:
  const ::apollo::common::config::VehicleParam& _internal_vehicle_param() const;
  public:
  const ::apollo::common::config::VehicleParam& vehicle_param() const;
  ::apollo::common::config::VehicleParam* release_vehicle_param();
  ::apollo::common::config::VehicleParam* mutable_vehicle_param();
  void set_allocated_vehicle_param(::apollo::common::config::VehicleParam* vehicle_param);

  // .apollo.common.config.Extrinsics extrinsics = 3;
  bool has_extrinsics() const;
  void clear_extrinsics();
  static const int kExtrinsicsFieldNumber = 3;
  private:
  const ::apollo::common::config::Extrinsics& _internal_extrinsics() const;
  public:
  const ::apollo::common::config::Extrinsics& extrinsics() const;
  ::apollo::common::config::Extrinsics* release_extrinsics();
  ::apollo::common::config::Extrinsics* mutable_extrinsics();
  void set_allocated_extrinsics(::apollo::common::config::Extrinsics* extrinsics);

  // @@protoc_insertion_point(class_scope:apollo.common.config.VehicleConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::apollo::common::Header* header_;
  ::apollo::common::config::VehicleParam* vehicle_param_;
  ::apollo::common::config::Extrinsics* extrinsics_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleParam

// double front_edge_to_center = 1;
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.front_edge_to_center)
}

// double back_edge_to_center = 2;
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.back_edge_to_center)
}

// double left_edge_to_center = 3;
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.left_edge_to_center)
}

// double right_edge_to_center = 4;
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.right_edge_to_center)
}

// double length = 5;
inline void VehicleParam::clear_length() {
  length_ = 0;
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.length)
  return length_;
}
inline void VehicleParam::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.length)
}

// double width = 6;
inline void VehicleParam::clear_width() {
  width_ = 0;
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.width)
  return width_;
}
inline void VehicleParam::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.width)
}

// double height = 7;
inline void VehicleParam::clear_height() {
  height_ = 0;
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.height)
  return height_;
}
inline void VehicleParam::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.height)
}

// double min_turn_radius = 8;
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.min_turn_radius)
}

// double max_acceleration = 9;
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_acceleration)
  return max_acceleration_;
}
inline void VehicleParam::set_max_acceleration(double value) {
  
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_acceleration)
}

// double max_deceleration = 10;
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_deceleration)
  return max_deceleration_;
}
inline void VehicleParam::set_max_deceleration(double value) {
  
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_deceleration)
}

// double max_steer_angle = 11;
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_steer_angle)
}

// double max_steer_angle_rate = 12;
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_steer_angle_rate)
}

// double steer_ratio = 13;
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.steer_ratio)
  return steer_ratio_;
}
inline void VehicleParam::set_steer_ratio(double value) {
  
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.steer_ratio)
}

// double wheel_base = 14;
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.wheel_base)
  return wheel_base_;
}
inline void VehicleParam::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.wheel_base)
}

// double wheel_rolling_radius = 15;
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.wheel_rolling_radius)
}

// -------------------------------------------------------------------

// VehicleConfig

// .apollo.common.Header header = 1;
inline bool VehicleConfig::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::apollo::common::Header& VehicleConfig::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& VehicleConfig::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleConfig.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.config.VehicleConfig.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* VehicleConfig::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.config.VehicleConfig.header)
  return header_;
}
inline void VehicleConfig::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.config.VehicleConfig.header)
}

// .apollo.common.config.VehicleParam vehicle_param = 2;
inline bool VehicleConfig::has_vehicle_param() const {
  return this != internal_default_instance() && vehicle_param_ != NULL;
}
inline void VehicleConfig::clear_vehicle_param() {
  if (GetArenaNoVirtual() == NULL && vehicle_param_ != NULL) {
    delete vehicle_param_;
  }
  vehicle_param_ = NULL;
}
inline const ::apollo::common::config::VehicleParam& VehicleConfig::_internal_vehicle_param() const {
  return *vehicle_param_;
}
inline const ::apollo::common::config::VehicleParam& VehicleConfig::vehicle_param() const {
  const ::apollo::common::config::VehicleParam* p = vehicle_param_;
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleConfig.vehicle_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::config::VehicleParam*>(
      &::apollo::common::config::_VehicleParam_default_instance_);
}
inline ::apollo::common::config::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.config.VehicleConfig.vehicle_param)
  
  ::apollo::common::config::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
inline ::apollo::common::config::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  
  if (vehicle_param_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::config::VehicleParam>(GetArenaNoVirtual());
    vehicle_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.config.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
inline void VehicleConfig::set_allocated_vehicle_param(::apollo::common::config::VehicleParam* vehicle_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vehicle_param_;
  }
  if (vehicle_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_param, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_param_ = vehicle_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.config.VehicleConfig.vehicle_param)
}

// .apollo.common.config.Extrinsics extrinsics = 3;
inline bool VehicleConfig::has_extrinsics() const {
  return this != internal_default_instance() && extrinsics_ != NULL;
}
inline const ::apollo::common::config::Extrinsics& VehicleConfig::_internal_extrinsics() const {
  return *extrinsics_;
}
inline const ::apollo::common::config::Extrinsics& VehicleConfig::extrinsics() const {
  const ::apollo::common::config::Extrinsics* p = extrinsics_;
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleConfig.extrinsics)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::config::Extrinsics*>(
      &::apollo::common::config::_Extrinsics_default_instance_);
}
inline ::apollo::common::config::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.config.VehicleConfig.extrinsics)
  
  ::apollo::common::config::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
inline ::apollo::common::config::Extrinsics* VehicleConfig::mutable_extrinsics() {
  
  if (extrinsics_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::config::Extrinsics>(GetArenaNoVirtual());
    extrinsics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.config.VehicleConfig.extrinsics)
  return extrinsics_;
}
inline void VehicleConfig::set_allocated_extrinsics(::apollo::common::config::Extrinsics* extrinsics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(extrinsics_);
  }
  if (extrinsics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extrinsics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extrinsics, submessage_arena);
    }
    
  } else {
    
  }
  extrinsics_ = extrinsics;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.config.VehicleConfig.extrinsics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto
