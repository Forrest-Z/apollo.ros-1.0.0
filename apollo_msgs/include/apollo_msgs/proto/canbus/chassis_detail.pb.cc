// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/canbus/chassis_detail.proto

#include "apollo_msgs/proto/canbus/chassis_detail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BasicInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Battery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CheckResponseSignal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Deceleration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ems;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Epb;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Eps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Esp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gas;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gear;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Light;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Safety;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleSpd;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto
namespace apollo {
namespace canbus {
class ChassisDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChassisDetail>
      _instance;
} _ChassisDetail_default_instance_;
class CheckResponseSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckResponseSignal>
      _instance;
} _CheckResponseSignal_default_instance_;
class BatteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Battery>
      _instance;
} _Battery_default_instance_;
class LightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Light>
      _instance;
} _Light_default_instance_;
class EpsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Eps>
      _instance;
} _Eps_default_instance_;
class VehicleSpdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleSpd>
      _instance;
} _VehicleSpd_default_instance_;
class DecelerationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deceleration>
      _instance;
} _Deceleration_default_instance_;
class BrakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake>
      _instance;
} _Brake_default_instance_;
class EpbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Epb>
      _instance;
} _Epb_default_instance_;
class GasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gas>
      _instance;
} _Gas_default_instance_;
class EspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Esp>
      _instance;
} _Esp_default_instance_;
class EmsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ems>
      _instance;
} _Ems_default_instance_;
class GearDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gear>
      _instance;
} _Gear_default_instance_;
class SafetyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Safety>
      _instance;
} _Safety_default_instance_;
class BasicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicInfo>
      _instance;
} _BasicInfo_default_instance_;
}  // namespace canbus
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto {
static void InitDefaultsChassisDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_ChassisDetail_default_instance_;
    new (ptr) ::apollo::canbus::ChassisDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::ChassisDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<14> scc_info_ChassisDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsChassisDetail}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_BasicInfo.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Safety.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Gear.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Ems.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Esp.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Gas.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Epb.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Brake.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Deceleration.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_VehicleSpd.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Eps.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Light.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Battery.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_CheckResponseSignal.base,}};

static void InitDefaultsCheckResponseSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_CheckResponseSignal_default_instance_;
    new (ptr) ::apollo::canbus::CheckResponseSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::CheckResponseSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckResponseSignal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckResponseSignal}, {}};

static void InitDefaultsBattery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Battery_default_instance_;
    new (ptr) ::apollo::canbus::Battery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Battery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Battery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBattery}, {}};

static void InitDefaultsLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Light_default_instance_;
    new (ptr) ::apollo::canbus::Light();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Light::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Light =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLight}, {}};

static void InitDefaultsEps() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Eps_default_instance_;
    new (ptr) ::apollo::canbus::Eps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Eps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Eps =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEps}, {}};

static void InitDefaultsVehicleSpd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_VehicleSpd_default_instance_;
    new (ptr) ::apollo::canbus::VehicleSpd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::VehicleSpd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleSpd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleSpd}, {}};

static void InitDefaultsDeceleration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Deceleration_default_instance_;
    new (ptr) ::apollo::canbus::Deceleration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Deceleration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Deceleration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeceleration}, {}};

static void InitDefaultsBrake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_default_instance_;
    new (ptr) ::apollo::canbus::Brake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake}, {}};

static void InitDefaultsEpb() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Epb_default_instance_;
    new (ptr) ::apollo::canbus::Epb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Epb::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEpb}, {}};

static void InitDefaultsGas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gas_default_instance_;
    new (ptr) ::apollo::canbus::Gas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGas}, {}};

static void InitDefaultsEsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Esp_default_instance_;
    new (ptr) ::apollo::canbus::Esp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Esp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Esp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEsp}, {}};

static void InitDefaultsEms() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ems_default_instance_;
    new (ptr) ::apollo::canbus::Ems();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ems::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ems =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEms}, {}};

static void InitDefaultsGear() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gear_default_instance_;
    new (ptr) ::apollo::canbus::Gear();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gear::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gear =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGear}, {}};

static void InitDefaultsSafety() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Safety_default_instance_;
    new (ptr) ::apollo::canbus::Safety();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Safety::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Safety =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSafety}, {}};

static void InitDefaultsBasicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_BasicInfo_default_instance_;
    new (ptr) ::apollo::canbus::BasicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::BasicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BasicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBasicInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChassisDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckResponseSignal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Battery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Light.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Eps.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleSpd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deceleration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Epb.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gas.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Esp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ems.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gear.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Safety.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicInfo.base);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, car_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, basic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, safety_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, esp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, epb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, check_response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_eps_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_epb_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_esp_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_vtog_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_scu_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_switch_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_vcu_online_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, battery_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, fuel_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, turn_light_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lamp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, is_brake_lamp_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, is_auto_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, wiper_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lotion_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, is_horn_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lincoln_lamp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lincoln_wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lincoln_ambient_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_eps_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, eps_control_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, eps_driver_hand_torq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_steering_angle_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_trimming_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_calibration_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_failure_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, allow_enter_autonomous_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, current_driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, vehicle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, epas_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, calibration_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, timestamp_65_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, build_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_vehicle_standstill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_vehicle_spd_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_yaw_rate_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, yaw_rate_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_ax_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ax_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_ay_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ay_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, vert_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, acc_est_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, timestamp_sec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, is_deceleration_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, is_deceleration_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, is_evb_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, evb_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, brake_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, brake_pressure_spd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_pedal_pressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_force_exist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_over_heat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_hand_brake_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_pedal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_applying_brakes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_torque_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, hsa_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_torque_act_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, hsa_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, wheel_torque_act_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, build_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, is_epb_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, is_epb_released_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, parking_brake_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_pedal_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_pedal_pressed_more_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, gas_pedal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, watchdog_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, accelerator_pedal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, accelerator_pedal_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, build_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_acc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_tcsvdc_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_stab_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_stab_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_trac_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_trac_enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_acc_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_acc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, max_engine_torq_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, min_engine_torq_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, base_engine_torq_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_over_engine_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_rpm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, is_shift_position_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, gear_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, gear_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, canbus_fault_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_driver_car_door_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_driver_buckled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, emergency_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, has_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_motor_invertor_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_system_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_power_battery_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_motor_invertor_over_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_small_battery_charge_discharge_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_rearleft_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_rearright_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_hood_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_trunk_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_airbag_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_buckled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, front_left_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, front_right_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, rear_left_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, rear_right_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, car_driving_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_auto_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, power_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_air_bag_deployed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, odo_meter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, drive_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_system_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_human_interrupt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_on_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_off_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_res_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_cancel_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_on_off_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_res_cancel_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_inc_spd_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_dec_spd_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_inc_gap_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_dec_gap_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, lka_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, canbus_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, gps_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, compass_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_gps_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_inferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, num_satellites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, gps_speed_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::canbus::ChassisDetail)},
  { 20, -1, sizeof(::apollo::canbus::CheckResponseSignal)},
  { 32, -1, sizeof(::apollo::canbus::Battery)},
  { 39, -1, sizeof(::apollo::canbus::Light)},
  { 54, -1, sizeof(::apollo::canbus::Eps)},
  { 85, -1, sizeof(::apollo::canbus::VehicleSpd)},
  { 120, -1, sizeof(::apollo::canbus::Deceleration)},
  { 132, -1, sizeof(::apollo::canbus::Brake)},
  { 167, -1, sizeof(::apollo::canbus::Epb)},
  { 176, -1, sizeof(::apollo::canbus::Gas)},
  { 201, -1, sizeof(::apollo::canbus::Esp)},
  { 217, -1, sizeof(::apollo::canbus::Ems)},
  { 233, -1, sizeof(::apollo::canbus::Gear)},
  { 243, -1, sizeof(::apollo::canbus::Safety)},
  { 271, -1, sizeof(::apollo::canbus::BasicInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_ChassisDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_CheckResponseSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Battery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Light_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Eps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_VehicleSpd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Deceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Epb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Gas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Esp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Ems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Gear_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Safety_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_BasicInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/canbus/chassis_detail.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-apollo_msgs/proto/canbus/chassis_detai"
      "l.proto\022\rapollo.canbus\032&apollo_msgs/prot"
      "o/canbus/chassis.proto\"\235\005\n\rChassisDetail"
      "\0223\n\010car_type\030\001 \001(\0162!.apollo.canbus.Chass"
      "isDetail.Type\022\'\n\005basic\030\002 \001(\0132\030.apollo.ca"
      "nbus.BasicInfo\022%\n\006safety\030\003 \001(\0132\025.apollo."
      "canbus.Safety\022!\n\004gear\030\004 \001(\0132\023.apollo.can"
      "bus.Gear\022\037\n\003ems\030\005 \001(\0132\022.apollo.canbus.Em"
      "s\022\037\n\003esp\030\006 \001(\0132\022.apollo.canbus.Esp\022\037\n\003ga"
      "s\030\007 \001(\0132\022.apollo.canbus.Gas\022\037\n\003epb\030\010 \001(\013"
      "2\022.apollo.canbus.Epb\022#\n\005brake\030\t \001(\0132\024.ap"
      "ollo.canbus.Brake\0221\n\014deceleration\030\n \001(\0132"
      "\033.apollo.canbus.Deceleration\022.\n\013vehicle_"
      "spd\030\013 \001(\0132\031.apollo.canbus.VehicleSpd\022\037\n\003"
      "eps\030\014 \001(\0132\022.apollo.canbus.Eps\022#\n\005light\030\r"
      " \001(\0132\024.apollo.canbus.Light\022\'\n\007battery\030\016 "
      "\001(\0132\026.apollo.canbus.Battery\022:\n\016check_res"
      "ponse\030\017 \001(\0132\".apollo.canbus.CheckRespons"
      "eSignal\"-\n\004Type\022\017\n\013QIRUI_EQ_15\020\000\022\024\n\020CHAN"
      "GAN_RUICHENG\020\001\"\272\001\n\023CheckResponseSignal\022\025"
      "\n\ris_eps_online\030\001 \001(\010\022\025\n\ris_epb_online\030\002"
      " \001(\010\022\025\n\ris_esp_online\030\003 \001(\010\022\026\n\016is_vtog_o"
      "nline\030\004 \001(\010\022\025\n\ris_scu_online\030\005 \001(\010\022\030\n\020is"
      "_switch_online\030\006 \001(\010\022\025\n\ris_vcu_online\030\007 "
      "\001(\010\"6\n\007Battery\022\027\n\017battery_percent\030\001 \001(\001\022"
      "\022\n\nfuel_level\030\002 \001(\001\"\244\t\n\005Light\022;\n\017turn_li"
      "ght_type\030\001 \001(\0162\".apollo.canbus.Light.Tur"
      "nLightType\0220\n\tlamp_type\030\002 \001(\0162\035.apollo.c"
      "anbus.Light.LampType\022\030\n\020is_brake_lamp_on"
      "\030\003 \001(\010\022\025\n\ris_auto_light\030\004 \001(\010\022\022\n\nwiper_g"
      "ear\030\005 \001(\005\022\023\n\013lotion_gear\030\006 \001(\005\022\022\n\nis_hor"
      "n_on\030\007 \001(\010\022\?\n\021lincoln_lamp_type\030\010 \001(\0162$."
      "apollo.canbus.Light.LincolnLampType\022<\n\rl"
      "incoln_wiper\030\t \001(\0162%.apollo.canbus.Light"
      ".LincolnWiperType\022@\n\017lincoln_ambient\030\n \001"
      "(\0162\'.apollo.canbus.Light.LincolnAmbientT"
      "ype\"[\n\rTurnLightType\022\022\n\016TURN_LIGHT_OFF\020\000"
      "\022\020\n\014TURN_LEFT_ON\020\001\022\021\n\rTURN_RIGHT_ON\020\002\022\021\n"
      "\rTURN_LIGHT_ON\020\003\";\n\010LampType\022\014\n\010BEAM_OFF"
      "\020\000\022\020\n\014HIGH_BEAM_ON\020\001\022\017\n\013LOW_BEAM_ON\020\002\"Y\n"
      "\017LincolnLampType\022\r\n\tBEAM_NULL\020\000\022\026\n\022BEAM_"
      "FLASH_TO_PASS\020\001\022\r\n\tBEAM_HIGH\020\002\022\020\n\014BEAM_I"
      "NVALID\020\003\"\334\002\n\020LincolnWiperType\022\r\n\tWIPER_O"
      "FF\020\000\022\022\n\016WIPER_AUTO_OFF\020\001\022\024\n\020WIPER_OFF_MO"
      "VING\020\002\022\024\n\020WIPER_MANUAL_OFF\020\003\022\023\n\017WIPER_MA"
      "NUAL_ON\020\004\022\024\n\020WIPER_MANUAL_LOW\020\005\022\025\n\021WIPER"
      "_MANUAL_HIGH\020\006\022\024\n\020WIPER_MIST_FLICK\020\007\022\016\n\n"
      "WIPER_WASH\020\010\022\022\n\016WIPER_AUTO_LOW\020\t\022\023\n\017WIPE"
      "R_AUTO_HIGH\020\n\022\027\n\023WIPER_COURTESY_WIPE\020\013\022\025"
      "\n\021WIPER_AUTO_ADJUST\020\014\022\022\n\016WIPER_RESERVED\020"
      "\r\022\021\n\rWIPER_STALLED\020\016\022\021\n\rWIPER_NO_DATA\020\017\""
      "\250\001\n\022LincolnAmbientType\022\020\n\014AMBIENT_DARK\020\000"
      "\022\021\n\rAMBIENT_LIGHT\020\001\022\024\n\020AMBIENT_TWILIGHT\020"
      "\002\022\025\n\021AMBIENT_TUNNEL_ON\020\003\022\026\n\022AMBIENT_TUNN"
      "EL_OFF\020\004\022\023\n\017AMBIENT_INVALID\020\005\022\023\n\017AMBIENT"
      "_NO_DATA\020\007\"\205\006\n\003Eps\022\023\n\013is_eps_fail\030\001 \001(\010\022"
      "2\n\021eps_control_state\030\002 \001(\0162\027.apollo.canb"
      "us.Eps.Type\022\034\n\024eps_driver_hand_torq\030\003 \001("
      "\001\022\037\n\027is_steering_angle_valid\030\004 \001(\010\022\026\n\016st"
      "eering_angle\030\005 \001(\001\022\032\n\022steering_angle_spd"
      "\030\006 \001(\001\022\032\n\022is_trimming_status\030\007 \001(\010\022\035\n\025is"
      "_calibration_status\030\010 \001(\010\022\031\n\021is_failure_"
      "status\030\t \001(\010\022#\n\033allow_enter_autonomous_m"
      "ode\030\n \001(\005\022\034\n\024current_driving_mode\030\013 \001(\005\022"
      "\032\n\022steering_angle_cmd\030\014 \001(\001\022\025\n\rvehicle_s"
      "peed\030\r \001(\001\022\023\n\013epas_torque\030\016 \001(\001\022\030\n\020steer"
      "ing_enabled\030\017 \001(\010\022\027\n\017driver_override\030\020 \001"
      "(\010\022\027\n\017driver_activity\030\021 \001(\010\022\026\n\016watchdog_"
      "fault\030\022 \001(\010\022\027\n\017channel_1_fault\030\023 \001(\010\022\027\n\017"
      "channel_2_fault\030\024 \001(\010\022\031\n\021calibration_fau"
      "lt\030\025 \001(\010\022\027\n\017connector_fault\030\026 \001(\010\022\024\n\014tim"
      "estamp_65\030\027 \001(\001\022\025\n\rmajor_version\030\030 \001(\005\022\025"
      "\n\rminor_version\030\031 \001(\005\022\024\n\014build_number\030\032 "
      "\001(\005\"=\n\004Type\022\021\n\rNOT_AVAILABLE\020\000\022\t\n\005READY\020"
      "\001\022\n\n\006ACTIVE\020\002\022\013\n\007INVALID\020\003\"\200\007\n\nVehicleSp"
      "d\022\035\n\025is_vehicle_standstill\030\001 \001(\010\022\034\n\024is_v"
      "ehicle_spd_valid\030\002 \001(\010\022\023\n\013vehicle_spd\030\003 "
      "\001(\001\022\035\n\025is_wheel_spd_rr_valid\030\004 \001(\010\022:\n\022wh"
      "eel_direction_rr\030\005 \001(\0162\036.apollo.canbus.V"
      "ehicleSpd.Type\022\024\n\014wheel_spd_rr\030\006 \001(\001\022\035\n\025"
      "is_wheel_spd_rl_valid\030\007 \001(\010\022:\n\022wheel_dir"
      "ection_rl\030\010 \001(\0162\036.apollo.canbus.VehicleS"
      "pd.Type\022\024\n\014wheel_spd_rl\030\t \001(\001\022\035\n\025is_whee"
      "l_spd_fr_valid\030\n \001(\010\022:\n\022wheel_direction_"
      "fr\030\013 \001(\0162\036.apollo.canbus.VehicleSpd.Type"
      "\022\024\n\014wheel_spd_fr\030\014 \001(\001\022\035\n\025is_wheel_spd_f"
      "l_valid\030\r \001(\010\022:\n\022wheel_direction_fl\030\016 \001("
      "\0162\036.apollo.canbus.VehicleSpd.Type\022\024\n\014whe"
      "el_spd_fl\030\017 \001(\001\022\031\n\021is_yaw_rate_valid\030\020 \001"
      "(\010\022\020\n\010yaw_rate\030\021 \001(\001\022\027\n\017yaw_rate_offset\030"
      "\022 \001(\001\022\023\n\013is_ax_valid\030\023 \001(\010\022\n\n\002ax\030\024 \001(\001\022\021"
      "\n\tax_offset\030\025 \001(\001\022\023\n\013is_ay_valid\030\026 \001(\010\022\n"
      "\n\002ay\030\027 \001(\001\022\021\n\tay_offset\030\030 \001(\001\022\017\n\007lat_acc"
      "\030\031 \001(\001\022\020\n\010long_acc\030\032 \001(\001\022\020\n\010vert_acc\030\033 \001"
      "(\001\022\021\n\troll_rate\030\034 \001(\001\022\017\n\007acc_est\030\035 \001(\001\022\025"
      "\n\rtimestamp_sec\030\036 \001(\001\">\n\004Type\022\013\n\007FORWARD"
      "\020\000\022\014\n\010BACKWARD\020\001\022\016\n\nSTANDSTILL\020\002\022\013\n\007INVA"
      "LID\020\003\"\306\001\n\014Deceleration\022!\n\031is_deceleratio"
      "n_available\030\001 \001(\010\022\036\n\026is_deceleration_act"
      "ive\030\002 \001(\010\022\024\n\014deceleration\030\003 \001(\001\022\023\n\013is_ev"
      "b_fail\030\004 \001(\001\022\024\n\014evb_pressure\030\005 \001(\001\022\026\n\016br"
      "ake_pressure\030\006 \001(\001\022\032\n\022brake_pressure_spd"
      "\030\007 \001(\001\"\257\010\n\005Brake\022\036\n\026is_brake_pedal_press"
      "ed\030\001 \001(\010\022\034\n\024is_brake_force_exist\030\002 \001(\010\022\032"
      "\n\022is_brake_over_heat\030\003 \001(\010\022\030\n\020is_hand_br"
      "ake_on\030\004 \001(\010\022\034\n\024brake_pedal_position\030\005 \001"
      "(\001\022\026\n\016is_brake_valid\030\006 \001(\010\022\023\n\013brake_inpu"
      "t\030\007 \001(\001\022\021\n\tbrake_cmd\030\010 \001(\001\022\024\n\014brake_outp"
      "ut\030\t \001(\001\022\021\n\tboo_input\030\n \001(\010\022\017\n\007boo_cmd\030\013"
      " \001(\010\022\022\n\nboo_output\030\014 \001(\010\022 \n\030watchdog_app"
      "lying_brakes\030\r \001(\010\022\027\n\017watchdog_source\030\016 "
      "\001(\005\022\025\n\rbrake_enabled\030\017 \001(\010\022\027\n\017driver_ove"
      "rride\030\020 \001(\010\022\027\n\017driver_activity\030\021 \001(\010\022\026\n\016"
      "watchdog_fault\030\022 \001(\010\022\027\n\017channel_1_fault\030"
      "\023 \001(\010\022\027\n\017channel_2_fault\030\024 \001(\010\022\021\n\tboo_fa"
      "ult\030\025 \001(\010\022\027\n\017connector_fault\030\026 \001(\010\022\030\n\020br"
      "ake_torque_req\030\027 \001(\005\0226\n\nhsa_status\030\030 \001(\016"
      "2\".apollo.canbus.Brake.HSAStatusType\022\030\n\020"
      "brake_torque_act\030\031 \001(\005\0222\n\010hsa_mode\030\032 \001(\016"
      "2 .apollo.canbus.Brake.HSAModeType\022\030\n\020wh"
      "eel_torque_act\030\033 \001(\005\022\025\n\rmajor_version\030\034 "
      "\001(\005\022\025\n\rminor_version\030\035 \001(\005\022\024\n\014build_numb"
      "er\030\036 \001(\005\"\273\001\n\rHSAStatusType\022\020\n\014HSA_INACTI"
      "VE\020\000\022\030\n\024HSA_FINDING_GRADIENT\020\001\022\026\n\022HSA_AC"
      "TIVE_PRESSED\020\002\022\027\n\023HSA_ACTIVE_RELEASED\020\003\022"
      "\024\n\020HSA_FAST_RELEASE\020\004\022\024\n\020HSA_SLOW_RELEAS"
      "E\020\005\022\016\n\nHSA_FAILED\020\006\022\021\n\rHSA_UNDEFINED\020\007\"P"
      "\n\013HSAModeType\022\013\n\007HSA_OFF\020\000\022\014\n\010HSA_AUTO\020\001"
      "\022\016\n\nHSA_MANUAL\020\002\022\026\n\022HSA_MODE_UNDEFINED\020\003"
      "\"\333\001\n\003Epb\022\024\n\014is_epb_error\030\001 \001(\010\022\027\n\017is_epb"
      "_released\030\002 \001(\010\022\022\n\nepb_status\030\003 \001(\005\022;\n\024p"
      "arking_brake_status\030\004 \001(\0162\035.apollo.canbu"
      "s.Epb.PBrakeType\"T\n\nPBrakeType\022\016\n\nPBRAKE"
      "_OFF\020\000\022\025\n\021PBRAKE_TRANSITION\020\001\022\r\n\tPBRAKE_"
      "ON\020\002\022\020\n\014PBRAKE_FAULT\020\003\"\204\004\n\003Gas\022\032\n\022is_gas"
      "_pedal_error\030\001 \001(\010\022!\n\031is_gas_pedal_press"
      "ed_more\030\002 \001(\010\022\032\n\022gas_pedal_position\030\003 \001("
      "\001\022\024\n\014is_gas_valid\030\004 \001(\010\022\026\n\016throttle_inpu"
      "t\030\005 \001(\001\022\024\n\014throttle_cmd\030\006 \001(\001\022\027\n\017throttl"
      "e_output\030\007 \001(\001\022\027\n\017watchdog_source\030\010 \001(\005\022"
      "\030\n\020throttle_enabled\030\t \001(\010\022\027\n\017driver_over"
      "ride\030\n \001(\010\022\027\n\017driver_activity\030\013 \001(\010\022\026\n\016w"
      "atchdog_fault\030\014 \001(\010\022\027\n\017channel_1_fault\030\r"
      " \001(\010\022\027\n\017channel_2_fault\030\016 \001(\010\022\027\n\017connect"
      "or_fault\030\017 \001(\010\022\031\n\021accelerator_pedal\030\020 \001("
      "\001\022\036\n\026accelerator_pedal_rate\030\021 \001(\001\022\025\n\rmaj"
      "or_version\030\022 \001(\005\022\025\n\rminor_version\030\023 \001(\005\022"
      "\024\n\014build_number\030\024 \001(\005\"\210\002\n\003Esp\022\030\n\020is_esp_"
      "acc_error\030\001 \001(\010\022\021\n\tis_esp_on\030\002 \001(\010\022\025\n\ris"
      "_esp_active\030\003 \001(\010\022\024\n\014is_abs_error\030\004 \001(\010\022"
      "\025\n\ris_abs_active\030\005 \001(\010\022\026\n\016is_tcsvdc_fail"
      "\030\006 \001(\010\022\026\n\016is_abs_enabled\030\007 \001(\010\022\026\n\016is_sta"
      "b_active\030\010 \001(\010\022\027\n\017is_stab_enabled\030\t \001(\010\022"
      "\026\n\016is_trac_active\030\n \001(\010\022\027\n\017is_trac_enabl"
      "ed\030\013 \001(\010\"\215\003\n\003Ems\022\037\n\027is_engine_acc_availa"
      "ble\030\001 \001(\010\022\033\n\023is_engine_acc_error\030\002 \001(\010\022-"
      "\n\014engine_state\030\003 \001(\0162\027.apollo.canbus.Ems"
      ".Type\022\037\n\027max_engine_torq_percent\030\004 \001(\001\022\037"
      "\n\027min_engine_torq_percent\030\005 \001(\001\022!\n\031base_"
      "engine_torq_constant\030\006 \001(\005\022\035\n\025is_engine_"
      "speed_error\030\007 \001(\010\022\024\n\014engine_speed\030\010 \001(\001\022"
      "\025\n\rengine_torque\030\t \001(\005\022\035\n\025is_over_engine"
      "_torque\030\n \001(\010\022\022\n\nengine_rpm\030\013 \001(\001\"5\n\004Typ"
      "e\022\010\n\004STOP\020\000\022\t\n\005CRANK\020\001\022\013\n\007RUNNING\020\002\022\013\n\007I"
      "NVALID\020\003\"\306\001\n\004Gear\022\037\n\027is_shift_position_v"
      "alid\030\001 \001(\010\0227\n\ngear_state\030\002 \001(\0162#.apollo."
      "canbus.Chassis.GearPosition\022\027\n\017driver_ov"
      "erride\030\003 \001(\010\0225\n\010gear_cmd\030\004 \001(\0162#.apollo."
      "canbus.Chassis.GearPosition\022\024\n\014canbus_fa"
      "ult\030\005 \001(\010\"\347\005\n\006Safety\022 \n\030is_driver_car_do"
      "or_close\030\001 \001(\010\022\031\n\021is_driver_buckled\030\002 \001("
      "\010\022\030\n\020emergency_button\030\003 \001(\005\022\021\n\thas_error"
      "\030\004 \001(\010\022\037\n\027is_motor_invertor_fault\030\005 \001(\010\022"
      "\027\n\017is_system_fault\030\006 \001(\010\022\036\n\026is_power_bat"
      "tery_fault\030\007 \001(\010\022*\n\"is_motor_invertor_ov"
      "er_temperature\030\010 \001(\010\022/\n\'is_small_battery"
      "_charge_discharge_fault\030\t \001(\010\022\024\n\014driving"
      "_mode\030\n \001(\005\022\036\n\026is_passenger_door_open\030\013 "
      "\001(\010\022\035\n\025is_rearleft_door_open\030\014 \001(\010\022\036\n\026is"
      "_rearright_door_open\030\r \001(\010\022\024\n\014is_hood_op"
      "en\030\016 \001(\010\022\025\n\ris_trunk_open\030\017 \001(\010\022\035\n\025is_pa"
      "ssenger_detected\030\020 \001(\010\022#\n\033is_passenger_a"
      "irbag_enabled\030\021 \001(\010\022\034\n\024is_passenger_buck"
      "led\030\022 \001(\010\022\035\n\025front_left_tire_press\030\023 \001(\005"
      "\022\036\n\026front_right_tire_press\030\024 \001(\005\022\034\n\024rear"
      "_left_tire_press\030\025 \001(\005\022\035\n\025rear_right_tir"
      "e_press\030\026 \001(\005\022<\n\020car_driving_mode\030\027 \001(\0162"
      "\".apollo.canbus.Chassis.DrivingMode\"\211\010\n\t"
      "BasicInfo\022\024\n\014is_auto_mode\030\001 \001(\010\0222\n\013power"
      "_state\030\002 \001(\0162\035.apollo.canbus.BasicInfo.T"
      "ype\022\033\n\023is_air_bag_deployed\030\003 \001(\010\022\021\n\todo_"
      "meter\030\004 \001(\001\022\023\n\013drive_range\030\005 \001(\001\022\027\n\017is_s"
      "ystem_error\030\006 \001(\010\022\032\n\022is_human_interrupt\030"
      "\007 \001(\010\022\025\n\racc_on_button\030\010 \001(\010\022\026\n\016acc_off_"
      "button\030\t \001(\010\022\026\n\016acc_res_button\030\n \001(\010\022\031\n\021"
      "acc_cancel_button\030\013 \001(\010\022\031\n\021acc_on_off_bu"
      "tton\030\014 \001(\010\022\035\n\025acc_res_cancel_button\030\r \001("
      "\010\022\032\n\022acc_inc_spd_button\030\016 \001(\010\022\032\n\022acc_dec"
      "_spd_button\030\017 \001(\010\022\032\n\022acc_inc_gap_button\030"
      "\020 \001(\010\022\032\n\022acc_dec_gap_button\030\021 \001(\010\022\022\n\nlka"
      "_button\030\022 \001(\010\022\024\n\014canbus_fault\030\023 \001(\010\022\020\n\010l"
      "atitude\030\024 \001(\001\022\021\n\tlongitude\030\025 \001(\001\022\021\n\tgps_"
      "valid\030\026 \001(\010\022\014\n\004year\030\027 \001(\005\022\r\n\005month\030\030 \001(\005"
      "\022\013\n\003day\030\031 \001(\005\022\r\n\005hours\030\032 \001(\005\022\017\n\007minutes\030"
      "\033 \001(\005\022\017\n\007seconds\030\034 \001(\005\022\031\n\021compass_direct"
      "ion\030\035 \001(\001\022\014\n\004pdop\030\036 \001(\001\022\024\n\014is_gps_fault\030"
      "\037 \001(\010\022\023\n\013is_inferred\030  \001(\010\022\020\n\010altitude\030!"
      " \001(\001\022\017\n\007heading\030\" \001(\001\022\014\n\004hdop\030# \001(\001\022\014\n\004v"
      "dop\030$ \001(\001\0224\n\007quality\030% \001(\0162#.apollo.canb"
      "us.BasicInfo.GpsQuality\022\026\n\016num_satellite"
      "s\030& \001(\005\022\021\n\tgps_speed\030\' \001(\001\"8\n\004Type\022\007\n\003OF"
      "F\020\000\022\007\n\003ACC\020\001\022\006\n\002ON\020\002\022\t\n\005START\020\003\022\013\n\007INVAL"
      "ID\020\004\"A\n\nGpsQuality\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D"
      "\020\001\022\n\n\006FIX_3D\020\002\022\017\n\013FIX_INVALID\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/canbus/chassis_detail.proto", &protobuf_RegisterTypes);
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto
namespace apollo {
namespace canbus {
const ::google::protobuf::EnumDescriptor* ChassisDetail_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[0];
}
bool ChassisDetail_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisDetail_Type ChassisDetail::QIRUI_EQ_15;
const ChassisDetail_Type ChassisDetail::CHANGAN_RUICHENG;
const ChassisDetail_Type ChassisDetail::Type_MIN;
const ChassisDetail_Type ChassisDetail::Type_MAX;
const int ChassisDetail::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_TurnLightType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[1];
}
bool Light_TurnLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_TurnLightType Light::TURN_LIGHT_OFF;
const Light_TurnLightType Light::TURN_LEFT_ON;
const Light_TurnLightType Light::TURN_RIGHT_ON;
const Light_TurnLightType Light::TURN_LIGHT_ON;
const Light_TurnLightType Light::TurnLightType_MIN;
const Light_TurnLightType Light::TurnLightType_MAX;
const int Light::TurnLightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LampType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[2];
}
bool Light_LampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LampType Light::BEAM_OFF;
const Light_LampType Light::HIGH_BEAM_ON;
const Light_LampType Light::LOW_BEAM_ON;
const Light_LampType Light::LampType_MIN;
const Light_LampType Light::LampType_MAX;
const int Light::LampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnLampType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[3];
}
bool Light_LincolnLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnLampType Light::BEAM_NULL;
const Light_LincolnLampType Light::BEAM_FLASH_TO_PASS;
const Light_LincolnLampType Light::BEAM_HIGH;
const Light_LincolnLampType Light::BEAM_INVALID;
const Light_LincolnLampType Light::LincolnLampType_MIN;
const Light_LincolnLampType Light::LincolnLampType_MAX;
const int Light::LincolnLampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnWiperType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[4];
}
bool Light_LincolnWiperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnWiperType Light::WIPER_OFF;
const Light_LincolnWiperType Light::WIPER_AUTO_OFF;
const Light_LincolnWiperType Light::WIPER_OFF_MOVING;
const Light_LincolnWiperType Light::WIPER_MANUAL_OFF;
const Light_LincolnWiperType Light::WIPER_MANUAL_ON;
const Light_LincolnWiperType Light::WIPER_MANUAL_LOW;
const Light_LincolnWiperType Light::WIPER_MANUAL_HIGH;
const Light_LincolnWiperType Light::WIPER_MIST_FLICK;
const Light_LincolnWiperType Light::WIPER_WASH;
const Light_LincolnWiperType Light::WIPER_AUTO_LOW;
const Light_LincolnWiperType Light::WIPER_AUTO_HIGH;
const Light_LincolnWiperType Light::WIPER_COURTESY_WIPE;
const Light_LincolnWiperType Light::WIPER_AUTO_ADJUST;
const Light_LincolnWiperType Light::WIPER_RESERVED;
const Light_LincolnWiperType Light::WIPER_STALLED;
const Light_LincolnWiperType Light::WIPER_NO_DATA;
const Light_LincolnWiperType Light::LincolnWiperType_MIN;
const Light_LincolnWiperType Light::LincolnWiperType_MAX;
const int Light::LincolnWiperType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnAmbientType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[5];
}
bool Light_LincolnAmbientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnAmbientType Light::AMBIENT_DARK;
const Light_LincolnAmbientType Light::AMBIENT_LIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TWILIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_ON;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_OFF;
const Light_LincolnAmbientType Light::AMBIENT_INVALID;
const Light_LincolnAmbientType Light::AMBIENT_NO_DATA;
const Light_LincolnAmbientType Light::LincolnAmbientType_MIN;
const Light_LincolnAmbientType Light::LincolnAmbientType_MAX;
const int Light::LincolnAmbientType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[6];
}
bool Eps_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_Type Eps::NOT_AVAILABLE;
const Eps_Type Eps::READY;
const Eps_Type Eps::ACTIVE;
const Eps_Type Eps::INVALID;
const Eps_Type Eps::Type_MIN;
const Eps_Type Eps::Type_MAX;
const int Eps::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleSpd_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[7];
}
bool VehicleSpd_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleSpd_Type VehicleSpd::FORWARD;
const VehicleSpd_Type VehicleSpd::BACKWARD;
const VehicleSpd_Type VehicleSpd::STANDSTILL;
const VehicleSpd_Type VehicleSpd::INVALID;
const VehicleSpd_Type VehicleSpd::Type_MIN;
const VehicleSpd_Type VehicleSpd::Type_MAX;
const int VehicleSpd::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAStatusType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[8];
}
bool Brake_HSAStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAStatusType Brake::HSA_INACTIVE;
const Brake_HSAStatusType Brake::HSA_FINDING_GRADIENT;
const Brake_HSAStatusType Brake::HSA_ACTIVE_PRESSED;
const Brake_HSAStatusType Brake::HSA_ACTIVE_RELEASED;
const Brake_HSAStatusType Brake::HSA_FAST_RELEASE;
const Brake_HSAStatusType Brake::HSA_SLOW_RELEASE;
const Brake_HSAStatusType Brake::HSA_FAILED;
const Brake_HSAStatusType Brake::HSA_UNDEFINED;
const Brake_HSAStatusType Brake::HSAStatusType_MIN;
const Brake_HSAStatusType Brake::HSAStatusType_MAX;
const int Brake::HSAStatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAModeType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[9];
}
bool Brake_HSAModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAModeType Brake::HSA_OFF;
const Brake_HSAModeType Brake::HSA_AUTO;
const Brake_HSAModeType Brake::HSA_MANUAL;
const Brake_HSAModeType Brake::HSA_MODE_UNDEFINED;
const Brake_HSAModeType Brake::HSAModeType_MIN;
const Brake_HSAModeType Brake::HSAModeType_MAX;
const int Brake::HSAModeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Epb_PBrakeType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[10];
}
bool Epb_PBrakeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Epb_PBrakeType Epb::PBRAKE_OFF;
const Epb_PBrakeType Epb::PBRAKE_TRANSITION;
const Epb_PBrakeType Epb::PBRAKE_ON;
const Epb_PBrakeType Epb::PBRAKE_FAULT;
const Epb_PBrakeType Epb::PBrakeType_MIN;
const Epb_PBrakeType Epb::PBrakeType_MAX;
const int Epb::PBrakeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ems_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[11];
}
bool Ems_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ems_Type Ems::STOP;
const Ems_Type Ems::CRANK;
const Ems_Type Ems::RUNNING;
const Ems_Type Ems::INVALID;
const Ems_Type Ems::Type_MIN;
const Ems_Type Ems::Type_MAX;
const int Ems::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BasicInfo_Type_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[12];
}
bool BasicInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicInfo_Type BasicInfo::OFF;
const BasicInfo_Type BasicInfo::ACC;
const BasicInfo_Type BasicInfo::ON;
const BasicInfo_Type BasicInfo::START;
const BasicInfo_Type BasicInfo::INVALID;
const BasicInfo_Type BasicInfo::Type_MIN;
const BasicInfo_Type BasicInfo::Type_MAX;
const int BasicInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BasicInfo_GpsQuality_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[13];
}
bool BasicInfo_GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicInfo_GpsQuality BasicInfo::FIX_NO;
const BasicInfo_GpsQuality BasicInfo::FIX_2D;
const BasicInfo_GpsQuality BasicInfo::FIX_3D;
const BasicInfo_GpsQuality BasicInfo::FIX_INVALID;
const BasicInfo_GpsQuality BasicInfo::GpsQuality_MIN;
const BasicInfo_GpsQuality BasicInfo::GpsQuality_MAX;
const int BasicInfo::GpsQuality_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ChassisDetail::InitAsDefaultInstance() {
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->basic_ = const_cast< ::apollo::canbus::BasicInfo*>(
      ::apollo::canbus::BasicInfo::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->safety_ = const_cast< ::apollo::canbus::Safety*>(
      ::apollo::canbus::Safety::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gear_ = const_cast< ::apollo::canbus::Gear*>(
      ::apollo::canbus::Gear::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ems_ = const_cast< ::apollo::canbus::Ems*>(
      ::apollo::canbus::Ems::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->esp_ = const_cast< ::apollo::canbus::Esp*>(
      ::apollo::canbus::Esp::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gas_ = const_cast< ::apollo::canbus::Gas*>(
      ::apollo::canbus::Gas::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->epb_ = const_cast< ::apollo::canbus::Epb*>(
      ::apollo::canbus::Epb::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->brake_ = const_cast< ::apollo::canbus::Brake*>(
      ::apollo::canbus::Brake::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->deceleration_ = const_cast< ::apollo::canbus::Deceleration*>(
      ::apollo::canbus::Deceleration::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->vehicle_spd_ = const_cast< ::apollo::canbus::VehicleSpd*>(
      ::apollo::canbus::VehicleSpd::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->eps_ = const_cast< ::apollo::canbus::Eps*>(
      ::apollo::canbus::Eps::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->light_ = const_cast< ::apollo::canbus::Light*>(
      ::apollo::canbus::Light::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->battery_ = const_cast< ::apollo::canbus::Battery*>(
      ::apollo::canbus::Battery::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->check_response_ = const_cast< ::apollo::canbus::CheckResponseSignal*>(
      ::apollo::canbus::CheckResponseSignal::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisDetail::kCarTypeFieldNumber;
const int ChassisDetail::kBasicFieldNumber;
const int ChassisDetail::kSafetyFieldNumber;
const int ChassisDetail::kGearFieldNumber;
const int ChassisDetail::kEmsFieldNumber;
const int ChassisDetail::kEspFieldNumber;
const int ChassisDetail::kGasFieldNumber;
const int ChassisDetail::kEpbFieldNumber;
const int ChassisDetail::kBrakeFieldNumber;
const int ChassisDetail::kDecelerationFieldNumber;
const int ChassisDetail::kVehicleSpdFieldNumber;
const int ChassisDetail::kEpsFieldNumber;
const int ChassisDetail::kLightFieldNumber;
const int ChassisDetail::kBatteryFieldNumber;
const int ChassisDetail::kCheckResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisDetail::ChassisDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_ChassisDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisDetail)
}
ChassisDetail::ChassisDetail(const ChassisDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basic()) {
    basic_ = new ::apollo::canbus::BasicInfo(*from.basic_);
  } else {
    basic_ = NULL;
  }
  if (from.has_safety()) {
    safety_ = new ::apollo::canbus::Safety(*from.safety_);
  } else {
    safety_ = NULL;
  }
  if (from.has_gear()) {
    gear_ = new ::apollo::canbus::Gear(*from.gear_);
  } else {
    gear_ = NULL;
  }
  if (from.has_ems()) {
    ems_ = new ::apollo::canbus::Ems(*from.ems_);
  } else {
    ems_ = NULL;
  }
  if (from.has_esp()) {
    esp_ = new ::apollo::canbus::Esp(*from.esp_);
  } else {
    esp_ = NULL;
  }
  if (from.has_gas()) {
    gas_ = new ::apollo::canbus::Gas(*from.gas_);
  } else {
    gas_ = NULL;
  }
  if (from.has_epb()) {
    epb_ = new ::apollo::canbus::Epb(*from.epb_);
  } else {
    epb_ = NULL;
  }
  if (from.has_brake()) {
    brake_ = new ::apollo::canbus::Brake(*from.brake_);
  } else {
    brake_ = NULL;
  }
  if (from.has_deceleration()) {
    deceleration_ = new ::apollo::canbus::Deceleration(*from.deceleration_);
  } else {
    deceleration_ = NULL;
  }
  if (from.has_vehicle_spd()) {
    vehicle_spd_ = new ::apollo::canbus::VehicleSpd(*from.vehicle_spd_);
  } else {
    vehicle_spd_ = NULL;
  }
  if (from.has_eps()) {
    eps_ = new ::apollo::canbus::Eps(*from.eps_);
  } else {
    eps_ = NULL;
  }
  if (from.has_light()) {
    light_ = new ::apollo::canbus::Light(*from.light_);
  } else {
    light_ = NULL;
  }
  if (from.has_battery()) {
    battery_ = new ::apollo::canbus::Battery(*from.battery_);
  } else {
    battery_ = NULL;
  }
  if (from.has_check_response()) {
    check_response_ = new ::apollo::canbus::CheckResponseSignal(*from.check_response_);
  } else {
    check_response_ = NULL;
  }
  car_type_ = from.car_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisDetail)
}

void ChassisDetail::SharedCtor() {
  ::memset(&basic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_type_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(car_type_));
}

ChassisDetail::~ChassisDetail() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisDetail)
  SharedDtor();
}

void ChassisDetail::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete safety_;
  if (this != internal_default_instance()) delete gear_;
  if (this != internal_default_instance()) delete ems_;
  if (this != internal_default_instance()) delete esp_;
  if (this != internal_default_instance()) delete gas_;
  if (this != internal_default_instance()) delete epb_;
  if (this != internal_default_instance()) delete brake_;
  if (this != internal_default_instance()) delete deceleration_;
  if (this != internal_default_instance()) delete vehicle_spd_;
  if (this != internal_default_instance()) delete eps_;
  if (this != internal_default_instance()) delete light_;
  if (this != internal_default_instance()) delete battery_;
  if (this != internal_default_instance()) delete check_response_;
}

void ChassisDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChassisDetail::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisDetail& ChassisDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_ChassisDetail.base);
  return *internal_default_instance();
}


void ChassisDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && basic_ != NULL) {
    delete basic_;
  }
  basic_ = NULL;
  if (GetArenaNoVirtual() == NULL && safety_ != NULL) {
    delete safety_;
  }
  safety_ = NULL;
  if (GetArenaNoVirtual() == NULL && gear_ != NULL) {
    delete gear_;
  }
  gear_ = NULL;
  if (GetArenaNoVirtual() == NULL && ems_ != NULL) {
    delete ems_;
  }
  ems_ = NULL;
  if (GetArenaNoVirtual() == NULL && esp_ != NULL) {
    delete esp_;
  }
  esp_ = NULL;
  if (GetArenaNoVirtual() == NULL && gas_ != NULL) {
    delete gas_;
  }
  gas_ = NULL;
  if (GetArenaNoVirtual() == NULL && epb_ != NULL) {
    delete epb_;
  }
  epb_ = NULL;
  if (GetArenaNoVirtual() == NULL && brake_ != NULL) {
    delete brake_;
  }
  brake_ = NULL;
  if (GetArenaNoVirtual() == NULL && deceleration_ != NULL) {
    delete deceleration_;
  }
  deceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_spd_ != NULL) {
    delete vehicle_spd_;
  }
  vehicle_spd_ = NULL;
  if (GetArenaNoVirtual() == NULL && eps_ != NULL) {
    delete eps_;
  }
  eps_ = NULL;
  if (GetArenaNoVirtual() == NULL && light_ != NULL) {
    delete light_;
  }
  light_ = NULL;
  if (GetArenaNoVirtual() == NULL && battery_ != NULL) {
    delete battery_;
  }
  battery_ = NULL;
  if (GetArenaNoVirtual() == NULL && check_response_ != NULL) {
    delete check_response_;
  }
  check_response_ = NULL;
  car_type_ = 0;
  _internal_metadata_.Clear();
}

bool ChassisDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.canbus.ChassisDetail.Type car_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_car_type(static_cast< ::apollo::canbus::ChassisDetail_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.BasicInfo basic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Safety safety = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Gear gear = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Ems ems = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Esp esp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Gas gas = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Epb epb = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_epb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Brake brake = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Deceleration deceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.VehicleSpd vehicle_spd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_spd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Eps eps = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Light light = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Battery battery = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.CheckResponseSignal check_response = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisDetail)
  return false;
#undef DO_
}

void ChassisDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (this->car_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->car_type(), output);
  }

  // .apollo.canbus.BasicInfo basic = 2;
  if (this->has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_basic(), output);
  }

  // .apollo.canbus.Safety safety = 3;
  if (this->has_safety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_safety(), output);
  }

  // .apollo.canbus.Gear gear = 4;
  if (this->has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_gear(), output);
  }

  // .apollo.canbus.Ems ems = 5;
  if (this->has_ems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ems(), output);
  }

  // .apollo.canbus.Esp esp = 6;
  if (this->has_esp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_esp(), output);
  }

  // .apollo.canbus.Gas gas = 7;
  if (this->has_gas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_gas(), output);
  }

  // .apollo.canbus.Epb epb = 8;
  if (this->has_epb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_epb(), output);
  }

  // .apollo.canbus.Brake brake = 9;
  if (this->has_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_brake(), output);
  }

  // .apollo.canbus.Deceleration deceleration = 10;
  if (this->has_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_deceleration(), output);
  }

  // .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (this->has_vehicle_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_vehicle_spd(), output);
  }

  // .apollo.canbus.Eps eps = 12;
  if (this->has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_eps(), output);
  }

  // .apollo.canbus.Light light = 13;
  if (this->has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_light(), output);
  }

  // .apollo.canbus.Battery battery = 14;
  if (this->has_battery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_battery(), output);
  }

  // .apollo.canbus.CheckResponseSignal check_response = 15;
  if (this->has_check_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_check_response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisDetail)
}

::google::protobuf::uint8* ChassisDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (this->car_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->car_type(), target);
  }

  // .apollo.canbus.BasicInfo basic = 2;
  if (this->has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_basic(), deterministic, target);
  }

  // .apollo.canbus.Safety safety = 3;
  if (this->has_safety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_safety(), deterministic, target);
  }

  // .apollo.canbus.Gear gear = 4;
  if (this->has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_gear(), deterministic, target);
  }

  // .apollo.canbus.Ems ems = 5;
  if (this->has_ems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ems(), deterministic, target);
  }

  // .apollo.canbus.Esp esp = 6;
  if (this->has_esp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_esp(), deterministic, target);
  }

  // .apollo.canbus.Gas gas = 7;
  if (this->has_gas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_gas(), deterministic, target);
  }

  // .apollo.canbus.Epb epb = 8;
  if (this->has_epb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_epb(), deterministic, target);
  }

  // .apollo.canbus.Brake brake = 9;
  if (this->has_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_brake(), deterministic, target);
  }

  // .apollo.canbus.Deceleration deceleration = 10;
  if (this->has_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_deceleration(), deterministic, target);
  }

  // .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (this->has_vehicle_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_vehicle_spd(), deterministic, target);
  }

  // .apollo.canbus.Eps eps = 12;
  if (this->has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_eps(), deterministic, target);
  }

  // .apollo.canbus.Light light = 13;
  if (this->has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_light(), deterministic, target);
  }

  // .apollo.canbus.Battery battery = 14;
  if (this->has_battery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_battery(), deterministic, target);
  }

  // .apollo.canbus.CheckResponseSignal check_response = 15;
  if (this->has_check_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_check_response(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisDetail)
  return target;
}

size_t ChassisDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisDetail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.canbus.BasicInfo basic = 2;
  if (this->has_basic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  // .apollo.canbus.Safety safety = 3;
  if (this->has_safety()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *safety_);
  }

  // .apollo.canbus.Gear gear = 4;
  if (this->has_gear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gear_);
  }

  // .apollo.canbus.Ems ems = 5;
  if (this->has_ems()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ems_);
  }

  // .apollo.canbus.Esp esp = 6;
  if (this->has_esp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esp_);
  }

  // .apollo.canbus.Gas gas = 7;
  if (this->has_gas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gas_);
  }

  // .apollo.canbus.Epb epb = 8;
  if (this->has_epb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *epb_);
  }

  // .apollo.canbus.Brake brake = 9;
  if (this->has_brake()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brake_);
  }

  // .apollo.canbus.Deceleration deceleration = 10;
  if (this->has_deceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deceleration_);
  }

  // .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (this->has_vehicle_spd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_spd_);
  }

  // .apollo.canbus.Eps eps = 12;
  if (this->has_eps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *eps_);
  }

  // .apollo.canbus.Light light = 13;
  if (this->has_light()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *light_);
  }

  // .apollo.canbus.Battery battery = 14;
  if (this->has_battery()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *battery_);
  }

  // .apollo.canbus.CheckResponseSignal check_response = 15;
  if (this->has_check_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *check_response_);
  }

  // .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (this->car_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisDetail)
    MergeFrom(*source);
  }
}

void ChassisDetail::MergeFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    mutable_basic()->::apollo::canbus::BasicInfo::MergeFrom(from.basic());
  }
  if (from.has_safety()) {
    mutable_safety()->::apollo::canbus::Safety::MergeFrom(from.safety());
  }
  if (from.has_gear()) {
    mutable_gear()->::apollo::canbus::Gear::MergeFrom(from.gear());
  }
  if (from.has_ems()) {
    mutable_ems()->::apollo::canbus::Ems::MergeFrom(from.ems());
  }
  if (from.has_esp()) {
    mutable_esp()->::apollo::canbus::Esp::MergeFrom(from.esp());
  }
  if (from.has_gas()) {
    mutable_gas()->::apollo::canbus::Gas::MergeFrom(from.gas());
  }
  if (from.has_epb()) {
    mutable_epb()->::apollo::canbus::Epb::MergeFrom(from.epb());
  }
  if (from.has_brake()) {
    mutable_brake()->::apollo::canbus::Brake::MergeFrom(from.brake());
  }
  if (from.has_deceleration()) {
    mutable_deceleration()->::apollo::canbus::Deceleration::MergeFrom(from.deceleration());
  }
  if (from.has_vehicle_spd()) {
    mutable_vehicle_spd()->::apollo::canbus::VehicleSpd::MergeFrom(from.vehicle_spd());
  }
  if (from.has_eps()) {
    mutable_eps()->::apollo::canbus::Eps::MergeFrom(from.eps());
  }
  if (from.has_light()) {
    mutable_light()->::apollo::canbus::Light::MergeFrom(from.light());
  }
  if (from.has_battery()) {
    mutable_battery()->::apollo::canbus::Battery::MergeFrom(from.battery());
  }
  if (from.has_check_response()) {
    mutable_check_response()->::apollo::canbus::CheckResponseSignal::MergeFrom(from.check_response());
  }
  if (from.car_type() != 0) {
    set_car_type(from.car_type());
  }
}

void ChassisDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisDetail::CopyFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDetail::IsInitialized() const {
  return true;
}

void ChassisDetail::Swap(ChassisDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisDetail::InternalSwap(ChassisDetail* other) {
  using std::swap;
  swap(basic_, other->basic_);
  swap(safety_, other->safety_);
  swap(gear_, other->gear_);
  swap(ems_, other->ems_);
  swap(esp_, other->esp_);
  swap(gas_, other->gas_);
  swap(epb_, other->epb_);
  swap(brake_, other->brake_);
  swap(deceleration_, other->deceleration_);
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(eps_, other->eps_);
  swap(light_, other->light_);
  swap(battery_, other->battery_);
  swap(check_response_, other->check_response_);
  swap(car_type_, other->car_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChassisDetail::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckResponseSignal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckResponseSignal::kIsEpsOnlineFieldNumber;
const int CheckResponseSignal::kIsEpbOnlineFieldNumber;
const int CheckResponseSignal::kIsEspOnlineFieldNumber;
const int CheckResponseSignal::kIsVtogOnlineFieldNumber;
const int CheckResponseSignal::kIsScuOnlineFieldNumber;
const int CheckResponseSignal::kIsSwitchOnlineFieldNumber;
const int CheckResponseSignal::kIsVcuOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckResponseSignal::CheckResponseSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_CheckResponseSignal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.CheckResponseSignal)
}
CheckResponseSignal::CheckResponseSignal(const CheckResponseSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_eps_online_, &from.is_eps_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CheckResponseSignal)
}

void CheckResponseSignal::SharedCtor() {
  ::memset(&is_eps_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
}

CheckResponseSignal::~CheckResponseSignal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CheckResponseSignal)
  SharedDtor();
}

void CheckResponseSignal::SharedDtor() {
}

void CheckResponseSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CheckResponseSignal::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckResponseSignal& CheckResponseSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_CheckResponseSignal.base);
  return *internal_default_instance();
}


void CheckResponseSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_eps_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  _internal_metadata_.Clear();
}

bool CheckResponseSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.CheckResponseSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_eps_online = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_epb_online = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_esp_online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_vtog_online = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vtog_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_scu_online = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_scu_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_switch_online = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_vcu_online = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vcu_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.CheckResponseSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.CheckResponseSignal)
  return false;
#undef DO_
}

void CheckResponseSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_online(), output);
  }

  // bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_online(), output);
  }

  // bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_online(), output);
  }

  // bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_vtog_online(), output);
  }

  // bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_scu_online(), output);
  }

  // bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_switch_online(), output);
  }

  // bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vcu_online(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.CheckResponseSignal)
}

::google::protobuf::uint8* CheckResponseSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_online(), target);
  }

  // bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_online(), target);
  }

  // bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_online(), target);
  }

  // bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_vtog_online(), target);
  }

  // bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_scu_online(), target);
  }

  // bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_switch_online(), target);
  }

  // bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vcu_online(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CheckResponseSignal)
  return target;
}

size_t CheckResponseSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CheckResponseSignal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponseSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponseSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckResponseSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.CheckResponseSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.CheckResponseSignal)
    MergeFrom(*source);
  }
}

void CheckResponseSignal::MergeFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_eps_online() != 0) {
    set_is_eps_online(from.is_eps_online());
  }
  if (from.is_epb_online() != 0) {
    set_is_epb_online(from.is_epb_online());
  }
  if (from.is_esp_online() != 0) {
    set_is_esp_online(from.is_esp_online());
  }
  if (from.is_vtog_online() != 0) {
    set_is_vtog_online(from.is_vtog_online());
  }
  if (from.is_scu_online() != 0) {
    set_is_scu_online(from.is_scu_online());
  }
  if (from.is_switch_online() != 0) {
    set_is_switch_online(from.is_switch_online());
  }
  if (from.is_vcu_online() != 0) {
    set_is_vcu_online(from.is_vcu_online());
  }
}

void CheckResponseSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponseSignal::CopyFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponseSignal::IsInitialized() const {
  return true;
}

void CheckResponseSignal::Swap(CheckResponseSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckResponseSignal::InternalSwap(CheckResponseSignal* other) {
  using std::swap;
  swap(is_eps_online_, other->is_eps_online_);
  swap(is_epb_online_, other->is_epb_online_);
  swap(is_esp_online_, other->is_esp_online_);
  swap(is_vtog_online_, other->is_vtog_online_);
  swap(is_scu_online_, other->is_scu_online_);
  swap(is_switch_online_, other->is_switch_online_);
  swap(is_vcu_online_, other->is_vcu_online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckResponseSignal::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Battery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Battery::kBatteryPercentFieldNumber;
const int Battery::kFuelLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Battery::Battery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Battery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Battery)
}
Battery::Battery(const Battery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_percent_, &from.battery_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_level_) -
    reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Battery)
}

void Battery::SharedCtor() {
  ::memset(&battery_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_level_) -
      reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Battery::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Battery& Battery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Battery.base);
  return *internal_default_instance();
}


void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&battery_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_level_) -
      reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
  _internal_metadata_.Clear();
}

bool Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Battery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double battery_percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fuel_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuel_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Battery)
  return false;
#undef DO_
}

void Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double battery_percent = 1;
  if (this->battery_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->battery_percent(), output);
  }

  // double fuel_level = 2;
  if (this->fuel_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fuel_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Battery)
}

::google::protobuf::uint8* Battery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double battery_percent = 1;
  if (this->battery_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->battery_percent(), target);
  }

  // double fuel_level = 2;
  if (this->fuel_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fuel_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Battery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double battery_percent = 1;
  if (this->battery_percent() != 0) {
    total_size += 1 + 8;
  }

  // double fuel_level = 2;
  if (this->fuel_level() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Battery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Battery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.battery_percent() != 0) {
    set_battery_percent(from.battery_percent());
  }
  if (from.fuel_level() != 0) {
    set_fuel_level(from.fuel_level());
  }
}

void Battery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::Swap(Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Battery::InternalSwap(Battery* other) {
  using std::swap;
  swap(battery_percent_, other->battery_percent_);
  swap(fuel_level_, other->fuel_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Light::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kTurnLightTypeFieldNumber;
const int Light::kLampTypeFieldNumber;
const int Light::kIsBrakeLampOnFieldNumber;
const int Light::kIsAutoLightFieldNumber;
const int Light::kWiperGearFieldNumber;
const int Light::kLotionGearFieldNumber;
const int Light::kIsHornOnFieldNumber;
const int Light::kLincolnLampTypeFieldNumber;
const int Light::kLincolnWiperFieldNumber;
const int Light::kLincolnAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Light.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Light)
}
Light::Light(const Light& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_light_type_, &from.turn_light_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&lincoln_ambient_) -
    reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Light)
}

void Light::SharedCtor() {
  ::memset(&turn_light_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lincoln_ambient_) -
      reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Light)
  SharedDtor();
}

void Light::SharedDtor() {
}

void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Light& Light::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Light.base);
  return *internal_default_instance();
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turn_light_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lincoln_ambient_) -
      reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
  _internal_metadata_.Clear();
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Light)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.canbus.Light.TurnLightType turn_light_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_light_type(static_cast< ::apollo::canbus::Light_TurnLightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Light.LampType lamp_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lamp_type(static_cast< ::apollo::canbus::Light_LampType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_brake_lamp_on = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_lamp_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_auto_light = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wiper_gear = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiper_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lotion_gear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotion_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_horn_on = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_horn_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lincoln_lamp_type(static_cast< ::apollo::canbus::Light_LincolnLampType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lincoln_wiper(static_cast< ::apollo::canbus::Light_LincolnWiperType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lincoln_ambient(static_cast< ::apollo::canbus::Light_LincolnAmbientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (this->turn_light_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_light_type(), output);
  }

  // .apollo.canbus.Light.LampType lamp_type = 2;
  if (this->lamp_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lamp_type(), output);
  }

  // bool is_brake_lamp_on = 3;
  if (this->is_brake_lamp_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_lamp_on(), output);
  }

  // bool is_auto_light = 4;
  if (this->is_auto_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_auto_light(), output);
  }

  // int32 wiper_gear = 5;
  if (this->wiper_gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wiper_gear(), output);
  }

  // int32 lotion_gear = 6;
  if (this->lotion_gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lotion_gear(), output);
  }

  // bool is_horn_on = 7;
  if (this->is_horn_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_horn_on(), output);
  }

  // .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (this->lincoln_lamp_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lincoln_lamp_type(), output);
  }

  // .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (this->lincoln_wiper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lincoln_wiper(), output);
  }

  // .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (this->lincoln_ambient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lincoln_ambient(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Light)
}

::google::protobuf::uint8* Light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (this->turn_light_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_light_type(), target);
  }

  // .apollo.canbus.Light.LampType lamp_type = 2;
  if (this->lamp_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lamp_type(), target);
  }

  // bool is_brake_lamp_on = 3;
  if (this->is_brake_lamp_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_lamp_on(), target);
  }

  // bool is_auto_light = 4;
  if (this->is_auto_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_auto_light(), target);
  }

  // int32 wiper_gear = 5;
  if (this->wiper_gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wiper_gear(), target);
  }

  // int32 lotion_gear = 6;
  if (this->lotion_gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lotion_gear(), target);
  }

  // bool is_horn_on = 7;
  if (this->is_horn_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_horn_on(), target);
  }

  // .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (this->lincoln_lamp_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lincoln_lamp_type(), target);
  }

  // .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (this->lincoln_wiper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lincoln_wiper(), target);
  }

  // .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (this->lincoln_ambient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lincoln_ambient(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Light)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (this->turn_light_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_light_type());
  }

  // .apollo.canbus.Light.LampType lamp_type = 2;
  if (this->lamp_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lamp_type());
  }

  // bool is_brake_lamp_on = 3;
  if (this->is_brake_lamp_on() != 0) {
    total_size += 1 + 1;
  }

  // bool is_auto_light = 4;
  if (this->is_auto_light() != 0) {
    total_size += 1 + 1;
  }

  // bool is_horn_on = 7;
  if (this->is_horn_on() != 0) {
    total_size += 1 + 1;
  }

  // int32 wiper_gear = 5;
  if (this->wiper_gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wiper_gear());
  }

  // int32 lotion_gear = 6;
  if (this->lotion_gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lotion_gear());
  }

  // .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (this->lincoln_lamp_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_lamp_type());
  }

  // .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (this->lincoln_wiper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_wiper());
  }

  // .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (this->lincoln_ambient() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_ambient());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turn_light_type() != 0) {
    set_turn_light_type(from.turn_light_type());
  }
  if (from.lamp_type() != 0) {
    set_lamp_type(from.lamp_type());
  }
  if (from.is_brake_lamp_on() != 0) {
    set_is_brake_lamp_on(from.is_brake_lamp_on());
  }
  if (from.is_auto_light() != 0) {
    set_is_auto_light(from.is_auto_light());
  }
  if (from.is_horn_on() != 0) {
    set_is_horn_on(from.is_horn_on());
  }
  if (from.wiper_gear() != 0) {
    set_wiper_gear(from.wiper_gear());
  }
  if (from.lotion_gear() != 0) {
    set_lotion_gear(from.lotion_gear());
  }
  if (from.lincoln_lamp_type() != 0) {
    set_lincoln_lamp_type(from.lincoln_lamp_type());
  }
  if (from.lincoln_wiper() != 0) {
    set_lincoln_wiper(from.lincoln_wiper());
  }
  if (from.lincoln_ambient() != 0) {
    set_lincoln_ambient(from.lincoln_ambient());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  using std::swap;
  swap(turn_light_type_, other->turn_light_type_);
  swap(lamp_type_, other->lamp_type_);
  swap(is_brake_lamp_on_, other->is_brake_lamp_on_);
  swap(is_auto_light_, other->is_auto_light_);
  swap(is_horn_on_, other->is_horn_on_);
  swap(wiper_gear_, other->wiper_gear_);
  swap(lotion_gear_, other->lotion_gear_);
  swap(lincoln_lamp_type_, other->lincoln_lamp_type_);
  swap(lincoln_wiper_, other->lincoln_wiper_);
  swap(lincoln_ambient_, other->lincoln_ambient_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Eps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eps::kIsEpsFailFieldNumber;
const int Eps::kEpsControlStateFieldNumber;
const int Eps::kEpsDriverHandTorqFieldNumber;
const int Eps::kIsSteeringAngleValidFieldNumber;
const int Eps::kSteeringAngleFieldNumber;
const int Eps::kSteeringAngleSpdFieldNumber;
const int Eps::kIsTrimmingStatusFieldNumber;
const int Eps::kIsCalibrationStatusFieldNumber;
const int Eps::kIsFailureStatusFieldNumber;
const int Eps::kAllowEnterAutonomousModeFieldNumber;
const int Eps::kCurrentDrivingModeFieldNumber;
const int Eps::kSteeringAngleCmdFieldNumber;
const int Eps::kVehicleSpeedFieldNumber;
const int Eps::kEpasTorqueFieldNumber;
const int Eps::kSteeringEnabledFieldNumber;
const int Eps::kDriverOverrideFieldNumber;
const int Eps::kDriverActivityFieldNumber;
const int Eps::kWatchdogFaultFieldNumber;
const int Eps::kChannel1FaultFieldNumber;
const int Eps::kChannel2FaultFieldNumber;
const int Eps::kCalibrationFaultFieldNumber;
const int Eps::kConnectorFaultFieldNumber;
const int Eps::kTimestamp65FieldNumber;
const int Eps::kMajorVersionFieldNumber;
const int Eps::kMinorVersionFieldNumber;
const int Eps::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eps::Eps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Eps.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Eps)
}
Eps::Eps(const Eps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_driver_hand_torq_, &from.eps_driver_hand_torq_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Eps)
}

void Eps::SharedCtor() {
  ::memset(&eps_driver_hand_torq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
}

Eps::~Eps() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Eps)
  SharedDtor();
}

void Eps::SharedDtor() {
}

void Eps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Eps::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Eps& Eps::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Eps.base);
  return *internal_default_instance();
}


void Eps::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&eps_driver_hand_torq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
  _internal_metadata_.Clear();
}

bool Eps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Eps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_eps_fail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Eps.Type eps_control_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eps_control_state(static_cast< ::apollo::canbus::Eps_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double eps_driver_hand_torq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_driver_hand_torq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_steering_angle_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steering_angle_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_angle_spd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trimming_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trimming_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_calibration_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_calibration_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_failure_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_failure_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 allow_enter_autonomous_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_enter_autonomous_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_driving_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_angle_cmd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double epas_torque = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epas_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool steering_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_override = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_activity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool watchdog_fault = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool channel_1_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool channel_2_fault = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool calibration_fault = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibration_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connector_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp_65 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_65_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 major_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minor_version = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 build_number = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Eps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Eps)
  return false;
#undef DO_
}

void Eps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_eps_fail = 1;
  if (this->is_eps_fail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_fail(), output);
  }

  // .apollo.canbus.Eps.Type eps_control_state = 2;
  if (this->eps_control_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eps_control_state(), output);
  }

  // double eps_driver_hand_torq = 3;
  if (this->eps_driver_hand_torq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->eps_driver_hand_torq(), output);
  }

  // bool is_steering_angle_valid = 4;
  if (this->is_steering_angle_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_steering_angle_valid(), output);
  }

  // double steering_angle = 5;
  if (this->steering_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->steering_angle(), output);
  }

  // double steering_angle_spd = 6;
  if (this->steering_angle_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_angle_spd(), output);
  }

  // bool is_trimming_status = 7;
  if (this->is_trimming_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_trimming_status(), output);
  }

  // bool is_calibration_status = 8;
  if (this->is_calibration_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_calibration_status(), output);
  }

  // bool is_failure_status = 9;
  if (this->is_failure_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_failure_status(), output);
  }

  // int32 allow_enter_autonomous_mode = 10;
  if (this->allow_enter_autonomous_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->allow_enter_autonomous_mode(), output);
  }

  // int32 current_driving_mode = 11;
  if (this->current_driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->current_driving_mode(), output);
  }

  // double steering_angle_cmd = 12;
  if (this->steering_angle_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steering_angle_cmd(), output);
  }

  // double vehicle_speed = 13;
  if (this->vehicle_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vehicle_speed(), output);
  }

  // double epas_torque = 14;
  if (this->epas_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->epas_torque(), output);
  }

  // bool steering_enabled = 15;
  if (this->steering_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->steering_enabled(), output);
  }

  // bool driver_override = 16;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // bool calibration_fault = 21;
  if (this->calibration_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->calibration_fault(), output);
  }

  // bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // double timestamp_65 = 23;
  if (this->timestamp_65() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->timestamp_65(), output);
  }

  // int32 major_version = 24;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->major_version(), output);
  }

  // int32 minor_version = 25;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->minor_version(), output);
  }

  // int32 build_number = 26;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->build_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Eps)
}

::google::protobuf::uint8* Eps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_eps_fail = 1;
  if (this->is_eps_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_fail(), target);
  }

  // .apollo.canbus.Eps.Type eps_control_state = 2;
  if (this->eps_control_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eps_control_state(), target);
  }

  // double eps_driver_hand_torq = 3;
  if (this->eps_driver_hand_torq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->eps_driver_hand_torq(), target);
  }

  // bool is_steering_angle_valid = 4;
  if (this->is_steering_angle_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_steering_angle_valid(), target);
  }

  // double steering_angle = 5;
  if (this->steering_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->steering_angle(), target);
  }

  // double steering_angle_spd = 6;
  if (this->steering_angle_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_angle_spd(), target);
  }

  // bool is_trimming_status = 7;
  if (this->is_trimming_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_trimming_status(), target);
  }

  // bool is_calibration_status = 8;
  if (this->is_calibration_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_calibration_status(), target);
  }

  // bool is_failure_status = 9;
  if (this->is_failure_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_failure_status(), target);
  }

  // int32 allow_enter_autonomous_mode = 10;
  if (this->allow_enter_autonomous_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->allow_enter_autonomous_mode(), target);
  }

  // int32 current_driving_mode = 11;
  if (this->current_driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->current_driving_mode(), target);
  }

  // double steering_angle_cmd = 12;
  if (this->steering_angle_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steering_angle_cmd(), target);
  }

  // double vehicle_speed = 13;
  if (this->vehicle_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vehicle_speed(), target);
  }

  // double epas_torque = 14;
  if (this->epas_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->epas_torque(), target);
  }

  // bool steering_enabled = 15;
  if (this->steering_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->steering_enabled(), target);
  }

  // bool driver_override = 16;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // bool calibration_fault = 21;
  if (this->calibration_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->calibration_fault(), target);
  }

  // bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // double timestamp_65 = 23;
  if (this->timestamp_65() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->timestamp_65(), target);
  }

  // int32 major_version = 24;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->major_version(), target);
  }

  // int32 minor_version = 25;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->minor_version(), target);
  }

  // int32 build_number = 26;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->build_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Eps)
  return target;
}

size_t Eps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Eps)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double eps_driver_hand_torq = 3;
  if (this->eps_driver_hand_torq() != 0) {
    total_size += 1 + 8;
  }

  // .apollo.canbus.Eps.Type eps_control_state = 2;
  if (this->eps_control_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_control_state());
  }

  // bool is_eps_fail = 1;
  if (this->is_eps_fail() != 0) {
    total_size += 1 + 1;
  }

  // bool is_steering_angle_valid = 4;
  if (this->is_steering_angle_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_trimming_status = 7;
  if (this->is_trimming_status() != 0) {
    total_size += 1 + 1;
  }

  // bool is_calibration_status = 8;
  if (this->is_calibration_status() != 0) {
    total_size += 1 + 1;
  }

  // double steering_angle = 5;
  if (this->steering_angle() != 0) {
    total_size += 1 + 8;
  }

  // double steering_angle_spd = 6;
  if (this->steering_angle_spd() != 0) {
    total_size += 1 + 8;
  }

  // int32 allow_enter_autonomous_mode = 10;
  if (this->allow_enter_autonomous_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->allow_enter_autonomous_mode());
  }

  // int32 current_driving_mode = 11;
  if (this->current_driving_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_driving_mode());
  }

  // double steering_angle_cmd = 12;
  if (this->steering_angle_cmd() != 0) {
    total_size += 1 + 8;
  }

  // double vehicle_speed = 13;
  if (this->vehicle_speed() != 0) {
    total_size += 1 + 8;
  }

  // double epas_torque = 14;
  if (this->epas_torque() != 0) {
    total_size += 1 + 8;
  }

  // bool is_failure_status = 9;
  if (this->is_failure_status() != 0) {
    total_size += 1 + 1;
  }

  // bool steering_enabled = 15;
  if (this->steering_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool driver_override = 16;
  if (this->driver_override() != 0) {
    total_size += 2 + 1;
  }

  // bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    total_size += 2 + 1;
  }

  // bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool calibration_fault = 21;
  if (this->calibration_fault() != 0) {
    total_size += 2 + 1;
  }

  // double timestamp_65 = 23;
  if (this->timestamp_65() != 0) {
    total_size += 2 + 8;
  }

  // bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    total_size += 2 + 1;
  }

  // int32 major_version = 24;
  if (this->major_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // int32 minor_version = 25;
  if (this->minor_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // int32 build_number = 26;
  if (this->build_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  const Eps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Eps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Eps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Eps)
    MergeFrom(*source);
  }
}

void Eps::MergeFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eps_driver_hand_torq() != 0) {
    set_eps_driver_hand_torq(from.eps_driver_hand_torq());
  }
  if (from.eps_control_state() != 0) {
    set_eps_control_state(from.eps_control_state());
  }
  if (from.is_eps_fail() != 0) {
    set_is_eps_fail(from.is_eps_fail());
  }
  if (from.is_steering_angle_valid() != 0) {
    set_is_steering_angle_valid(from.is_steering_angle_valid());
  }
  if (from.is_trimming_status() != 0) {
    set_is_trimming_status(from.is_trimming_status());
  }
  if (from.is_calibration_status() != 0) {
    set_is_calibration_status(from.is_calibration_status());
  }
  if (from.steering_angle() != 0) {
    set_steering_angle(from.steering_angle());
  }
  if (from.steering_angle_spd() != 0) {
    set_steering_angle_spd(from.steering_angle_spd());
  }
  if (from.allow_enter_autonomous_mode() != 0) {
    set_allow_enter_autonomous_mode(from.allow_enter_autonomous_mode());
  }
  if (from.current_driving_mode() != 0) {
    set_current_driving_mode(from.current_driving_mode());
  }
  if (from.steering_angle_cmd() != 0) {
    set_steering_angle_cmd(from.steering_angle_cmd());
  }
  if (from.vehicle_speed() != 0) {
    set_vehicle_speed(from.vehicle_speed());
  }
  if (from.epas_torque() != 0) {
    set_epas_torque(from.epas_torque());
  }
  if (from.is_failure_status() != 0) {
    set_is_failure_status(from.is_failure_status());
  }
  if (from.steering_enabled() != 0) {
    set_steering_enabled(from.steering_enabled());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.driver_activity() != 0) {
    set_driver_activity(from.driver_activity());
  }
  if (from.watchdog_fault() != 0) {
    set_watchdog_fault(from.watchdog_fault());
  }
  if (from.channel_1_fault() != 0) {
    set_channel_1_fault(from.channel_1_fault());
  }
  if (from.channel_2_fault() != 0) {
    set_channel_2_fault(from.channel_2_fault());
  }
  if (from.calibration_fault() != 0) {
    set_calibration_fault(from.calibration_fault());
  }
  if (from.timestamp_65() != 0) {
    set_timestamp_65(from.timestamp_65());
  }
  if (from.connector_fault() != 0) {
    set_connector_fault(from.connector_fault());
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Eps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps::CopyFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps::IsInitialized() const {
  return true;
}

void Eps::Swap(Eps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eps::InternalSwap(Eps* other) {
  using std::swap;
  swap(eps_driver_hand_torq_, other->eps_driver_hand_torq_);
  swap(eps_control_state_, other->eps_control_state_);
  swap(is_eps_fail_, other->is_eps_fail_);
  swap(is_steering_angle_valid_, other->is_steering_angle_valid_);
  swap(is_trimming_status_, other->is_trimming_status_);
  swap(is_calibration_status_, other->is_calibration_status_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_angle_spd_, other->steering_angle_spd_);
  swap(allow_enter_autonomous_mode_, other->allow_enter_autonomous_mode_);
  swap(current_driving_mode_, other->current_driving_mode_);
  swap(steering_angle_cmd_, other->steering_angle_cmd_);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(epas_torque_, other->epas_torque_);
  swap(is_failure_status_, other->is_failure_status_);
  swap(steering_enabled_, other->steering_enabled_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(calibration_fault_, other->calibration_fault_);
  swap(timestamp_65_, other->timestamp_65_);
  swap(connector_fault_, other->connector_fault_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Eps::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleSpd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSpd::kIsVehicleStandstillFieldNumber;
const int VehicleSpd::kIsVehicleSpdValidFieldNumber;
const int VehicleSpd::kVehicleSpdFieldNumber;
const int VehicleSpd::kIsWheelSpdRrValidFieldNumber;
const int VehicleSpd::kWheelDirectionRrFieldNumber;
const int VehicleSpd::kWheelSpdRrFieldNumber;
const int VehicleSpd::kIsWheelSpdRlValidFieldNumber;
const int VehicleSpd::kWheelDirectionRlFieldNumber;
const int VehicleSpd::kWheelSpdRlFieldNumber;
const int VehicleSpd::kIsWheelSpdFrValidFieldNumber;
const int VehicleSpd::kWheelDirectionFrFieldNumber;
const int VehicleSpd::kWheelSpdFrFieldNumber;
const int VehicleSpd::kIsWheelSpdFlValidFieldNumber;
const int VehicleSpd::kWheelDirectionFlFieldNumber;
const int VehicleSpd::kWheelSpdFlFieldNumber;
const int VehicleSpd::kIsYawRateValidFieldNumber;
const int VehicleSpd::kYawRateFieldNumber;
const int VehicleSpd::kYawRateOffsetFieldNumber;
const int VehicleSpd::kIsAxValidFieldNumber;
const int VehicleSpd::kAxFieldNumber;
const int VehicleSpd::kAxOffsetFieldNumber;
const int VehicleSpd::kIsAyValidFieldNumber;
const int VehicleSpd::kAyFieldNumber;
const int VehicleSpd::kAyOffsetFieldNumber;
const int VehicleSpd::kLatAccFieldNumber;
const int VehicleSpd::kLongAccFieldNumber;
const int VehicleSpd::kVertAccFieldNumber;
const int VehicleSpd::kRollRateFieldNumber;
const int VehicleSpd::kAccEstFieldNumber;
const int VehicleSpd::kTimestampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSpd::VehicleSpd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_VehicleSpd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleSpd)
}
VehicleSpd::VehicleSpd(const VehicleSpd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_spd_, &from.vehicle_spd_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ay_valid_) -
    reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleSpd)
}

void VehicleSpd::SharedCtor() {
  ::memset(&vehicle_spd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ay_valid_) -
      reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
}

VehicleSpd::~VehicleSpd() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleSpd)
  SharedDtor();
}

void VehicleSpd::SharedDtor() {
}

void VehicleSpd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleSpd::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleSpd& VehicleSpd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_VehicleSpd.base);
  return *internal_default_instance();
}


void VehicleSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_spd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ay_valid_) -
      reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
  _internal_metadata_.Clear();
}

bool VehicleSpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.VehicleSpd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_vehicle_standstill = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_standstill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_vehicle_spd_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_spd_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_spd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wheel_spd_rr_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_rr(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_spd_rr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wheel_spd_rl_valid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_rl(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_spd_rl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wheel_spd_fr_valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_fr(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_spd_fr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wheel_spd_fl_valid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_fl(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_spd_fl = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_yaw_rate_valid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yaw_rate_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_rate_offset = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ax_valid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ax_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ax = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ax_offset = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ay_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ay = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ay_offset = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat_acc = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_acc = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vert_acc = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vert_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll_rate = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc_est = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_est_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp_sec = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.VehicleSpd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.VehicleSpd)
  return false;
#undef DO_
}

void VehicleSpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_vehicle_standstill = 1;
  if (this->is_vehicle_standstill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_vehicle_standstill(), output);
  }

  // bool is_vehicle_spd_valid = 2;
  if (this->is_vehicle_spd_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_vehicle_spd_valid(), output);
  }

  // double vehicle_spd = 3;
  if (this->vehicle_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vehicle_spd(), output);
  }

  // bool is_wheel_spd_rr_valid = 4;
  if (this->is_wheel_spd_rr_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rr_valid(), output);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (this->wheel_direction_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rr(), output);
  }

  // double wheel_spd_rr = 6;
  if (this->wheel_spd_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rr(), output);
  }

  // bool is_wheel_spd_rl_valid = 7;
  if (this->is_wheel_spd_rl_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_rl_valid(), output);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (this->wheel_direction_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_rl(), output);
  }

  // double wheel_spd_rl = 9;
  if (this->wheel_spd_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_rl(), output);
  }

  // bool is_wheel_spd_fr_valid = 10;
  if (this->is_wheel_spd_fr_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fr_valid(), output);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (this->wheel_direction_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fr(), output);
  }

  // double wheel_spd_fr = 12;
  if (this->wheel_spd_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fr(), output);
  }

  // bool is_wheel_spd_fl_valid = 13;
  if (this->is_wheel_spd_fl_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_wheel_spd_fl_valid(), output);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (this->wheel_direction_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->wheel_direction_fl(), output);
  }

  // double wheel_spd_fl = 15;
  if (this->wheel_spd_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wheel_spd_fl(), output);
  }

  // bool is_yaw_rate_valid = 16;
  if (this->is_yaw_rate_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_yaw_rate_valid(), output);
  }

  // double yaw_rate = 17;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yaw_rate(), output);
  }

  // double yaw_rate_offset = 18;
  if (this->yaw_rate_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->yaw_rate_offset(), output);
  }

  // bool is_ax_valid = 19;
  if (this->is_ax_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ax_valid(), output);
  }

  // double ax = 20;
  if (this->ax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ax(), output);
  }

  // double ax_offset = 21;
  if (this->ax_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ax_offset(), output);
  }

  // bool is_ay_valid = 22;
  if (this->is_ay_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_ay_valid(), output);
  }

  // double ay = 23;
  if (this->ay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->ay(), output);
  }

  // double ay_offset = 24;
  if (this->ay_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->ay_offset(), output);
  }

  // double lat_acc = 25;
  if (this->lat_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lat_acc(), output);
  }

  // double long_acc = 26;
  if (this->long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->long_acc(), output);
  }

  // double vert_acc = 27;
  if (this->vert_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->vert_acc(), output);
  }

  // double roll_rate = 28;
  if (this->roll_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->roll_rate(), output);
  }

  // double acc_est = 29;
  if (this->acc_est() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->acc_est(), output);
  }

  // double timestamp_sec = 30;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->timestamp_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.VehicleSpd)
}

::google::protobuf::uint8* VehicleSpd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_vehicle_standstill = 1;
  if (this->is_vehicle_standstill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_vehicle_standstill(), target);
  }

  // bool is_vehicle_spd_valid = 2;
  if (this->is_vehicle_spd_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_vehicle_spd_valid(), target);
  }

  // double vehicle_spd = 3;
  if (this->vehicle_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vehicle_spd(), target);
  }

  // bool is_wheel_spd_rr_valid = 4;
  if (this->is_wheel_spd_rr_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rr_valid(), target);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (this->wheel_direction_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rr(), target);
  }

  // double wheel_spd_rr = 6;
  if (this->wheel_spd_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rr(), target);
  }

  // bool is_wheel_spd_rl_valid = 7;
  if (this->is_wheel_spd_rl_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_rl_valid(), target);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (this->wheel_direction_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_rl(), target);
  }

  // double wheel_spd_rl = 9;
  if (this->wheel_spd_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_rl(), target);
  }

  // bool is_wheel_spd_fr_valid = 10;
  if (this->is_wheel_spd_fr_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fr_valid(), target);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (this->wheel_direction_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fr(), target);
  }

  // double wheel_spd_fr = 12;
  if (this->wheel_spd_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fr(), target);
  }

  // bool is_wheel_spd_fl_valid = 13;
  if (this->is_wheel_spd_fl_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_wheel_spd_fl_valid(), target);
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (this->wheel_direction_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->wheel_direction_fl(), target);
  }

  // double wheel_spd_fl = 15;
  if (this->wheel_spd_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wheel_spd_fl(), target);
  }

  // bool is_yaw_rate_valid = 16;
  if (this->is_yaw_rate_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_yaw_rate_valid(), target);
  }

  // double yaw_rate = 17;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yaw_rate(), target);
  }

  // double yaw_rate_offset = 18;
  if (this->yaw_rate_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->yaw_rate_offset(), target);
  }

  // bool is_ax_valid = 19;
  if (this->is_ax_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ax_valid(), target);
  }

  // double ax = 20;
  if (this->ax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ax(), target);
  }

  // double ax_offset = 21;
  if (this->ax_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->ax_offset(), target);
  }

  // bool is_ay_valid = 22;
  if (this->is_ay_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_ay_valid(), target);
  }

  // double ay = 23;
  if (this->ay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->ay(), target);
  }

  // double ay_offset = 24;
  if (this->ay_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->ay_offset(), target);
  }

  // double lat_acc = 25;
  if (this->lat_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lat_acc(), target);
  }

  // double long_acc = 26;
  if (this->long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->long_acc(), target);
  }

  // double vert_acc = 27;
  if (this->vert_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->vert_acc(), target);
  }

  // double roll_rate = 28;
  if (this->roll_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->roll_rate(), target);
  }

  // double acc_est = 29;
  if (this->acc_est() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->acc_est(), target);
  }

  // double timestamp_sec = 30;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->timestamp_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleSpd)
  return target;
}

size_t VehicleSpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleSpd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double vehicle_spd = 3;
  if (this->vehicle_spd() != 0) {
    total_size += 1 + 8;
  }

  // bool is_vehicle_standstill = 1;
  if (this->is_vehicle_standstill() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vehicle_spd_valid = 2;
  if (this->is_vehicle_spd_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wheel_spd_rr_valid = 4;
  if (this->is_wheel_spd_rr_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wheel_spd_rl_valid = 7;
  if (this->is_wheel_spd_rl_valid() != 0) {
    total_size += 1 + 1;
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (this->wheel_direction_rr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
  }

  // double wheel_spd_rr = 6;
  if (this->wheel_spd_rr() != 0) {
    total_size += 1 + 8;
  }

  // double wheel_spd_rl = 9;
  if (this->wheel_spd_rl() != 0) {
    total_size += 1 + 8;
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (this->wheel_direction_rl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (this->wheel_direction_fr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
  }

  // double wheel_spd_fr = 12;
  if (this->wheel_spd_fr() != 0) {
    total_size += 1 + 8;
  }

  // .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (this->wheel_direction_fl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
  }

  // bool is_wheel_spd_fr_valid = 10;
  if (this->is_wheel_spd_fr_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wheel_spd_fl_valid = 13;
  if (this->is_wheel_spd_fl_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_yaw_rate_valid = 16;
  if (this->is_yaw_rate_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool is_ax_valid = 19;
  if (this->is_ax_valid() != 0) {
    total_size += 2 + 1;
  }

  // double wheel_spd_fl = 15;
  if (this->wheel_spd_fl() != 0) {
    total_size += 1 + 8;
  }

  // double yaw_rate = 17;
  if (this->yaw_rate() != 0) {
    total_size += 2 + 8;
  }

  // double yaw_rate_offset = 18;
  if (this->yaw_rate_offset() != 0) {
    total_size += 2 + 8;
  }

  // double ax = 20;
  if (this->ax() != 0) {
    total_size += 2 + 8;
  }

  // double ax_offset = 21;
  if (this->ax_offset() != 0) {
    total_size += 2 + 8;
  }

  // double ay = 23;
  if (this->ay() != 0) {
    total_size += 2 + 8;
  }

  // double ay_offset = 24;
  if (this->ay_offset() != 0) {
    total_size += 2 + 8;
  }

  // double lat_acc = 25;
  if (this->lat_acc() != 0) {
    total_size += 2 + 8;
  }

  // double long_acc = 26;
  if (this->long_acc() != 0) {
    total_size += 2 + 8;
  }

  // double vert_acc = 27;
  if (this->vert_acc() != 0) {
    total_size += 2 + 8;
  }

  // double roll_rate = 28;
  if (this->roll_rate() != 0) {
    total_size += 2 + 8;
  }

  // double acc_est = 29;
  if (this->acc_est() != 0) {
    total_size += 2 + 8;
  }

  // double timestamp_sec = 30;
  if (this->timestamp_sec() != 0) {
    total_size += 2 + 8;
  }

  // bool is_ay_valid = 22;
  if (this->is_ay_valid() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSpd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSpd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSpd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleSpd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleSpd)
    MergeFrom(*source);
  }
}

void VehicleSpd::MergeFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_spd() != 0) {
    set_vehicle_spd(from.vehicle_spd());
  }
  if (from.is_vehicle_standstill() != 0) {
    set_is_vehicle_standstill(from.is_vehicle_standstill());
  }
  if (from.is_vehicle_spd_valid() != 0) {
    set_is_vehicle_spd_valid(from.is_vehicle_spd_valid());
  }
  if (from.is_wheel_spd_rr_valid() != 0) {
    set_is_wheel_spd_rr_valid(from.is_wheel_spd_rr_valid());
  }
  if (from.is_wheel_spd_rl_valid() != 0) {
    set_is_wheel_spd_rl_valid(from.is_wheel_spd_rl_valid());
  }
  if (from.wheel_direction_rr() != 0) {
    set_wheel_direction_rr(from.wheel_direction_rr());
  }
  if (from.wheel_spd_rr() != 0) {
    set_wheel_spd_rr(from.wheel_spd_rr());
  }
  if (from.wheel_spd_rl() != 0) {
    set_wheel_spd_rl(from.wheel_spd_rl());
  }
  if (from.wheel_direction_rl() != 0) {
    set_wheel_direction_rl(from.wheel_direction_rl());
  }
  if (from.wheel_direction_fr() != 0) {
    set_wheel_direction_fr(from.wheel_direction_fr());
  }
  if (from.wheel_spd_fr() != 0) {
    set_wheel_spd_fr(from.wheel_spd_fr());
  }
  if (from.wheel_direction_fl() != 0) {
    set_wheel_direction_fl(from.wheel_direction_fl());
  }
  if (from.is_wheel_spd_fr_valid() != 0) {
    set_is_wheel_spd_fr_valid(from.is_wheel_spd_fr_valid());
  }
  if (from.is_wheel_spd_fl_valid() != 0) {
    set_is_wheel_spd_fl_valid(from.is_wheel_spd_fl_valid());
  }
  if (from.is_yaw_rate_valid() != 0) {
    set_is_yaw_rate_valid(from.is_yaw_rate_valid());
  }
  if (from.is_ax_valid() != 0) {
    set_is_ax_valid(from.is_ax_valid());
  }
  if (from.wheel_spd_fl() != 0) {
    set_wheel_spd_fl(from.wheel_spd_fl());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.yaw_rate_offset() != 0) {
    set_yaw_rate_offset(from.yaw_rate_offset());
  }
  if (from.ax() != 0) {
    set_ax(from.ax());
  }
  if (from.ax_offset() != 0) {
    set_ax_offset(from.ax_offset());
  }
  if (from.ay() != 0) {
    set_ay(from.ay());
  }
  if (from.ay_offset() != 0) {
    set_ay_offset(from.ay_offset());
  }
  if (from.lat_acc() != 0) {
    set_lat_acc(from.lat_acc());
  }
  if (from.long_acc() != 0) {
    set_long_acc(from.long_acc());
  }
  if (from.vert_acc() != 0) {
    set_vert_acc(from.vert_acc());
  }
  if (from.roll_rate() != 0) {
    set_roll_rate(from.roll_rate());
  }
  if (from.acc_est() != 0) {
    set_acc_est(from.acc_est());
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
  if (from.is_ay_valid() != 0) {
    set_is_ay_valid(from.is_ay_valid());
  }
}

void VehicleSpd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSpd::CopyFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpd::IsInitialized() const {
  return true;
}

void VehicleSpd::Swap(VehicleSpd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSpd::InternalSwap(VehicleSpd* other) {
  using std::swap;
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(is_vehicle_standstill_, other->is_vehicle_standstill_);
  swap(is_vehicle_spd_valid_, other->is_vehicle_spd_valid_);
  swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  swap(wheel_direction_rr_, other->wheel_direction_rr_);
  swap(wheel_spd_rr_, other->wheel_spd_rr_);
  swap(wheel_spd_rl_, other->wheel_spd_rl_);
  swap(wheel_direction_rl_, other->wheel_direction_rl_);
  swap(wheel_direction_fr_, other->wheel_direction_fr_);
  swap(wheel_spd_fr_, other->wheel_spd_fr_);
  swap(wheel_direction_fl_, other->wheel_direction_fl_);
  swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  swap(is_yaw_rate_valid_, other->is_yaw_rate_valid_);
  swap(is_ax_valid_, other->is_ax_valid_);
  swap(wheel_spd_fl_, other->wheel_spd_fl_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(yaw_rate_offset_, other->yaw_rate_offset_);
  swap(ax_, other->ax_);
  swap(ax_offset_, other->ax_offset_);
  swap(ay_, other->ay_);
  swap(ay_offset_, other->ay_offset_);
  swap(lat_acc_, other->lat_acc_);
  swap(long_acc_, other->long_acc_);
  swap(vert_acc_, other->vert_acc_);
  swap(roll_rate_, other->roll_rate_);
  swap(acc_est_, other->acc_est_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(is_ay_valid_, other->is_ay_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleSpd::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Deceleration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deceleration::kIsDecelerationAvailableFieldNumber;
const int Deceleration::kIsDecelerationActiveFieldNumber;
const int Deceleration::kDecelerationFieldNumber;
const int Deceleration::kIsEvbFailFieldNumber;
const int Deceleration::kEvbPressureFieldNumber;
const int Deceleration::kBrakePressureFieldNumber;
const int Deceleration::kBrakePressureSpdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deceleration::Deceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Deceleration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Deceleration)
}
Deceleration::Deceleration(const Deceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deceleration_, &from.deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_deceleration_active_) -
    reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Deceleration)
}

void Deceleration::SharedCtor() {
  ::memset(&deceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deceleration_active_) -
      reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
}

Deceleration::~Deceleration() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Deceleration)
  SharedDtor();
}

void Deceleration::SharedDtor() {
}

void Deceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Deceleration::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Deceleration& Deceleration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Deceleration.base);
  return *internal_default_instance();
}


void Deceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&deceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deceleration_active_) -
      reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
  _internal_metadata_.Clear();
}

bool Deceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Deceleration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_deceleration_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_deceleration_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double deceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double is_evb_fail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_evb_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double evb_pressure = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evb_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_pressure = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_pressure_spd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Deceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Deceleration)
  return false;
#undef DO_
}

void Deceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_deceleration_available = 1;
  if (this->is_deceleration_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_deceleration_available(), output);
  }

  // bool is_deceleration_active = 2;
  if (this->is_deceleration_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deceleration_active(), output);
  }

  // double deceleration = 3;
  if (this->deceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deceleration(), output);
  }

  // double is_evb_fail = 4;
  if (this->is_evb_fail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->is_evb_fail(), output);
  }

  // double evb_pressure = 5;
  if (this->evb_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->evb_pressure(), output);
  }

  // double brake_pressure = 6;
  if (this->brake_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->brake_pressure(), output);
  }

  // double brake_pressure_spd = 7;
  if (this->brake_pressure_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_pressure_spd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Deceleration)
}

::google::protobuf::uint8* Deceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_deceleration_available = 1;
  if (this->is_deceleration_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_deceleration_available(), target);
  }

  // bool is_deceleration_active = 2;
  if (this->is_deceleration_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deceleration_active(), target);
  }

  // double deceleration = 3;
  if (this->deceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deceleration(), target);
  }

  // double is_evb_fail = 4;
  if (this->is_evb_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->is_evb_fail(), target);
  }

  // double evb_pressure = 5;
  if (this->evb_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->evb_pressure(), target);
  }

  // double brake_pressure = 6;
  if (this->brake_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->brake_pressure(), target);
  }

  // double brake_pressure_spd = 7;
  if (this->brake_pressure_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_pressure_spd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Deceleration)
  return target;
}

size_t Deceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Deceleration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double deceleration = 3;
  if (this->deceleration() != 0) {
    total_size += 1 + 8;
  }

  // double is_evb_fail = 4;
  if (this->is_evb_fail() != 0) {
    total_size += 1 + 8;
  }

  // double evb_pressure = 5;
  if (this->evb_pressure() != 0) {
    total_size += 1 + 8;
  }

  // double brake_pressure = 6;
  if (this->brake_pressure() != 0) {
    total_size += 1 + 8;
  }

  // double brake_pressure_spd = 7;
  if (this->brake_pressure_spd() != 0) {
    total_size += 1 + 8;
  }

  // bool is_deceleration_available = 1;
  if (this->is_deceleration_available() != 0) {
    total_size += 1 + 1;
  }

  // bool is_deceleration_active = 2;
  if (this->is_deceleration_active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Deceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Deceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Deceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Deceleration)
    MergeFrom(*source);
  }
}

void Deceleration::MergeFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deceleration() != 0) {
    set_deceleration(from.deceleration());
  }
  if (from.is_evb_fail() != 0) {
    set_is_evb_fail(from.is_evb_fail());
  }
  if (from.evb_pressure() != 0) {
    set_evb_pressure(from.evb_pressure());
  }
  if (from.brake_pressure() != 0) {
    set_brake_pressure(from.brake_pressure());
  }
  if (from.brake_pressure_spd() != 0) {
    set_brake_pressure_spd(from.brake_pressure_spd());
  }
  if (from.is_deceleration_available() != 0) {
    set_is_deceleration_available(from.is_deceleration_available());
  }
  if (from.is_deceleration_active() != 0) {
    set_is_deceleration_active(from.is_deceleration_active());
  }
}

void Deceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deceleration::CopyFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deceleration::IsInitialized() const {
  return true;
}

void Deceleration::Swap(Deceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deceleration::InternalSwap(Deceleration* other) {
  using std::swap;
  swap(deceleration_, other->deceleration_);
  swap(is_evb_fail_, other->is_evb_fail_);
  swap(evb_pressure_, other->evb_pressure_);
  swap(brake_pressure_, other->brake_pressure_);
  swap(brake_pressure_spd_, other->brake_pressure_spd_);
  swap(is_deceleration_available_, other->is_deceleration_available_);
  swap(is_deceleration_active_, other->is_deceleration_active_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Deceleration::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake::kIsBrakePedalPressedFieldNumber;
const int Brake::kIsBrakeForceExistFieldNumber;
const int Brake::kIsBrakeOverHeatFieldNumber;
const int Brake::kIsHandBrakeOnFieldNumber;
const int Brake::kBrakePedalPositionFieldNumber;
const int Brake::kIsBrakeValidFieldNumber;
const int Brake::kBrakeInputFieldNumber;
const int Brake::kBrakeCmdFieldNumber;
const int Brake::kBrakeOutputFieldNumber;
const int Brake::kBooInputFieldNumber;
const int Brake::kBooCmdFieldNumber;
const int Brake::kBooOutputFieldNumber;
const int Brake::kWatchdogApplyingBrakesFieldNumber;
const int Brake::kWatchdogSourceFieldNumber;
const int Brake::kBrakeEnabledFieldNumber;
const int Brake::kDriverOverrideFieldNumber;
const int Brake::kDriverActivityFieldNumber;
const int Brake::kWatchdogFaultFieldNumber;
const int Brake::kChannel1FaultFieldNumber;
const int Brake::kChannel2FaultFieldNumber;
const int Brake::kBooFaultFieldNumber;
const int Brake::kConnectorFaultFieldNumber;
const int Brake::kBrakeTorqueReqFieldNumber;
const int Brake::kHsaStatusFieldNumber;
const int Brake::kBrakeTorqueActFieldNumber;
const int Brake::kHsaModeFieldNumber;
const int Brake::kWheelTorqueActFieldNumber;
const int Brake::kMajorVersionFieldNumber;
const int Brake::kMinorVersionFieldNumber;
const int Brake::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake::Brake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Brake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake)
}
Brake::Brake(const Brake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_position_, &from.brake_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake)
}

void Brake::SharedCtor() {
  ::memset(&brake_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
}

Brake::~Brake() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake)
  SharedDtor();
}

void Brake::SharedDtor() {
}

void Brake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake& Brake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Brake.base);
  return *internal_default_instance();
}


void Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brake_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
  _internal_metadata_.Clear();
}

bool Brake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_brake_pedal_pressed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_pedal_pressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_brake_force_exist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_force_exist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_brake_over_heat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_over_heat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_hand_brake_on = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hand_brake_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_pedal_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pedal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_brake_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_input = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_cmd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_output = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boo_input = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boo_cmd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boo_output = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool watchdog_applying_brakes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_applying_brakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 watchdog_source = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool brake_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_override = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_activity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool watchdog_fault = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool channel_1_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool channel_2_fault = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boo_fault = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connector_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brake_torque_req = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_torque_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hsa_status(static_cast< ::apollo::canbus::Brake_HSAStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brake_torque_act = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_torque_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hsa_mode(static_cast< ::apollo::canbus::Brake_HSAModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wheel_torque_act = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_torque_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 major_version = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minor_version = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 build_number = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake)
  return false;
#undef DO_
}

void Brake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_brake_pedal_pressed = 1;
  if (this->is_brake_pedal_pressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_brake_pedal_pressed(), output);
  }

  // bool is_brake_force_exist = 2;
  if (this->is_brake_force_exist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_brake_force_exist(), output);
  }

  // bool is_brake_over_heat = 3;
  if (this->is_brake_over_heat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_over_heat(), output);
  }

  // bool is_hand_brake_on = 4;
  if (this->is_hand_brake_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_hand_brake_on(), output);
  }

  // double brake_pedal_position = 5;
  if (this->brake_pedal_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->brake_pedal_position(), output);
  }

  // bool is_brake_valid = 6;
  if (this->is_brake_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_brake_valid(), output);
  }

  // double brake_input = 7;
  if (this->brake_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_input(), output);
  }

  // double brake_cmd = 8;
  if (this->brake_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->brake_cmd(), output);
  }

  // double brake_output = 9;
  if (this->brake_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->brake_output(), output);
  }

  // bool boo_input = 10;
  if (this->boo_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->boo_input(), output);
  }

  // bool boo_cmd = 11;
  if (this->boo_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->boo_cmd(), output);
  }

  // bool boo_output = 12;
  if (this->boo_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->boo_output(), output);
  }

  // bool watchdog_applying_brakes = 13;
  if (this->watchdog_applying_brakes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->watchdog_applying_brakes(), output);
  }

  // int32 watchdog_source = 14;
  if (this->watchdog_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->watchdog_source(), output);
  }

  // bool brake_enabled = 15;
  if (this->brake_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->brake_enabled(), output);
  }

  // bool driver_override = 16;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // bool boo_fault = 21;
  if (this->boo_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->boo_fault(), output);
  }

  // bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // int32 brake_torque_req = 23;
  if (this->brake_torque_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->brake_torque_req(), output);
  }

  // .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (this->hsa_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->hsa_status(), output);
  }

  // int32 brake_torque_act = 25;
  if (this->brake_torque_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->brake_torque_act(), output);
  }

  // .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (this->hsa_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->hsa_mode(), output);
  }

  // int32 wheel_torque_act = 27;
  if (this->wheel_torque_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->wheel_torque_act(), output);
  }

  // int32 major_version = 28;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->major_version(), output);
  }

  // int32 minor_version = 29;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->minor_version(), output);
  }

  // int32 build_number = 30;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->build_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake)
}

::google::protobuf::uint8* Brake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_brake_pedal_pressed = 1;
  if (this->is_brake_pedal_pressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_brake_pedal_pressed(), target);
  }

  // bool is_brake_force_exist = 2;
  if (this->is_brake_force_exist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_brake_force_exist(), target);
  }

  // bool is_brake_over_heat = 3;
  if (this->is_brake_over_heat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_over_heat(), target);
  }

  // bool is_hand_brake_on = 4;
  if (this->is_hand_brake_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_hand_brake_on(), target);
  }

  // double brake_pedal_position = 5;
  if (this->brake_pedal_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->brake_pedal_position(), target);
  }

  // bool is_brake_valid = 6;
  if (this->is_brake_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_brake_valid(), target);
  }

  // double brake_input = 7;
  if (this->brake_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_input(), target);
  }

  // double brake_cmd = 8;
  if (this->brake_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->brake_cmd(), target);
  }

  // double brake_output = 9;
  if (this->brake_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->brake_output(), target);
  }

  // bool boo_input = 10;
  if (this->boo_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->boo_input(), target);
  }

  // bool boo_cmd = 11;
  if (this->boo_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->boo_cmd(), target);
  }

  // bool boo_output = 12;
  if (this->boo_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->boo_output(), target);
  }

  // bool watchdog_applying_brakes = 13;
  if (this->watchdog_applying_brakes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->watchdog_applying_brakes(), target);
  }

  // int32 watchdog_source = 14;
  if (this->watchdog_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->watchdog_source(), target);
  }

  // bool brake_enabled = 15;
  if (this->brake_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->brake_enabled(), target);
  }

  // bool driver_override = 16;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // bool boo_fault = 21;
  if (this->boo_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->boo_fault(), target);
  }

  // bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // int32 brake_torque_req = 23;
  if (this->brake_torque_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->brake_torque_req(), target);
  }

  // .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (this->hsa_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->hsa_status(), target);
  }

  // int32 brake_torque_act = 25;
  if (this->brake_torque_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->brake_torque_act(), target);
  }

  // .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (this->hsa_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->hsa_mode(), target);
  }

  // int32 wheel_torque_act = 27;
  if (this->wheel_torque_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->wheel_torque_act(), target);
  }

  // int32 major_version = 28;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->major_version(), target);
  }

  // int32 minor_version = 29;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->minor_version(), target);
  }

  // int32 build_number = 30;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->build_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake)
  return target;
}

size_t Brake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double brake_pedal_position = 5;
  if (this->brake_pedal_position() != 0) {
    total_size += 1 + 8;
  }

  // bool is_brake_pedal_pressed = 1;
  if (this->is_brake_pedal_pressed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_brake_force_exist = 2;
  if (this->is_brake_force_exist() != 0) {
    total_size += 1 + 1;
  }

  // bool is_brake_over_heat = 3;
  if (this->is_brake_over_heat() != 0) {
    total_size += 1 + 1;
  }

  // bool is_hand_brake_on = 4;
  if (this->is_hand_brake_on() != 0) {
    total_size += 1 + 1;
  }

  // bool is_brake_valid = 6;
  if (this->is_brake_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool boo_input = 10;
  if (this->boo_input() != 0) {
    total_size += 1 + 1;
  }

  // bool boo_cmd = 11;
  if (this->boo_cmd() != 0) {
    total_size += 1 + 1;
  }

  // bool boo_output = 12;
  if (this->boo_output() != 0) {
    total_size += 1 + 1;
  }

  // double brake_input = 7;
  if (this->brake_input() != 0) {
    total_size += 1 + 8;
  }

  // double brake_cmd = 8;
  if (this->brake_cmd() != 0) {
    total_size += 1 + 8;
  }

  // double brake_output = 9;
  if (this->brake_output() != 0) {
    total_size += 1 + 8;
  }

  // int32 watchdog_source = 14;
  if (this->watchdog_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watchdog_source());
  }

  // bool watchdog_applying_brakes = 13;
  if (this->watchdog_applying_brakes() != 0) {
    total_size += 1 + 1;
  }

  // bool brake_enabled = 15;
  if (this->brake_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool driver_override = 16;
  if (this->driver_override() != 0) {
    total_size += 2 + 1;
  }

  // bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    total_size += 2 + 1;
  }

  // bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool boo_fault = 21;
  if (this->boo_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    total_size += 2 + 1;
  }

  // int32 brake_torque_req = 23;
  if (this->brake_torque_req() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_torque_req());
  }

  // .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (this->hsa_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_status());
  }

  // int32 brake_torque_act = 25;
  if (this->brake_torque_act() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_torque_act());
  }

  // .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (this->hsa_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_mode());
  }

  // int32 wheel_torque_act = 27;
  if (this->wheel_torque_act() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wheel_torque_act());
  }

  // int32 major_version = 28;
  if (this->major_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // int32 minor_version = 29;
  if (this->minor_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // int32 build_number = 30;
  if (this->build_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake)
    MergeFrom(*source);
  }
}

void Brake::MergeFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brake_pedal_position() != 0) {
    set_brake_pedal_position(from.brake_pedal_position());
  }
  if (from.is_brake_pedal_pressed() != 0) {
    set_is_brake_pedal_pressed(from.is_brake_pedal_pressed());
  }
  if (from.is_brake_force_exist() != 0) {
    set_is_brake_force_exist(from.is_brake_force_exist());
  }
  if (from.is_brake_over_heat() != 0) {
    set_is_brake_over_heat(from.is_brake_over_heat());
  }
  if (from.is_hand_brake_on() != 0) {
    set_is_hand_brake_on(from.is_hand_brake_on());
  }
  if (from.is_brake_valid() != 0) {
    set_is_brake_valid(from.is_brake_valid());
  }
  if (from.boo_input() != 0) {
    set_boo_input(from.boo_input());
  }
  if (from.boo_cmd() != 0) {
    set_boo_cmd(from.boo_cmd());
  }
  if (from.boo_output() != 0) {
    set_boo_output(from.boo_output());
  }
  if (from.brake_input() != 0) {
    set_brake_input(from.brake_input());
  }
  if (from.brake_cmd() != 0) {
    set_brake_cmd(from.brake_cmd());
  }
  if (from.brake_output() != 0) {
    set_brake_output(from.brake_output());
  }
  if (from.watchdog_source() != 0) {
    set_watchdog_source(from.watchdog_source());
  }
  if (from.watchdog_applying_brakes() != 0) {
    set_watchdog_applying_brakes(from.watchdog_applying_brakes());
  }
  if (from.brake_enabled() != 0) {
    set_brake_enabled(from.brake_enabled());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.driver_activity() != 0) {
    set_driver_activity(from.driver_activity());
  }
  if (from.watchdog_fault() != 0) {
    set_watchdog_fault(from.watchdog_fault());
  }
  if (from.channel_1_fault() != 0) {
    set_channel_1_fault(from.channel_1_fault());
  }
  if (from.channel_2_fault() != 0) {
    set_channel_2_fault(from.channel_2_fault());
  }
  if (from.boo_fault() != 0) {
    set_boo_fault(from.boo_fault());
  }
  if (from.connector_fault() != 0) {
    set_connector_fault(from.connector_fault());
  }
  if (from.brake_torque_req() != 0) {
    set_brake_torque_req(from.brake_torque_req());
  }
  if (from.hsa_status() != 0) {
    set_hsa_status(from.hsa_status());
  }
  if (from.brake_torque_act() != 0) {
    set_brake_torque_act(from.brake_torque_act());
  }
  if (from.hsa_mode() != 0) {
    set_hsa_mode(from.hsa_mode());
  }
  if (from.wheel_torque_act() != 0) {
    set_wheel_torque_act(from.wheel_torque_act());
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Brake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake::CopyFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake::IsInitialized() const {
  return true;
}

void Brake::Swap(Brake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake::InternalSwap(Brake* other) {
  using std::swap;
  swap(brake_pedal_position_, other->brake_pedal_position_);
  swap(is_brake_pedal_pressed_, other->is_brake_pedal_pressed_);
  swap(is_brake_force_exist_, other->is_brake_force_exist_);
  swap(is_brake_over_heat_, other->is_brake_over_heat_);
  swap(is_hand_brake_on_, other->is_hand_brake_on_);
  swap(is_brake_valid_, other->is_brake_valid_);
  swap(boo_input_, other->boo_input_);
  swap(boo_cmd_, other->boo_cmd_);
  swap(boo_output_, other->boo_output_);
  swap(brake_input_, other->brake_input_);
  swap(brake_cmd_, other->brake_cmd_);
  swap(brake_output_, other->brake_output_);
  swap(watchdog_source_, other->watchdog_source_);
  swap(watchdog_applying_brakes_, other->watchdog_applying_brakes_);
  swap(brake_enabled_, other->brake_enabled_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(boo_fault_, other->boo_fault_);
  swap(connector_fault_, other->connector_fault_);
  swap(brake_torque_req_, other->brake_torque_req_);
  swap(hsa_status_, other->hsa_status_);
  swap(brake_torque_act_, other->brake_torque_act_);
  swap(hsa_mode_, other->hsa_mode_);
  swap(wheel_torque_act_, other->wheel_torque_act_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Epb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Epb::kIsEpbErrorFieldNumber;
const int Epb::kIsEpbReleasedFieldNumber;
const int Epb::kEpbStatusFieldNumber;
const int Epb::kParkingBrakeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Epb::Epb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Epb.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Epb)
}
Epb::Epb(const Epb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_epb_error_, &from.is_epb_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_brake_status_) -
    reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Epb)
}

void Epb::SharedCtor() {
  ::memset(&is_epb_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_brake_status_) -
      reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
}

Epb::~Epb() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Epb)
  SharedDtor();
}

void Epb::SharedDtor() {
}

void Epb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Epb::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Epb& Epb::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Epb.base);
  return *internal_default_instance();
}


void Epb::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_epb_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_brake_status_) -
      reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
  _internal_metadata_.Clear();
}

bool Epb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Epb)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_epb_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_epb_released = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_released_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epb_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parking_brake_status(static_cast< ::apollo::canbus::Epb_PBrakeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Epb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Epb)
  return false;
#undef DO_
}

void Epb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_epb_error = 1;
  if (this->is_epb_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_epb_error(), output);
  }

  // bool is_epb_released = 2;
  if (this->is_epb_released() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_released(), output);
  }

  // int32 epb_status = 3;
  if (this->epb_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->epb_status(), output);
  }

  // .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (this->parking_brake_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parking_brake_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Epb)
}

::google::protobuf::uint8* Epb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_epb_error = 1;
  if (this->is_epb_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_epb_error(), target);
  }

  // bool is_epb_released = 2;
  if (this->is_epb_released() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_released(), target);
  }

  // int32 epb_status = 3;
  if (this->epb_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->epb_status(), target);
  }

  // .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (this->parking_brake_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parking_brake_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Epb)
  return target;
}

size_t Epb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Epb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_epb_error = 1;
  if (this->is_epb_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_epb_released = 2;
  if (this->is_epb_released() != 0) {
    total_size += 1 + 1;
  }

  // int32 epb_status = 3;
  if (this->epb_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_status());
  }

  // .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (this->parking_brake_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_brake_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Epb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  const Epb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Epb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Epb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Epb)
    MergeFrom(*source);
  }
}

void Epb::MergeFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_epb_error() != 0) {
    set_is_epb_error(from.is_epb_error());
  }
  if (from.is_epb_released() != 0) {
    set_is_epb_released(from.is_epb_released());
  }
  if (from.epb_status() != 0) {
    set_epb_status(from.epb_status());
  }
  if (from.parking_brake_status() != 0) {
    set_parking_brake_status(from.parking_brake_status());
  }
}

void Epb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epb::CopyFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epb::IsInitialized() const {
  return true;
}

void Epb::Swap(Epb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Epb::InternalSwap(Epb* other) {
  using std::swap;
  swap(is_epb_error_, other->is_epb_error_);
  swap(is_epb_released_, other->is_epb_released_);
  swap(epb_status_, other->epb_status_);
  swap(parking_brake_status_, other->parking_brake_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Epb::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gas::kIsGasPedalErrorFieldNumber;
const int Gas::kIsGasPedalPressedMoreFieldNumber;
const int Gas::kGasPedalPositionFieldNumber;
const int Gas::kIsGasValidFieldNumber;
const int Gas::kThrottleInputFieldNumber;
const int Gas::kThrottleCmdFieldNumber;
const int Gas::kThrottleOutputFieldNumber;
const int Gas::kWatchdogSourceFieldNumber;
const int Gas::kThrottleEnabledFieldNumber;
const int Gas::kDriverOverrideFieldNumber;
const int Gas::kDriverActivityFieldNumber;
const int Gas::kWatchdogFaultFieldNumber;
const int Gas::kChannel1FaultFieldNumber;
const int Gas::kChannel2FaultFieldNumber;
const int Gas::kConnectorFaultFieldNumber;
const int Gas::kAcceleratorPedalFieldNumber;
const int Gas::kAcceleratorPedalRateFieldNumber;
const int Gas::kMajorVersionFieldNumber;
const int Gas::kMinorVersionFieldNumber;
const int Gas::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gas::Gas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Gas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gas)
}
Gas::Gas(const Gas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_pedal_position_, &from.gas_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gas)
}

void Gas::SharedCtor() {
  ::memset(&gas_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
}

Gas::~Gas() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gas)
  SharedDtor();
}

void Gas::SharedDtor() {
}

void Gas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gas::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gas& Gas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Gas.base);
  return *internal_default_instance();
}


void Gas::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gas_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
  _internal_metadata_.Clear();
}

bool Gas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_gas_pedal_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_gas_pedal_pressed_more = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_pressed_more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gas_pedal_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gas_pedal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_gas_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle_input = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle_cmd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle_output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 watchdog_source = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool throttle_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttle_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_override = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_activity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool watchdog_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool channel_1_fault = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool channel_2_fault = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connector_fault = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accelerator_pedal = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accelerator_pedal_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 major_version = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minor_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 build_number = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gas)
  return false;
#undef DO_
}

void Gas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_gas_pedal_error = 1;
  if (this->is_gas_pedal_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_gas_pedal_error(), output);
  }

  // bool is_gas_pedal_pressed_more = 2;
  if (this->is_gas_pedal_pressed_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_gas_pedal_pressed_more(), output);
  }

  // double gas_pedal_position = 3;
  if (this->gas_pedal_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gas_pedal_position(), output);
  }

  // bool is_gas_valid = 4;
  if (this->is_gas_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_gas_valid(), output);
  }

  // double throttle_input = 5;
  if (this->throttle_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->throttle_input(), output);
  }

  // double throttle_cmd = 6;
  if (this->throttle_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->throttle_cmd(), output);
  }

  // double throttle_output = 7;
  if (this->throttle_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->throttle_output(), output);
  }

  // int32 watchdog_source = 8;
  if (this->watchdog_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->watchdog_source(), output);
  }

  // bool throttle_enabled = 9;
  if (this->throttle_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->throttle_enabled(), output);
  }

  // bool driver_override = 10;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->driver_override(), output);
  }

  // bool driver_activity = 11;
  if (this->driver_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->driver_activity(), output);
  }

  // bool watchdog_fault = 12;
  if (this->watchdog_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->watchdog_fault(), output);
  }

  // bool channel_1_fault = 13;
  if (this->channel_1_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->channel_1_fault(), output);
  }

  // bool channel_2_fault = 14;
  if (this->channel_2_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->channel_2_fault(), output);
  }

  // bool connector_fault = 15;
  if (this->connector_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->connector_fault(), output);
  }

  // double accelerator_pedal = 16;
  if (this->accelerator_pedal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->accelerator_pedal(), output);
  }

  // double accelerator_pedal_rate = 17;
  if (this->accelerator_pedal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->accelerator_pedal_rate(), output);
  }

  // int32 major_version = 18;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->major_version(), output);
  }

  // int32 minor_version = 19;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->minor_version(), output);
  }

  // int32 build_number = 20;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->build_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gas)
}

::google::protobuf::uint8* Gas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_gas_pedal_error = 1;
  if (this->is_gas_pedal_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_gas_pedal_error(), target);
  }

  // bool is_gas_pedal_pressed_more = 2;
  if (this->is_gas_pedal_pressed_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_gas_pedal_pressed_more(), target);
  }

  // double gas_pedal_position = 3;
  if (this->gas_pedal_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gas_pedal_position(), target);
  }

  // bool is_gas_valid = 4;
  if (this->is_gas_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_gas_valid(), target);
  }

  // double throttle_input = 5;
  if (this->throttle_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->throttle_input(), target);
  }

  // double throttle_cmd = 6;
  if (this->throttle_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->throttle_cmd(), target);
  }

  // double throttle_output = 7;
  if (this->throttle_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->throttle_output(), target);
  }

  // int32 watchdog_source = 8;
  if (this->watchdog_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->watchdog_source(), target);
  }

  // bool throttle_enabled = 9;
  if (this->throttle_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->throttle_enabled(), target);
  }

  // bool driver_override = 10;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->driver_override(), target);
  }

  // bool driver_activity = 11;
  if (this->driver_activity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->driver_activity(), target);
  }

  // bool watchdog_fault = 12;
  if (this->watchdog_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->watchdog_fault(), target);
  }

  // bool channel_1_fault = 13;
  if (this->channel_1_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->channel_1_fault(), target);
  }

  // bool channel_2_fault = 14;
  if (this->channel_2_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->channel_2_fault(), target);
  }

  // bool connector_fault = 15;
  if (this->connector_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->connector_fault(), target);
  }

  // double accelerator_pedal = 16;
  if (this->accelerator_pedal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->accelerator_pedal(), target);
  }

  // double accelerator_pedal_rate = 17;
  if (this->accelerator_pedal_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->accelerator_pedal_rate(), target);
  }

  // int32 major_version = 18;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->major_version(), target);
  }

  // int32 minor_version = 19;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->minor_version(), target);
  }

  // int32 build_number = 20;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->build_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gas)
  return target;
}

size_t Gas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gas)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double gas_pedal_position = 3;
  if (this->gas_pedal_position() != 0) {
    total_size += 1 + 8;
  }

  // bool is_gas_pedal_error = 1;
  if (this->is_gas_pedal_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_gas_pedal_pressed_more = 2;
  if (this->is_gas_pedal_pressed_more() != 0) {
    total_size += 1 + 1;
  }

  // bool is_gas_valid = 4;
  if (this->is_gas_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool throttle_enabled = 9;
  if (this->throttle_enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 watchdog_source = 8;
  if (this->watchdog_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watchdog_source());
  }

  // double throttle_input = 5;
  if (this->throttle_input() != 0) {
    total_size += 1 + 8;
  }

  // double throttle_cmd = 6;
  if (this->throttle_cmd() != 0) {
    total_size += 1 + 8;
  }

  // double throttle_output = 7;
  if (this->throttle_output() != 0) {
    total_size += 1 + 8;
  }

  // bool driver_override = 10;
  if (this->driver_override() != 0) {
    total_size += 1 + 1;
  }

  // bool driver_activity = 11;
  if (this->driver_activity() != 0) {
    total_size += 1 + 1;
  }

  // bool watchdog_fault = 12;
  if (this->watchdog_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool channel_1_fault = 13;
  if (this->channel_1_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool channel_2_fault = 14;
  if (this->channel_2_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool connector_fault = 15;
  if (this->connector_fault() != 0) {
    total_size += 1 + 1;
  }

  // double accelerator_pedal = 16;
  if (this->accelerator_pedal() != 0) {
    total_size += 2 + 8;
  }

  // double accelerator_pedal_rate = 17;
  if (this->accelerator_pedal_rate() != 0) {
    total_size += 2 + 8;
  }

  // int32 major_version = 18;
  if (this->major_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // int32 minor_version = 19;
  if (this->minor_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // int32 build_number = 20;
  if (this->build_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  const Gas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gas)
    MergeFrom(*source);
  }
}

void Gas::MergeFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gas_pedal_position() != 0) {
    set_gas_pedal_position(from.gas_pedal_position());
  }
  if (from.is_gas_pedal_error() != 0) {
    set_is_gas_pedal_error(from.is_gas_pedal_error());
  }
  if (from.is_gas_pedal_pressed_more() != 0) {
    set_is_gas_pedal_pressed_more(from.is_gas_pedal_pressed_more());
  }
  if (from.is_gas_valid() != 0) {
    set_is_gas_valid(from.is_gas_valid());
  }
  if (from.throttle_enabled() != 0) {
    set_throttle_enabled(from.throttle_enabled());
  }
  if (from.watchdog_source() != 0) {
    set_watchdog_source(from.watchdog_source());
  }
  if (from.throttle_input() != 0) {
    set_throttle_input(from.throttle_input());
  }
  if (from.throttle_cmd() != 0) {
    set_throttle_cmd(from.throttle_cmd());
  }
  if (from.throttle_output() != 0) {
    set_throttle_output(from.throttle_output());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.driver_activity() != 0) {
    set_driver_activity(from.driver_activity());
  }
  if (from.watchdog_fault() != 0) {
    set_watchdog_fault(from.watchdog_fault());
  }
  if (from.channel_1_fault() != 0) {
    set_channel_1_fault(from.channel_1_fault());
  }
  if (from.channel_2_fault() != 0) {
    set_channel_2_fault(from.channel_2_fault());
  }
  if (from.connector_fault() != 0) {
    set_connector_fault(from.connector_fault());
  }
  if (from.accelerator_pedal() != 0) {
    set_accelerator_pedal(from.accelerator_pedal());
  }
  if (from.accelerator_pedal_rate() != 0) {
    set_accelerator_pedal_rate(from.accelerator_pedal_rate());
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Gas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gas::CopyFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gas::IsInitialized() const {
  return true;
}

void Gas::Swap(Gas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gas::InternalSwap(Gas* other) {
  using std::swap;
  swap(gas_pedal_position_, other->gas_pedal_position_);
  swap(is_gas_pedal_error_, other->is_gas_pedal_error_);
  swap(is_gas_pedal_pressed_more_, other->is_gas_pedal_pressed_more_);
  swap(is_gas_valid_, other->is_gas_valid_);
  swap(throttle_enabled_, other->throttle_enabled_);
  swap(watchdog_source_, other->watchdog_source_);
  swap(throttle_input_, other->throttle_input_);
  swap(throttle_cmd_, other->throttle_cmd_);
  swap(throttle_output_, other->throttle_output_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(connector_fault_, other->connector_fault_);
  swap(accelerator_pedal_, other->accelerator_pedal_);
  swap(accelerator_pedal_rate_, other->accelerator_pedal_rate_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gas::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Esp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp::kIsEspAccErrorFieldNumber;
const int Esp::kIsEspOnFieldNumber;
const int Esp::kIsEspActiveFieldNumber;
const int Esp::kIsAbsErrorFieldNumber;
const int Esp::kIsAbsActiveFieldNumber;
const int Esp::kIsTcsvdcFailFieldNumber;
const int Esp::kIsAbsEnabledFieldNumber;
const int Esp::kIsStabActiveFieldNumber;
const int Esp::kIsStabEnabledFieldNumber;
const int Esp::kIsTracActiveFieldNumber;
const int Esp::kIsTracEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp::Esp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Esp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Esp)
}
Esp::Esp(const Esp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_esp_acc_error_, &from.is_esp_acc_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trac_enabled_) -
    reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Esp)
}

void Esp::SharedCtor() {
  ::memset(&is_esp_acc_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trac_enabled_) -
      reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
}

Esp::~Esp() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Esp)
  SharedDtor();
}

void Esp::SharedDtor() {
}

void Esp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Esp::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp& Esp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Esp.base);
  return *internal_default_instance();
}


void Esp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_esp_acc_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trac_enabled_) -
      reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
  _internal_metadata_.Clear();
}

bool Esp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Esp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_esp_acc_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_acc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_esp_on = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_esp_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_abs_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_abs_active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_tcsvdc_fail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tcsvdc_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_abs_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_stab_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_stab_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trac_active = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trac_enabled = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Esp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Esp)
  return false;
#undef DO_
}

void Esp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_esp_acc_error = 1;
  if (this->is_esp_acc_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_esp_acc_error(), output);
  }

  // bool is_esp_on = 2;
  if (this->is_esp_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_esp_on(), output);
  }

  // bool is_esp_active = 3;
  if (this->is_esp_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_active(), output);
  }

  // bool is_abs_error = 4;
  if (this->is_abs_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_abs_error(), output);
  }

  // bool is_abs_active = 5;
  if (this->is_abs_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_abs_active(), output);
  }

  // bool is_tcsvdc_fail = 6;
  if (this->is_tcsvdc_fail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tcsvdc_fail(), output);
  }

  // bool is_abs_enabled = 7;
  if (this->is_abs_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_abs_enabled(), output);
  }

  // bool is_stab_active = 8;
  if (this->is_stab_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_stab_active(), output);
  }

  // bool is_stab_enabled = 9;
  if (this->is_stab_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_stab_enabled(), output);
  }

  // bool is_trac_active = 10;
  if (this->is_trac_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_trac_active(), output);
  }

  // bool is_trac_enabled = 11;
  if (this->is_trac_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_trac_enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Esp)
}

::google::protobuf::uint8* Esp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_esp_acc_error = 1;
  if (this->is_esp_acc_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_esp_acc_error(), target);
  }

  // bool is_esp_on = 2;
  if (this->is_esp_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_esp_on(), target);
  }

  // bool is_esp_active = 3;
  if (this->is_esp_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_active(), target);
  }

  // bool is_abs_error = 4;
  if (this->is_abs_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_abs_error(), target);
  }

  // bool is_abs_active = 5;
  if (this->is_abs_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_abs_active(), target);
  }

  // bool is_tcsvdc_fail = 6;
  if (this->is_tcsvdc_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tcsvdc_fail(), target);
  }

  // bool is_abs_enabled = 7;
  if (this->is_abs_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_abs_enabled(), target);
  }

  // bool is_stab_active = 8;
  if (this->is_stab_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_stab_active(), target);
  }

  // bool is_stab_enabled = 9;
  if (this->is_stab_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_stab_enabled(), target);
  }

  // bool is_trac_active = 10;
  if (this->is_trac_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_trac_active(), target);
  }

  // bool is_trac_enabled = 11;
  if (this->is_trac_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_trac_enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Esp)
  return target;
}

size_t Esp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Esp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_esp_acc_error = 1;
  if (this->is_esp_acc_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_esp_on = 2;
  if (this->is_esp_on() != 0) {
    total_size += 1 + 1;
  }

  // bool is_esp_active = 3;
  if (this->is_esp_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_abs_error = 4;
  if (this->is_abs_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_abs_active = 5;
  if (this->is_abs_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tcsvdc_fail = 6;
  if (this->is_tcsvdc_fail() != 0) {
    total_size += 1 + 1;
  }

  // bool is_abs_enabled = 7;
  if (this->is_abs_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_stab_active = 8;
  if (this->is_stab_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_stab_enabled = 9;
  if (this->is_stab_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_trac_active = 10;
  if (this->is_trac_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_trac_enabled = 11;
  if (this->is_trac_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Esp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Esp)
    MergeFrom(*source);
  }
}

void Esp::MergeFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_esp_acc_error() != 0) {
    set_is_esp_acc_error(from.is_esp_acc_error());
  }
  if (from.is_esp_on() != 0) {
    set_is_esp_on(from.is_esp_on());
  }
  if (from.is_esp_active() != 0) {
    set_is_esp_active(from.is_esp_active());
  }
  if (from.is_abs_error() != 0) {
    set_is_abs_error(from.is_abs_error());
  }
  if (from.is_abs_active() != 0) {
    set_is_abs_active(from.is_abs_active());
  }
  if (from.is_tcsvdc_fail() != 0) {
    set_is_tcsvdc_fail(from.is_tcsvdc_fail());
  }
  if (from.is_abs_enabled() != 0) {
    set_is_abs_enabled(from.is_abs_enabled());
  }
  if (from.is_stab_active() != 0) {
    set_is_stab_active(from.is_stab_active());
  }
  if (from.is_stab_enabled() != 0) {
    set_is_stab_enabled(from.is_stab_enabled());
  }
  if (from.is_trac_active() != 0) {
    set_is_trac_active(from.is_trac_active());
  }
  if (from.is_trac_enabled() != 0) {
    set_is_trac_enabled(from.is_trac_enabled());
  }
}

void Esp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp::CopyFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp::IsInitialized() const {
  return true;
}

void Esp::Swap(Esp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp::InternalSwap(Esp* other) {
  using std::swap;
  swap(is_esp_acc_error_, other->is_esp_acc_error_);
  swap(is_esp_on_, other->is_esp_on_);
  swap(is_esp_active_, other->is_esp_active_);
  swap(is_abs_error_, other->is_abs_error_);
  swap(is_abs_active_, other->is_abs_active_);
  swap(is_tcsvdc_fail_, other->is_tcsvdc_fail_);
  swap(is_abs_enabled_, other->is_abs_enabled_);
  swap(is_stab_active_, other->is_stab_active_);
  swap(is_stab_enabled_, other->is_stab_enabled_);
  swap(is_trac_active_, other->is_trac_active_);
  swap(is_trac_enabled_, other->is_trac_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Esp::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ems::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ems::kIsEngineAccAvailableFieldNumber;
const int Ems::kIsEngineAccErrorFieldNumber;
const int Ems::kEngineStateFieldNumber;
const int Ems::kMaxEngineTorqPercentFieldNumber;
const int Ems::kMinEngineTorqPercentFieldNumber;
const int Ems::kBaseEngineTorqConstantFieldNumber;
const int Ems::kIsEngineSpeedErrorFieldNumber;
const int Ems::kEngineSpeedFieldNumber;
const int Ems::kEngineTorqueFieldNumber;
const int Ems::kIsOverEngineTorqueFieldNumber;
const int Ems::kEngineRpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ems::Ems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Ems.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ems)
}
Ems::Ems(const Ems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_engine_torq_percent_, &from.max_engine_torq_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_rpm_) -
    reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ems)
}

void Ems::SharedCtor() {
  ::memset(&max_engine_torq_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_rpm_) -
      reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
}

Ems::~Ems() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ems)
  SharedDtor();
}

void Ems::SharedDtor() {
}

void Ems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ems::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ems& Ems::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Ems.base);
  return *internal_default_instance();
}


void Ems::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_engine_torq_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_rpm_) -
      reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
  _internal_metadata_.Clear();
}

bool Ems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Ems)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_engine_acc_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_engine_acc_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Ems.Type engine_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_engine_state(static_cast< ::apollo::canbus::Ems_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_engine_torq_percent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_engine_torq_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_engine_torq_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_engine_torq_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 base_engine_torq_constant = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_engine_torq_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_engine_speed_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double engine_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 engine_torque = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_over_engine_torque = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_over_engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double engine_rpm = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Ems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Ems)
  return false;
#undef DO_
}

void Ems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_engine_acc_available = 1;
  if (this->is_engine_acc_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_engine_acc_available(), output);
  }

  // bool is_engine_acc_error = 2;
  if (this->is_engine_acc_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_engine_acc_error(), output);
  }

  // .apollo.canbus.Ems.Type engine_state = 3;
  if (this->engine_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->engine_state(), output);
  }

  // double max_engine_torq_percent = 4;
  if (this->max_engine_torq_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_engine_torq_percent(), output);
  }

  // double min_engine_torq_percent = 5;
  if (this->min_engine_torq_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_engine_torq_percent(), output);
  }

  // int32 base_engine_torq_constant = 6;
  if (this->base_engine_torq_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_engine_torq_constant(), output);
  }

  // bool is_engine_speed_error = 7;
  if (this->is_engine_speed_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_engine_speed_error(), output);
  }

  // double engine_speed = 8;
  if (this->engine_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->engine_speed(), output);
  }

  // int32 engine_torque = 9;
  if (this->engine_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->engine_torque(), output);
  }

  // bool is_over_engine_torque = 10;
  if (this->is_over_engine_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_over_engine_torque(), output);
  }

  // double engine_rpm = 11;
  if (this->engine_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->engine_rpm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Ems)
}

::google::protobuf::uint8* Ems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_engine_acc_available = 1;
  if (this->is_engine_acc_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_engine_acc_available(), target);
  }

  // bool is_engine_acc_error = 2;
  if (this->is_engine_acc_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_engine_acc_error(), target);
  }

  // .apollo.canbus.Ems.Type engine_state = 3;
  if (this->engine_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->engine_state(), target);
  }

  // double max_engine_torq_percent = 4;
  if (this->max_engine_torq_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_engine_torq_percent(), target);
  }

  // double min_engine_torq_percent = 5;
  if (this->min_engine_torq_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_engine_torq_percent(), target);
  }

  // int32 base_engine_torq_constant = 6;
  if (this->base_engine_torq_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_engine_torq_constant(), target);
  }

  // bool is_engine_speed_error = 7;
  if (this->is_engine_speed_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_engine_speed_error(), target);
  }

  // double engine_speed = 8;
  if (this->engine_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->engine_speed(), target);
  }

  // int32 engine_torque = 9;
  if (this->engine_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->engine_torque(), target);
  }

  // bool is_over_engine_torque = 10;
  if (this->is_over_engine_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_over_engine_torque(), target);
  }

  // double engine_rpm = 11;
  if (this->engine_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->engine_rpm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ems)
  return target;
}

size_t Ems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ems)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double max_engine_torq_percent = 4;
  if (this->max_engine_torq_percent() != 0) {
    total_size += 1 + 8;
  }

  // .apollo.canbus.Ems.Type engine_state = 3;
  if (this->engine_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine_state());
  }

  // bool is_engine_acc_available = 1;
  if (this->is_engine_acc_available() != 0) {
    total_size += 1 + 1;
  }

  // bool is_engine_acc_error = 2;
  if (this->is_engine_acc_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_engine_speed_error = 7;
  if (this->is_engine_speed_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_over_engine_torque = 10;
  if (this->is_over_engine_torque() != 0) {
    total_size += 1 + 1;
  }

  // double min_engine_torq_percent = 5;
  if (this->min_engine_torq_percent() != 0) {
    total_size += 1 + 8;
  }

  // int32 base_engine_torq_constant = 6;
  if (this->base_engine_torq_constant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_engine_torq_constant());
  }

  // int32 engine_torque = 9;
  if (this->engine_torque() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->engine_torque());
  }

  // double engine_speed = 8;
  if (this->engine_speed() != 0) {
    total_size += 1 + 8;
  }

  // double engine_rpm = 11;
  if (this->engine_rpm() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  const Ems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ems)
    MergeFrom(*source);
  }
}

void Ems::MergeFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_engine_torq_percent() != 0) {
    set_max_engine_torq_percent(from.max_engine_torq_percent());
  }
  if (from.engine_state() != 0) {
    set_engine_state(from.engine_state());
  }
  if (from.is_engine_acc_available() != 0) {
    set_is_engine_acc_available(from.is_engine_acc_available());
  }
  if (from.is_engine_acc_error() != 0) {
    set_is_engine_acc_error(from.is_engine_acc_error());
  }
  if (from.is_engine_speed_error() != 0) {
    set_is_engine_speed_error(from.is_engine_speed_error());
  }
  if (from.is_over_engine_torque() != 0) {
    set_is_over_engine_torque(from.is_over_engine_torque());
  }
  if (from.min_engine_torq_percent() != 0) {
    set_min_engine_torq_percent(from.min_engine_torq_percent());
  }
  if (from.base_engine_torq_constant() != 0) {
    set_base_engine_torq_constant(from.base_engine_torq_constant());
  }
  if (from.engine_torque() != 0) {
    set_engine_torque(from.engine_torque());
  }
  if (from.engine_speed() != 0) {
    set_engine_speed(from.engine_speed());
  }
  if (from.engine_rpm() != 0) {
    set_engine_rpm(from.engine_rpm());
  }
}

void Ems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ems::CopyFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ems::IsInitialized() const {
  return true;
}

void Ems::Swap(Ems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ems::InternalSwap(Ems* other) {
  using std::swap;
  swap(max_engine_torq_percent_, other->max_engine_torq_percent_);
  swap(engine_state_, other->engine_state_);
  swap(is_engine_acc_available_, other->is_engine_acc_available_);
  swap(is_engine_acc_error_, other->is_engine_acc_error_);
  swap(is_engine_speed_error_, other->is_engine_speed_error_);
  swap(is_over_engine_torque_, other->is_over_engine_torque_);
  swap(min_engine_torq_percent_, other->min_engine_torq_percent_);
  swap(base_engine_torq_constant_, other->base_engine_torq_constant_);
  swap(engine_torque_, other->engine_torque_);
  swap(engine_speed_, other->engine_speed_);
  swap(engine_rpm_, other->engine_rpm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ems::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gear::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear::kIsShiftPositionValidFieldNumber;
const int Gear::kGearStateFieldNumber;
const int Gear::kDriverOverrideFieldNumber;
const int Gear::kGearCmdFieldNumber;
const int Gear::kCanbusFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear::Gear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Gear.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear)
}
Gear::Gear(const Gear& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_state_, &from.gear_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear)
}

void Gear::SharedCtor() {
  ::memset(&gear_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_cmd_) -
      reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear)
  SharedDtor();
}

void Gear::SharedDtor() {
}

void Gear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gear::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gear& Gear::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Gear.base);
  return *internal_default_instance();
}


void Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gear_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_cmd_) -
      reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
  _internal_metadata_.Clear();
}

bool Gear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gear)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_shift_position_valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shift_position_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Chassis.GearPosition gear_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_state(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool driver_override = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_cmd(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canbus_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gear)
  return false;
#undef DO_
}

void Gear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_shift_position_valid = 1;
  if (this->is_shift_position_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_shift_position_valid(), output);
  }

  // .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (this->gear_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gear_state(), output);
  }

  // bool driver_override = 3;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->driver_override(), output);
  }

  // .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_cmd(), output);
  }

  // bool canbus_fault = 5;
  if (this->canbus_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canbus_fault(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gear)
}

::google::protobuf::uint8* Gear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_shift_position_valid = 1;
  if (this->is_shift_position_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_shift_position_valid(), target);
  }

  // .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (this->gear_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gear_state(), target);
  }

  // bool driver_override = 3;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->driver_override(), target);
  }

  // .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_cmd(), target);
  }

  // bool canbus_fault = 5;
  if (this->canbus_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canbus_fault(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear)
  return target;
}

size_t Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (this->gear_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_state());
  }

  // bool is_shift_position_valid = 1;
  if (this->is_shift_position_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool driver_override = 3;
  if (this->driver_override() != 0) {
    total_size += 1 + 1;
  }

  // bool canbus_fault = 5;
  if (this->canbus_fault() != 0) {
    total_size += 1 + 1;
  }

  // .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear)
    MergeFrom(*source);
  }
}

void Gear::MergeFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gear_state() != 0) {
    set_gear_state(from.gear_state());
  }
  if (from.is_shift_position_valid() != 0) {
    set_is_shift_position_valid(from.is_shift_position_valid());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.canbus_fault() != 0) {
    set_canbus_fault(from.canbus_fault());
  }
  if (from.gear_cmd() != 0) {
    set_gear_cmd(from.gear_cmd());
  }
}

void Gear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear::CopyFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {
  return true;
}

void Gear::Swap(Gear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear::InternalSwap(Gear* other) {
  using std::swap;
  swap(gear_state_, other->gear_state_);
  swap(is_shift_position_valid_, other->is_shift_position_valid_);
  swap(driver_override_, other->driver_override_);
  swap(canbus_fault_, other->canbus_fault_);
  swap(gear_cmd_, other->gear_cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gear::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Safety::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Safety::kIsDriverCarDoorCloseFieldNumber;
const int Safety::kIsDriverBuckledFieldNumber;
const int Safety::kEmergencyButtonFieldNumber;
const int Safety::kHasErrorFieldNumber;
const int Safety::kIsMotorInvertorFaultFieldNumber;
const int Safety::kIsSystemFaultFieldNumber;
const int Safety::kIsPowerBatteryFaultFieldNumber;
const int Safety::kIsMotorInvertorOverTemperatureFieldNumber;
const int Safety::kIsSmallBatteryChargeDischargeFaultFieldNumber;
const int Safety::kDrivingModeFieldNumber;
const int Safety::kIsPassengerDoorOpenFieldNumber;
const int Safety::kIsRearleftDoorOpenFieldNumber;
const int Safety::kIsRearrightDoorOpenFieldNumber;
const int Safety::kIsHoodOpenFieldNumber;
const int Safety::kIsTrunkOpenFieldNumber;
const int Safety::kIsPassengerDetectedFieldNumber;
const int Safety::kIsPassengerAirbagEnabledFieldNumber;
const int Safety::kIsPassengerBuckledFieldNumber;
const int Safety::kFrontLeftTirePressFieldNumber;
const int Safety::kFrontRightTirePressFieldNumber;
const int Safety::kRearLeftTirePressFieldNumber;
const int Safety::kRearRightTirePressFieldNumber;
const int Safety::kCarDrivingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Safety::Safety()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Safety.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Safety)
}
Safety::Safety(const Safety& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emergency_button_, &from.emergency_button_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_driving_mode_) -
    reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Safety)
}

void Safety::SharedCtor() {
  ::memset(&emergency_button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_driving_mode_) -
      reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
}

Safety::~Safety() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Safety)
  SharedDtor();
}

void Safety::SharedDtor() {
}

void Safety::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Safety::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Safety& Safety::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_Safety.base);
  return *internal_default_instance();
}


void Safety::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&emergency_button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_driving_mode_) -
      reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
  _internal_metadata_.Clear();
}

bool Safety::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Safety)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_driver_car_door_close = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_car_door_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_driver_buckled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_buckled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 emergency_button = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_motor_invertor_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_system_fault = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_power_battery_fault = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_power_battery_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_motor_invertor_over_temperature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_over_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_small_battery_charge_discharge_fault = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_small_battery_charge_discharge_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 driving_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passenger_door_open = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_rearleft_door_open = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearleft_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_rearright_door_open = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearright_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_hood_open = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hood_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trunk_open = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trunk_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passenger_detected = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passenger_airbag_enabled = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_airbag_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passenger_buckled = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_buckled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_left_tire_press = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_left_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_right_tire_press = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_right_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rear_left_tire_press = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_left_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rear_right_tire_press = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_right_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_car_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Safety)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Safety)
  return false;
#undef DO_
}

void Safety::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_driver_car_door_close = 1;
  if (this->is_driver_car_door_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_driver_car_door_close(), output);
  }

  // bool is_driver_buckled = 2;
  if (this->is_driver_buckled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_driver_buckled(), output);
  }

  // int32 emergency_button = 3;
  if (this->emergency_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emergency_button(), output);
  }

  // bool has_error = 4;
  if (this->has_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_error(), output);
  }

  // bool is_motor_invertor_fault = 5;
  if (this->is_motor_invertor_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_motor_invertor_fault(), output);
  }

  // bool is_system_fault = 6;
  if (this->is_system_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_fault(), output);
  }

  // bool is_power_battery_fault = 7;
  if (this->is_power_battery_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_power_battery_fault(), output);
  }

  // bool is_motor_invertor_over_temperature = 8;
  if (this->is_motor_invertor_over_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_motor_invertor_over_temperature(), output);
  }

  // bool is_small_battery_charge_discharge_fault = 9;
  if (this->is_small_battery_charge_discharge_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_small_battery_charge_discharge_fault(), output);
  }

  // int32 driving_mode = 10;
  if (this->driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->driving_mode(), output);
  }

  // bool is_passenger_door_open = 11;
  if (this->is_passenger_door_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_passenger_door_open(), output);
  }

  // bool is_rearleft_door_open = 12;
  if (this->is_rearleft_door_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_rearleft_door_open(), output);
  }

  // bool is_rearright_door_open = 13;
  if (this->is_rearright_door_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_rearright_door_open(), output);
  }

  // bool is_hood_open = 14;
  if (this->is_hood_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_hood_open(), output);
  }

  // bool is_trunk_open = 15;
  if (this->is_trunk_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_trunk_open(), output);
  }

  // bool is_passenger_detected = 16;
  if (this->is_passenger_detected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_passenger_detected(), output);
  }

  // bool is_passenger_airbag_enabled = 17;
  if (this->is_passenger_airbag_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_passenger_airbag_enabled(), output);
  }

  // bool is_passenger_buckled = 18;
  if (this->is_passenger_buckled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_passenger_buckled(), output);
  }

  // int32 front_left_tire_press = 19;
  if (this->front_left_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->front_left_tire_press(), output);
  }

  // int32 front_right_tire_press = 20;
  if (this->front_right_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->front_right_tire_press(), output);
  }

  // int32 rear_left_tire_press = 21;
  if (this->rear_left_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->rear_left_tire_press(), output);
  }

  // int32 rear_right_tire_press = 22;
  if (this->rear_right_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rear_right_tire_press(), output);
  }

  // .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (this->car_driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->car_driving_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Safety)
}

::google::protobuf::uint8* Safety::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_driver_car_door_close = 1;
  if (this->is_driver_car_door_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_driver_car_door_close(), target);
  }

  // bool is_driver_buckled = 2;
  if (this->is_driver_buckled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_driver_buckled(), target);
  }

  // int32 emergency_button = 3;
  if (this->emergency_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->emergency_button(), target);
  }

  // bool has_error = 4;
  if (this->has_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_error(), target);
  }

  // bool is_motor_invertor_fault = 5;
  if (this->is_motor_invertor_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_motor_invertor_fault(), target);
  }

  // bool is_system_fault = 6;
  if (this->is_system_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_fault(), target);
  }

  // bool is_power_battery_fault = 7;
  if (this->is_power_battery_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_power_battery_fault(), target);
  }

  // bool is_motor_invertor_over_temperature = 8;
  if (this->is_motor_invertor_over_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_motor_invertor_over_temperature(), target);
  }

  // bool is_small_battery_charge_discharge_fault = 9;
  if (this->is_small_battery_charge_discharge_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_small_battery_charge_discharge_fault(), target);
  }

  // int32 driving_mode = 10;
  if (this->driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->driving_mode(), target);
  }

  // bool is_passenger_door_open = 11;
  if (this->is_passenger_door_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_passenger_door_open(), target);
  }

  // bool is_rearleft_door_open = 12;
  if (this->is_rearleft_door_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_rearleft_door_open(), target);
  }

  // bool is_rearright_door_open = 13;
  if (this->is_rearright_door_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_rearright_door_open(), target);
  }

  // bool is_hood_open = 14;
  if (this->is_hood_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_hood_open(), target);
  }

  // bool is_trunk_open = 15;
  if (this->is_trunk_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_trunk_open(), target);
  }

  // bool is_passenger_detected = 16;
  if (this->is_passenger_detected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_passenger_detected(), target);
  }

  // bool is_passenger_airbag_enabled = 17;
  if (this->is_passenger_airbag_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_passenger_airbag_enabled(), target);
  }

  // bool is_passenger_buckled = 18;
  if (this->is_passenger_buckled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_passenger_buckled(), target);
  }

  // int32 front_left_tire_press = 19;
  if (this->front_left_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->front_left_tire_press(), target);
  }

  // int32 front_right_tire_press = 20;
  if (this->front_right_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->front_right_tire_press(), target);
  }

  // int32 rear_left_tire_press = 21;
  if (this->rear_left_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->rear_left_tire_press(), target);
  }

  // int32 rear_right_tire_press = 22;
  if (this->rear_right_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rear_right_tire_press(), target);
  }

  // .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (this->car_driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->car_driving_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Safety)
  return target;
}

size_t Safety::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Safety)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 emergency_button = 3;
  if (this->emergency_button() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emergency_button());
  }

  // bool is_driver_car_door_close = 1;
  if (this->is_driver_car_door_close() != 0) {
    total_size += 1 + 1;
  }

  // bool is_driver_buckled = 2;
  if (this->is_driver_buckled() != 0) {
    total_size += 1 + 1;
  }

  // bool has_error = 4;
  if (this->has_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_motor_invertor_fault = 5;
  if (this->is_motor_invertor_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool is_system_fault = 6;
  if (this->is_system_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool is_power_battery_fault = 7;
  if (this->is_power_battery_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool is_motor_invertor_over_temperature = 8;
  if (this->is_motor_invertor_over_temperature() != 0) {
    total_size += 1 + 1;
  }

  // bool is_small_battery_charge_discharge_fault = 9;
  if (this->is_small_battery_charge_discharge_fault() != 0) {
    total_size += 1 + 1;
  }

  // int32 driving_mode = 10;
  if (this->driving_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driving_mode());
  }

  // bool is_passenger_door_open = 11;
  if (this->is_passenger_door_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_rearleft_door_open = 12;
  if (this->is_rearleft_door_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_rearright_door_open = 13;
  if (this->is_rearright_door_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_hood_open = 14;
  if (this->is_hood_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_trunk_open = 15;
  if (this->is_trunk_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_passenger_detected = 16;
  if (this->is_passenger_detected() != 0) {
    total_size += 2 + 1;
  }

  // bool is_passenger_airbag_enabled = 17;
  if (this->is_passenger_airbag_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool is_passenger_buckled = 18;
  if (this->is_passenger_buckled() != 0) {
    total_size += 2 + 1;
  }

  // int32 front_left_tire_press = 19;
  if (this->front_left_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_left_tire_press());
  }

  // int32 front_right_tire_press = 20;
  if (this->front_right_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_right_tire_press());
  }

  // int32 rear_left_tire_press = 21;
  if (this->rear_left_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rear_left_tire_press());
  }

  // int32 rear_right_tire_press = 22;
  if (this->rear_right_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rear_right_tire_press());
  }

  // .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (this->car_driving_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_driving_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Safety::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  const Safety* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Safety>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Safety)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Safety)
    MergeFrom(*source);
  }
}

void Safety::MergeFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.emergency_button() != 0) {
    set_emergency_button(from.emergency_button());
  }
  if (from.is_driver_car_door_close() != 0) {
    set_is_driver_car_door_close(from.is_driver_car_door_close());
  }
  if (from.is_driver_buckled() != 0) {
    set_is_driver_buckled(from.is_driver_buckled());
  }
  if (from.has_error() != 0) {
    set_has_error(from.has_error());
  }
  if (from.is_motor_invertor_fault() != 0) {
    set_is_motor_invertor_fault(from.is_motor_invertor_fault());
  }
  if (from.is_system_fault() != 0) {
    set_is_system_fault(from.is_system_fault());
  }
  if (from.is_power_battery_fault() != 0) {
    set_is_power_battery_fault(from.is_power_battery_fault());
  }
  if (from.is_motor_invertor_over_temperature() != 0) {
    set_is_motor_invertor_over_temperature(from.is_motor_invertor_over_temperature());
  }
  if (from.is_small_battery_charge_discharge_fault() != 0) {
    set_is_small_battery_charge_discharge_fault(from.is_small_battery_charge_discharge_fault());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.is_passenger_door_open() != 0) {
    set_is_passenger_door_open(from.is_passenger_door_open());
  }
  if (from.is_rearleft_door_open() != 0) {
    set_is_rearleft_door_open(from.is_rearleft_door_open());
  }
  if (from.is_rearright_door_open() != 0) {
    set_is_rearright_door_open(from.is_rearright_door_open());
  }
  if (from.is_hood_open() != 0) {
    set_is_hood_open(from.is_hood_open());
  }
  if (from.is_trunk_open() != 0) {
    set_is_trunk_open(from.is_trunk_open());
  }
  if (from.is_passenger_detected() != 0) {
    set_is_passenger_detected(from.is_passenger_detected());
  }
  if (from.is_passenger_airbag_enabled() != 0) {
    set_is_passenger_airbag_enabled(from.is_passenger_airbag_enabled());
  }
  if (from.is_passenger_buckled() != 0) {
    set_is_passenger_buckled(from.is_passenger_buckled());
  }
  if (from.front_left_tire_press() != 0) {
    set_front_left_tire_press(from.front_left_tire_press());
  }
  if (from.front_right_tire_press() != 0) {
    set_front_right_tire_press(from.front_right_tire_press());
  }
  if (from.rear_left_tire_press() != 0) {
    set_rear_left_tire_press(from.rear_left_tire_press());
  }
  if (from.rear_right_tire_press() != 0) {
    set_rear_right_tire_press(from.rear_right_tire_press());
  }
  if (from.car_driving_mode() != 0) {
    set_car_driving_mode(from.car_driving_mode());
  }
}

void Safety::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Safety::CopyFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Safety::IsInitialized() const {
  return true;
}

void Safety::Swap(Safety* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Safety::InternalSwap(Safety* other) {
  using std::swap;
  swap(emergency_button_, other->emergency_button_);
  swap(is_driver_car_door_close_, other->is_driver_car_door_close_);
  swap(is_driver_buckled_, other->is_driver_buckled_);
  swap(has_error_, other->has_error_);
  swap(is_motor_invertor_fault_, other->is_motor_invertor_fault_);
  swap(is_system_fault_, other->is_system_fault_);
  swap(is_power_battery_fault_, other->is_power_battery_fault_);
  swap(is_motor_invertor_over_temperature_, other->is_motor_invertor_over_temperature_);
  swap(is_small_battery_charge_discharge_fault_, other->is_small_battery_charge_discharge_fault_);
  swap(driving_mode_, other->driving_mode_);
  swap(is_passenger_door_open_, other->is_passenger_door_open_);
  swap(is_rearleft_door_open_, other->is_rearleft_door_open_);
  swap(is_rearright_door_open_, other->is_rearright_door_open_);
  swap(is_hood_open_, other->is_hood_open_);
  swap(is_trunk_open_, other->is_trunk_open_);
  swap(is_passenger_detected_, other->is_passenger_detected_);
  swap(is_passenger_airbag_enabled_, other->is_passenger_airbag_enabled_);
  swap(is_passenger_buckled_, other->is_passenger_buckled_);
  swap(front_left_tire_press_, other->front_left_tire_press_);
  swap(front_right_tire_press_, other->front_right_tire_press_);
  swap(rear_left_tire_press_, other->rear_left_tire_press_);
  swap(rear_right_tire_press_, other->rear_right_tire_press_);
  swap(car_driving_mode_, other->car_driving_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Safety::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasicInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicInfo::kIsAutoModeFieldNumber;
const int BasicInfo::kPowerStateFieldNumber;
const int BasicInfo::kIsAirBagDeployedFieldNumber;
const int BasicInfo::kOdoMeterFieldNumber;
const int BasicInfo::kDriveRangeFieldNumber;
const int BasicInfo::kIsSystemErrorFieldNumber;
const int BasicInfo::kIsHumanInterruptFieldNumber;
const int BasicInfo::kAccOnButtonFieldNumber;
const int BasicInfo::kAccOffButtonFieldNumber;
const int BasicInfo::kAccResButtonFieldNumber;
const int BasicInfo::kAccCancelButtonFieldNumber;
const int BasicInfo::kAccOnOffButtonFieldNumber;
const int BasicInfo::kAccResCancelButtonFieldNumber;
const int BasicInfo::kAccIncSpdButtonFieldNumber;
const int BasicInfo::kAccDecSpdButtonFieldNumber;
const int BasicInfo::kAccIncGapButtonFieldNumber;
const int BasicInfo::kAccDecGapButtonFieldNumber;
const int BasicInfo::kLkaButtonFieldNumber;
const int BasicInfo::kCanbusFaultFieldNumber;
const int BasicInfo::kLatitudeFieldNumber;
const int BasicInfo::kLongitudeFieldNumber;
const int BasicInfo::kGpsValidFieldNumber;
const int BasicInfo::kYearFieldNumber;
const int BasicInfo::kMonthFieldNumber;
const int BasicInfo::kDayFieldNumber;
const int BasicInfo::kHoursFieldNumber;
const int BasicInfo::kMinutesFieldNumber;
const int BasicInfo::kSecondsFieldNumber;
const int BasicInfo::kCompassDirectionFieldNumber;
const int BasicInfo::kPdopFieldNumber;
const int BasicInfo::kIsGpsFaultFieldNumber;
const int BasicInfo::kIsInferredFieldNumber;
const int BasicInfo::kAltitudeFieldNumber;
const int BasicInfo::kHeadingFieldNumber;
const int BasicInfo::kHdopFieldNumber;
const int BasicInfo::kVdopFieldNumber;
const int BasicInfo::kQualityFieldNumber;
const int BasicInfo::kNumSatellitesFieldNumber;
const int BasicInfo::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicInfo::BasicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_BasicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.BasicInfo)
}
BasicInfo::BasicInfo(const BasicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&power_state_, &from.power_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_speed_) -
    reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.BasicInfo)
}

void BasicInfo::SharedCtor() {
  ::memset(&power_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_speed_) -
      reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:apollo.canbus.BasicInfo)
  SharedDtor();
}

void BasicInfo::SharedDtor() {
}

void BasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasicInfo::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicInfo& BasicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::scc_info_BasicInfo.base);
  return *internal_default_instance();
}


void BasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&power_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_speed_) -
      reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
  _internal_metadata_.Clear();
}

bool BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.BasicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_auto_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.BasicInfo.Type power_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_state(static_cast< ::apollo::canbus::BasicInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_air_bag_deployed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_air_bag_deployed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double odo_meter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odo_meter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double drive_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drive_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_system_error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_human_interrupt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_human_interrupt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_on_button = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_off_button = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_off_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_res_button = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_cancel_button = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_cancel_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_on_off_button = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_off_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_res_cancel_button = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_cancel_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_inc_spd_button = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_spd_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_dec_spd_button = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_spd_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_inc_gap_button = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_gap_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acc_dec_gap_button = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_gap_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lka_button = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lka_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canbus_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gps_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 year = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 month = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hours = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minutes = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seconds = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double compass_direction = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pdop = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_gps_fault = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_inferred = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hdop = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vdop = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.BasicInfo.GpsQuality quality = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_quality(static_cast< ::apollo::canbus::BasicInfo_GpsQuality >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_satellites = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gps_speed = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.BasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.BasicInfo)
  return false;
#undef DO_
}

void BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_auto_mode = 1;
  if (this->is_auto_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_auto_mode(), output);
  }

  // .apollo.canbus.BasicInfo.Type power_state = 2;
  if (this->power_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->power_state(), output);
  }

  // bool is_air_bag_deployed = 3;
  if (this->is_air_bag_deployed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_air_bag_deployed(), output);
  }

  // double odo_meter = 4;
  if (this->odo_meter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odo_meter(), output);
  }

  // double drive_range = 5;
  if (this->drive_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->drive_range(), output);
  }

  // bool is_system_error = 6;
  if (this->is_system_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_error(), output);
  }

  // bool is_human_interrupt = 7;
  if (this->is_human_interrupt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_human_interrupt(), output);
  }

  // bool acc_on_button = 8;
  if (this->acc_on_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->acc_on_button(), output);
  }

  // bool acc_off_button = 9;
  if (this->acc_off_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->acc_off_button(), output);
  }

  // bool acc_res_button = 10;
  if (this->acc_res_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->acc_res_button(), output);
  }

  // bool acc_cancel_button = 11;
  if (this->acc_cancel_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->acc_cancel_button(), output);
  }

  // bool acc_on_off_button = 12;
  if (this->acc_on_off_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->acc_on_off_button(), output);
  }

  // bool acc_res_cancel_button = 13;
  if (this->acc_res_cancel_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->acc_res_cancel_button(), output);
  }

  // bool acc_inc_spd_button = 14;
  if (this->acc_inc_spd_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->acc_inc_spd_button(), output);
  }

  // bool acc_dec_spd_button = 15;
  if (this->acc_dec_spd_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->acc_dec_spd_button(), output);
  }

  // bool acc_inc_gap_button = 16;
  if (this->acc_inc_gap_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->acc_inc_gap_button(), output);
  }

  // bool acc_dec_gap_button = 17;
  if (this->acc_dec_gap_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->acc_dec_gap_button(), output);
  }

  // bool lka_button = 18;
  if (this->lka_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lka_button(), output);
  }

  // bool canbus_fault = 19;
  if (this->canbus_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->canbus_fault(), output);
  }

  // double latitude = 20;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->latitude(), output);
  }

  // double longitude = 21;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->longitude(), output);
  }

  // bool gps_valid = 22;
  if (this->gps_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->gps_valid(), output);
  }

  // int32 year = 23;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->year(), output);
  }

  // int32 month = 24;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->month(), output);
  }

  // int32 day = 25;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->day(), output);
  }

  // int32 hours = 26;
  if (this->hours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hours(), output);
  }

  // int32 minutes = 27;
  if (this->minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->minutes(), output);
  }

  // int32 seconds = 28;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->seconds(), output);
  }

  // double compass_direction = 29;
  if (this->compass_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->compass_direction(), output);
  }

  // double pdop = 30;
  if (this->pdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->pdop(), output);
  }

  // bool is_gps_fault = 31;
  if (this->is_gps_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_gps_fault(), output);
  }

  // bool is_inferred = 32;
  if (this->is_inferred() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_inferred(), output);
  }

  // double altitude = 33;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->altitude(), output);
  }

  // double heading = 34;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->heading(), output);
  }

  // double hdop = 35;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->hdop(), output);
  }

  // double vdop = 36;
  if (this->vdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->vdop(), output);
  }

  // .apollo.canbus.BasicInfo.GpsQuality quality = 37;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->quality(), output);
  }

  // int32 num_satellites = 38;
  if (this->num_satellites() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->num_satellites(), output);
  }

  // double gps_speed = 39;
  if (this->gps_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->gps_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.BasicInfo)
}

::google::protobuf::uint8* BasicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_auto_mode = 1;
  if (this->is_auto_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_auto_mode(), target);
  }

  // .apollo.canbus.BasicInfo.Type power_state = 2;
  if (this->power_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->power_state(), target);
  }

  // bool is_air_bag_deployed = 3;
  if (this->is_air_bag_deployed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_air_bag_deployed(), target);
  }

  // double odo_meter = 4;
  if (this->odo_meter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odo_meter(), target);
  }

  // double drive_range = 5;
  if (this->drive_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->drive_range(), target);
  }

  // bool is_system_error = 6;
  if (this->is_system_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_error(), target);
  }

  // bool is_human_interrupt = 7;
  if (this->is_human_interrupt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_human_interrupt(), target);
  }

  // bool acc_on_button = 8;
  if (this->acc_on_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->acc_on_button(), target);
  }

  // bool acc_off_button = 9;
  if (this->acc_off_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->acc_off_button(), target);
  }

  // bool acc_res_button = 10;
  if (this->acc_res_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->acc_res_button(), target);
  }

  // bool acc_cancel_button = 11;
  if (this->acc_cancel_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->acc_cancel_button(), target);
  }

  // bool acc_on_off_button = 12;
  if (this->acc_on_off_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->acc_on_off_button(), target);
  }

  // bool acc_res_cancel_button = 13;
  if (this->acc_res_cancel_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->acc_res_cancel_button(), target);
  }

  // bool acc_inc_spd_button = 14;
  if (this->acc_inc_spd_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->acc_inc_spd_button(), target);
  }

  // bool acc_dec_spd_button = 15;
  if (this->acc_dec_spd_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->acc_dec_spd_button(), target);
  }

  // bool acc_inc_gap_button = 16;
  if (this->acc_inc_gap_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->acc_inc_gap_button(), target);
  }

  // bool acc_dec_gap_button = 17;
  if (this->acc_dec_gap_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->acc_dec_gap_button(), target);
  }

  // bool lka_button = 18;
  if (this->lka_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lka_button(), target);
  }

  // bool canbus_fault = 19;
  if (this->canbus_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->canbus_fault(), target);
  }

  // double latitude = 20;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->latitude(), target);
  }

  // double longitude = 21;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->longitude(), target);
  }

  // bool gps_valid = 22;
  if (this->gps_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->gps_valid(), target);
  }

  // int32 year = 23;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->year(), target);
  }

  // int32 month = 24;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->month(), target);
  }

  // int32 day = 25;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->day(), target);
  }

  // int32 hours = 26;
  if (this->hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hours(), target);
  }

  // int32 minutes = 27;
  if (this->minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->minutes(), target);
  }

  // int32 seconds = 28;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->seconds(), target);
  }

  // double compass_direction = 29;
  if (this->compass_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->compass_direction(), target);
  }

  // double pdop = 30;
  if (this->pdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->pdop(), target);
  }

  // bool is_gps_fault = 31;
  if (this->is_gps_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_gps_fault(), target);
  }

  // bool is_inferred = 32;
  if (this->is_inferred() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_inferred(), target);
  }

  // double altitude = 33;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->altitude(), target);
  }

  // double heading = 34;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->heading(), target);
  }

  // double hdop = 35;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->hdop(), target);
  }

  // double vdop = 36;
  if (this->vdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->vdop(), target);
  }

  // .apollo.canbus.BasicInfo.GpsQuality quality = 37;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->quality(), target);
  }

  // int32 num_satellites = 38;
  if (this->num_satellites() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->num_satellites(), target);
  }

  // double gps_speed = 39;
  if (this->gps_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->gps_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.BasicInfo)
  return target;
}

size_t BasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.BasicInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.canbus.BasicInfo.Type power_state = 2;
  if (this->power_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_state());
  }

  // bool is_auto_mode = 1;
  if (this->is_auto_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool is_air_bag_deployed = 3;
  if (this->is_air_bag_deployed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_system_error = 6;
  if (this->is_system_error() != 0) {
    total_size += 1 + 1;
  }

  // bool is_human_interrupt = 7;
  if (this->is_human_interrupt() != 0) {
    total_size += 1 + 1;
  }

  // double odo_meter = 4;
  if (this->odo_meter() != 0) {
    total_size += 1 + 8;
  }

  // double drive_range = 5;
  if (this->drive_range() != 0) {
    total_size += 1 + 8;
  }

  // bool acc_on_button = 8;
  if (this->acc_on_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_off_button = 9;
  if (this->acc_off_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_res_button = 10;
  if (this->acc_res_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_cancel_button = 11;
  if (this->acc_cancel_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_on_off_button = 12;
  if (this->acc_on_off_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_res_cancel_button = 13;
  if (this->acc_res_cancel_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_inc_spd_button = 14;
  if (this->acc_inc_spd_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_dec_spd_button = 15;
  if (this->acc_dec_spd_button() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_inc_gap_button = 16;
  if (this->acc_inc_gap_button() != 0) {
    total_size += 2 + 1;
  }

  // bool acc_dec_gap_button = 17;
  if (this->acc_dec_gap_button() != 0) {
    total_size += 2 + 1;
  }

  // bool lka_button = 18;
  if (this->lka_button() != 0) {
    total_size += 2 + 1;
  }

  // bool canbus_fault = 19;
  if (this->canbus_fault() != 0) {
    total_size += 2 + 1;
  }

  // int32 year = 23;
  if (this->year() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // double latitude = 20;
  if (this->latitude() != 0) {
    total_size += 2 + 8;
  }

  // double longitude = 21;
  if (this->longitude() != 0) {
    total_size += 2 + 8;
  }

  // int32 month = 24;
  if (this->month() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());
  }

  // int32 day = 25;
  if (this->day() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());
  }

  // int32 hours = 26;
  if (this->hours() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hours());
  }

  // int32 minutes = 27;
  if (this->minutes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minutes());
  }

  // int32 seconds = 28;
  if (this->seconds() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  // bool gps_valid = 22;
  if (this->gps_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool is_gps_fault = 31;
  if (this->is_gps_fault() != 0) {
    total_size += 2 + 1;
  }

  // bool is_inferred = 32;
  if (this->is_inferred() != 0) {
    total_size += 2 + 1;
  }

  // double compass_direction = 29;
  if (this->compass_direction() != 0) {
    total_size += 2 + 8;
  }

  // double pdop = 30;
  if (this->pdop() != 0) {
    total_size += 2 + 8;
  }

  // double altitude = 33;
  if (this->altitude() != 0) {
    total_size += 2 + 8;
  }

  // double heading = 34;
  if (this->heading() != 0) {
    total_size += 2 + 8;
  }

  // double hdop = 35;
  if (this->hdop() != 0) {
    total_size += 2 + 8;
  }

  // double vdop = 36;
  if (this->vdop() != 0) {
    total_size += 2 + 8;
  }

  // .apollo.canbus.BasicInfo.GpsQuality quality = 37;
  if (this->quality() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
  }

  // int32 num_satellites = 38;
  if (this->num_satellites() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_satellites());
  }

  // double gps_speed = 39;
  if (this->gps_speed() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.BasicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.BasicInfo)
    MergeFrom(*source);
  }
}

void BasicInfo::MergeFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.power_state() != 0) {
    set_power_state(from.power_state());
  }
  if (from.is_auto_mode() != 0) {
    set_is_auto_mode(from.is_auto_mode());
  }
  if (from.is_air_bag_deployed() != 0) {
    set_is_air_bag_deployed(from.is_air_bag_deployed());
  }
  if (from.is_system_error() != 0) {
    set_is_system_error(from.is_system_error());
  }
  if (from.is_human_interrupt() != 0) {
    set_is_human_interrupt(from.is_human_interrupt());
  }
  if (from.odo_meter() != 0) {
    set_odo_meter(from.odo_meter());
  }
  if (from.drive_range() != 0) {
    set_drive_range(from.drive_range());
  }
  if (from.acc_on_button() != 0) {
    set_acc_on_button(from.acc_on_button());
  }
  if (from.acc_off_button() != 0) {
    set_acc_off_button(from.acc_off_button());
  }
  if (from.acc_res_button() != 0) {
    set_acc_res_button(from.acc_res_button());
  }
  if (from.acc_cancel_button() != 0) {
    set_acc_cancel_button(from.acc_cancel_button());
  }
  if (from.acc_on_off_button() != 0) {
    set_acc_on_off_button(from.acc_on_off_button());
  }
  if (from.acc_res_cancel_button() != 0) {
    set_acc_res_cancel_button(from.acc_res_cancel_button());
  }
  if (from.acc_inc_spd_button() != 0) {
    set_acc_inc_spd_button(from.acc_inc_spd_button());
  }
  if (from.acc_dec_spd_button() != 0) {
    set_acc_dec_spd_button(from.acc_dec_spd_button());
  }
  if (from.acc_inc_gap_button() != 0) {
    set_acc_inc_gap_button(from.acc_inc_gap_button());
  }
  if (from.acc_dec_gap_button() != 0) {
    set_acc_dec_gap_button(from.acc_dec_gap_button());
  }
  if (from.lka_button() != 0) {
    set_lka_button(from.lka_button());
  }
  if (from.canbus_fault() != 0) {
    set_canbus_fault(from.canbus_fault());
  }
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hours() != 0) {
    set_hours(from.hours());
  }
  if (from.minutes() != 0) {
    set_minutes(from.minutes());
  }
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
  if (from.gps_valid() != 0) {
    set_gps_valid(from.gps_valid());
  }
  if (from.is_gps_fault() != 0) {
    set_is_gps_fault(from.is_gps_fault());
  }
  if (from.is_inferred() != 0) {
    set_is_inferred(from.is_inferred());
  }
  if (from.compass_direction() != 0) {
    set_compass_direction(from.compass_direction());
  }
  if (from.pdop() != 0) {
    set_pdop(from.pdop());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.vdop() != 0) {
    set_vdop(from.vdop());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.num_satellites() != 0) {
    set_num_satellites(from.num_satellites());
  }
  if (from.gps_speed() != 0) {
    set_gps_speed(from.gps_speed());
  }
}

void BasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {
  return true;
}

void BasicInfo::Swap(BasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicInfo::InternalSwap(BasicInfo* other) {
  using std::swap;
  swap(power_state_, other->power_state_);
  swap(is_auto_mode_, other->is_auto_mode_);
  swap(is_air_bag_deployed_, other->is_air_bag_deployed_);
  swap(is_system_error_, other->is_system_error_);
  swap(is_human_interrupt_, other->is_human_interrupt_);
  swap(odo_meter_, other->odo_meter_);
  swap(drive_range_, other->drive_range_);
  swap(acc_on_button_, other->acc_on_button_);
  swap(acc_off_button_, other->acc_off_button_);
  swap(acc_res_button_, other->acc_res_button_);
  swap(acc_cancel_button_, other->acc_cancel_button_);
  swap(acc_on_off_button_, other->acc_on_off_button_);
  swap(acc_res_cancel_button_, other->acc_res_cancel_button_);
  swap(acc_inc_spd_button_, other->acc_inc_spd_button_);
  swap(acc_dec_spd_button_, other->acc_dec_spd_button_);
  swap(acc_inc_gap_button_, other->acc_inc_gap_button_);
  swap(acc_dec_gap_button_, other->acc_dec_gap_button_);
  swap(lka_button_, other->lka_button_);
  swap(canbus_fault_, other->canbus_fault_);
  swap(year_, other->year_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
  swap(gps_valid_, other->gps_valid_);
  swap(is_gps_fault_, other->is_gps_fault_);
  swap(is_inferred_, other->is_inferred_);
  swap(compass_direction_, other->compass_direction_);
  swap(pdop_, other->pdop_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(quality_, other->quality_);
  swap(num_satellites_, other->num_satellites_);
  swap(gps_speed_, other->gps_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasicInfo::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::ChassisDetail* Arena::CreateMaybeMessage< ::apollo::canbus::ChassisDetail >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::ChassisDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::CheckResponseSignal* Arena::CreateMaybeMessage< ::apollo::canbus::CheckResponseSignal >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::CheckResponseSignal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Battery* Arena::CreateMaybeMessage< ::apollo::canbus::Battery >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Battery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Light* Arena::CreateMaybeMessage< ::apollo::canbus::Light >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Light >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Eps* Arena::CreateMaybeMessage< ::apollo::canbus::Eps >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Eps >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::VehicleSpd* Arena::CreateMaybeMessage< ::apollo::canbus::VehicleSpd >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::VehicleSpd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Deceleration* Arena::CreateMaybeMessage< ::apollo::canbus::Deceleration >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Deceleration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake* Arena::CreateMaybeMessage< ::apollo::canbus::Brake >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Epb* Arena::CreateMaybeMessage< ::apollo::canbus::Epb >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Epb >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Gas* Arena::CreateMaybeMessage< ::apollo::canbus::Gas >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gas >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Esp* Arena::CreateMaybeMessage< ::apollo::canbus::Esp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Esp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Ems* Arena::CreateMaybeMessage< ::apollo::canbus::Ems >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ems >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Gear* Arena::CreateMaybeMessage< ::apollo::canbus::Gear >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gear >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Safety* Arena::CreateMaybeMessage< ::apollo::canbus::Safety >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Safety >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::BasicInfo* Arena::CreateMaybeMessage< ::apollo::canbus::BasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::BasicInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
