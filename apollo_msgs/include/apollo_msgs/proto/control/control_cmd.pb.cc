// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/control_cmd.proto

#include "apollo_msgs/proto/control/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatencyStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimpleLateralDebug;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimpleLongitudinalDebug;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InputDebug;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Debug;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PadMessage;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto
namespace apollo {
namespace control {
class LatencyStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats>
      _instance;
} _LatencyStats_default_instance_;
class ControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlCommand>
      _instance;
} _ControlCommand_default_instance_;
class SimpleLongitudinalDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimpleLongitudinalDebug>
      _instance;
} _SimpleLongitudinalDebug_default_instance_;
class SimpleLateralDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimpleLateralDebug>
      _instance;
} _SimpleLateralDebug_default_instance_;
class InputDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputDebug>
      _instance;
} _InputDebug_default_instance_;
class DebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debug>
      _instance;
} _Debug_default_instance_;
}  // namespace control
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto {
static void InitDefaultsLatencyStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LatencyStats_default_instance_;
    new (ptr) ::apollo::control::LatencyStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LatencyStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatencyStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatencyStats}, {}};

static void InitDefaultsControlCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_ControlCommand_default_instance_;
    new (ptr) ::apollo::control::ControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::ControlCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ControlCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsControlCommand}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::scc_info_Header.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_Debug.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto::scc_info_Signal.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_LatencyStats.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto::scc_info_PadMessage.base,}};

static void InitDefaultsSimpleLongitudinalDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_SimpleLongitudinalDebug_default_instance_;
    new (ptr) ::apollo::control::SimpleLongitudinalDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::SimpleLongitudinalDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimpleLongitudinalDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimpleLongitudinalDebug}, {}};

static void InitDefaultsSimpleLateralDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_SimpleLateralDebug_default_instance_;
    new (ptr) ::apollo::control::SimpleLateralDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::SimpleLateralDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimpleLateralDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimpleLateralDebug}, {}};

static void InitDefaultsInputDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_InputDebug_default_instance_;
    new (ptr) ::apollo::control::InputDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::InputDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InputDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInputDebug}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_Debug_default_instance_;
    new (ptr) ::apollo::control::Debug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::Debug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Debug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDebug}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_SimpleLongitudinalDebug.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_SimpleLateralDebug.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_InputDebug.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimpleLongitudinalDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimpleLateralDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Debug.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatencyStats, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatencyStats, controller_time_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, steering_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, steering_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, parking_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, reset_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, engine_on_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, trajectory_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, latency_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, pad_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, left_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, right_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, low_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlCommand, turnsignal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, station_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, station_error_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_controller_input_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_speed_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_acceleration_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_cmd_closeloop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, calibration_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, throttle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, brake_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, is_full_stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_feedforward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_lateral_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_lateral_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_heading_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_heading_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steering_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::InputDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::InputDebug, localization_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::InputDebug, canbus_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::InputDebug, trajectory_header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::Debug, simple_lon_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::Debug, simple_lat_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::Debug, input_debug_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::control::LatencyStats)},
  { 7, -1, sizeof(::apollo::control::ControlCommand)},
  { 35, -1, sizeof(::apollo::control::SimpleLongitudinalDebug)},
  { 58, -1, sizeof(::apollo::control::SimpleLateralDebug)},
  { 79, -1, sizeof(::apollo::control::InputDebug)},
  { 87, -1, sizeof(::apollo::control::Debug)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_ControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_SimpleLongitudinalDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_SimpleLateralDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_InputDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_Debug_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/control/control_cmd.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+apollo_msgs/proto/control/control_cmd."
      "proto\022\016apollo.control\032&apollo_msgs/proto"
      "/canbus/chassis.proto\032%apollo_msgs/proto"
      "/common/header.proto\032\'apollo_msgs/proto/"
      "control/pad_msg.proto\"A\n\014LatencyStats\022\025\n"
      "\rtotal_time_ms\030\001 \001(\001\022\032\n\022controller_time_"
      "ms\030\002 \003(\001\"\274\005\n\016ControlCommand\022%\n\006header\030\001 "
      "\001(\0132\025.apollo.common.Header\022\020\n\010throttle\030\003"
      " \001(\001\022\r\n\005brake\030\004 \001(\001\022\025\n\rsteering_rate\030\006 \001"
      "(\001\022\027\n\017steering_target\030\007 \001(\001\022\025\n\rparking_b"
      "rake\030\010 \001(\010\022\r\n\005speed\030\t \001(\001\022\024\n\014acceleratio"
      "n\030\n \001(\001\022\023\n\013reset_model\030\020 \001(\010\022\025\n\rengine_o"
      "n_off\030\021 \001(\010\022\033\n\023trajectory_fraction\030\022 \001(\001"
      "\0228\n\014driving_mode\030\023 \001(\0162\".apollo.canbus.C"
      "hassis.DrivingMode\022:\n\rgear_location\030\024 \001("
      "\0162#.apollo.canbus.Chassis.GearPosition\022$"
      "\n\005debug\030\026 \001(\0132\025.apollo.control.Debug\022%\n\006"
      "signal\030\027 \001(\0132\025.apollo.canbus.Signal\0223\n\rl"
      "atency_stats\030\030 \001(\0132\034.apollo.control.Late"
      "ncyStats\022+\n\007pad_msg\030\031 \001(\0132\032.apollo.contr"
      "ol.PadMessage\022\021\n\tleft_turn\030\r \001(\010\022\022\n\nrigh"
      "t_turn\030\016 \001(\010\022\021\n\thigh_beam\030\013 \001(\010\022\020\n\010low_b"
      "eam\030\014 \001(\010\022\014\n\004horn\030\017 \001(\010\022.\n\nturnsignal\030\025 "
      "\001(\0162\032.apollo.control.TurnSignal\"\220\004\n\027Simp"
      "leLongitudinalDebug\022\031\n\021station_reference"
      "\030\001 \001(\001\022\025\n\rstation_error\030\002 \001(\001\022\035\n\025station"
      "_error_limited\030\003 \001(\001\022\035\n\025preview_station_"
      "error\030\004 \001(\001\022\027\n\017speed_reference\030\005 \001(\001\022\023\n\013"
      "speed_error\030\006 \001(\001\022&\n\036speed_controller_in"
      "put_limited\030\007 \001(\001\022\037\n\027preview_speed_refer"
      "ence\030\010 \001(\001\022\033\n\023preview_speed_error\030\t \001(\001\022"
      "&\n\036preview_acceleration_reference\030\n \001(\001\022"
      "\"\n\032acceleration_cmd_closeloop\030\013 \001(\001\022\030\n\020a"
      "cceleration_cmd\030\014 \001(\001\022\033\n\023acceleration_lo"
      "okup\030\r \001(\001\022\024\n\014speed_lookup\030\016 \001(\001\022\031\n\021cali"
      "bration_value\030\017 \001(\001\022\024\n\014throttle_cmd\030\020 \001("
      "\001\022\021\n\tbrake_cmd\030\021 \001(\001\022\024\n\014is_full_stop\030\022 \001"
      "(\010\"\347\003\n\022SimpleLateralDebug\022\025\n\rlateral_err"
      "or\030\001 \001(\001\022\023\n\013ref_heading\030\002 \001(\001\022\017\n\007heading"
      "\030\003 \001(\001\022\025\n\rheading_error\030\004 \001(\001\022\032\n\022heading"
      "_error_rate\030\005 \001(\001\022\032\n\022lateral_error_rate\030"
      "\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013steer_angle\030"
      "\010 \001(\001\022\037\n\027steer_angle_feedforward\030\t \001(\001\022("
      "\n steer_angle_lateral_contribution\030\n \001(\001"
      "\022-\n%steer_angle_lateral_rate_contributio"
      "n\030\013 \001(\001\022(\n steer_angle_heading_contribut"
      "ion\030\014 \001(\001\022-\n%steer_angle_heading_rate_co"
      "ntribution\030\r \001(\001\022\034\n\024steer_angle_feedback"
      "\030\016 \001(\001\022\031\n\021steering_position\030\017 \001(\001\022\021\n\tref"
      "_speed\030\020 \001(\001\"\240\001\n\nInputDebug\0222\n\023localizat"
      "ion_header\030\001 \001(\0132\025.apollo.common.Header\022"
      ",\n\rcanbus_header\030\002 \001(\0132\025.apollo.common.H"
      "eader\0220\n\021trajectory_header\030\003 \001(\0132\025.apoll"
      "o.common.Header\"\271\001\n\005Debug\022A\n\020simple_lon_"
      "debug\030\001 \001(\0132\'.apollo.control.SimpleLongi"
      "tudinalDebug\022<\n\020simple_lat_debug\030\002 \001(\0132\""
      ".apollo.control.SimpleLateralDebug\022/\n\013in"
      "put_debug\030\003 \001(\0132\032.apollo.control.InputDe"
      "bug*:\n\nTurnSignal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN"
      "_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/control_cmd.proto", &protobuf_RegisterTypes);
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto::AddDescriptors();
  ::protobuf_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto::AddDescriptors();
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto
namespace apollo {
namespace control {
const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_enum_descriptors[0];
}
bool TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kControllerTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_LatencyStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      controller_time_ms_(from.controller_time_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_time_ms_ = from.total_time_ms_;
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatencyStats)
}

void LatencyStats::SharedCtor() {
  total_time_ms_ = 0;
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.control.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStats& LatencyStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_LatencyStats.base);
  return *internal_default_instance();
}


void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_time_ms_.Clear();
  total_time_ms_ = 0;
  _internal_metadata_.Clear();
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LatencyStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double controller_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_controller_time_ms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_controller_time_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated double controller_time_ms = 2;
  if (this->controller_time_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _controller_time_ms_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->controller_time_ms().data(), this->controller_time_ms_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  if (this->controller_time_ms_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _controller_time_ms_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->controller_time_ms_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatencyStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double controller_time_ms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->controller_time_ms_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _controller_time_ms_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controller_time_ms_.MergeFrom(from.controller_time_ms_);
  if (from.total_time_ms() != 0) {
    set_total_time_ms(from.total_time_ms());
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  controller_time_ms_.InternalSwap(&other->controller_time_ms_);
  swap(total_time_ms_, other->total_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlCommand::InitAsDefaultInstance() {
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->debug_ = const_cast< ::apollo::control::Debug*>(
      ::apollo::control::Debug::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->signal_ = const_cast< ::apollo::canbus::Signal*>(
      ::apollo::canbus::Signal::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::apollo::control::LatencyStats*>(
      ::apollo::control::LatencyStats::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->pad_msg_ = const_cast< ::apollo::control::PadMessage*>(
      ::apollo::control::PadMessage::internal_default_instance());
}
void ControlCommand::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ControlCommand::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) {
    delete signal_;
  }
  signal_ = NULL;
}
void ControlCommand::clear_pad_msg() {
  if (GetArenaNoVirtual() == NULL && pad_msg_ != NULL) {
    delete pad_msg_;
  }
  pad_msg_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommand::kHeaderFieldNumber;
const int ControlCommand::kThrottleFieldNumber;
const int ControlCommand::kBrakeFieldNumber;
const int ControlCommand::kSteeringRateFieldNumber;
const int ControlCommand::kSteeringTargetFieldNumber;
const int ControlCommand::kParkingBrakeFieldNumber;
const int ControlCommand::kSpeedFieldNumber;
const int ControlCommand::kAccelerationFieldNumber;
const int ControlCommand::kResetModelFieldNumber;
const int ControlCommand::kEngineOnOffFieldNumber;
const int ControlCommand::kTrajectoryFractionFieldNumber;
const int ControlCommand::kDrivingModeFieldNumber;
const int ControlCommand::kGearLocationFieldNumber;
const int ControlCommand::kDebugFieldNumber;
const int ControlCommand::kSignalFieldNumber;
const int ControlCommand::kLatencyStatsFieldNumber;
const int ControlCommand::kPadMsgFieldNumber;
const int ControlCommand::kLeftTurnFieldNumber;
const int ControlCommand::kRightTurnFieldNumber;
const int ControlCommand::kHighBeamFieldNumber;
const int ControlCommand::kLowBeamFieldNumber;
const int ControlCommand::kHornFieldNumber;
const int ControlCommand::kTurnsignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommand::ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_ControlCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_debug()) {
    debug_ = new ::apollo::control::Debug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::apollo::canbus::Signal(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::apollo::control::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = NULL;
  }
  if (from.has_pad_msg()) {
    pad_msg_ = new ::apollo::control::PadMessage(*from.pad_msg_);
  } else {
    pad_msg_ = NULL;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnsignal_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(turnsignal_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlCommand)
}

void ControlCommand::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnsignal_) -
      reinterpret_cast<char*>(&header_)) + sizeof(turnsignal_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete pad_msg_;
}

void ControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlCommand& ControlCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_ControlCommand.base);
  return *internal_default_instance();
}


void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) {
    delete debug_;
  }
  debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) {
    delete signal_;
  }
  signal_ = NULL;
  if (GetArenaNoVirtual() == NULL && latency_stats_ != NULL) {
    delete latency_stats_;
  }
  latency_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && pad_msg_ != NULL) {
    delete pad_msg_;
  }
  pad_msg_ = NULL;
  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnsignal_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(turnsignal_));
  _internal_metadata_.Clear();
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.ControlCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_target = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool parking_brake = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool high_beam = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool low_beam = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool left_turn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_turn = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool horn = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reset_model = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool engine_on_off = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_on_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trajectory_fraction = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Chassis.DrivingMode driving_mode = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Chassis.GearPosition gear_location = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.TurnSignal turnsignal = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turnsignal(static_cast< ::apollo::control::TurnSignal >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.Debug debug = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Signal signal = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.LatencyStats latency_stats = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.PadMessage pad_msg = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pad_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // double throttle = 3;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle(), output);
  }

  // double brake = 4;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->brake(), output);
  }

  // double steering_rate = 6;
  if (this->steering_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_rate(), output);
  }

  // double steering_target = 7;
  if (this->steering_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->steering_target(), output);
  }

  // bool parking_brake = 8;
  if (this->parking_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->parking_brake(), output);
  }

  // double speed = 9;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed(), output);
  }

  // double acceleration = 10;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->acceleration(), output);
  }

  // bool high_beam = 11;
  if (this->high_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->high_beam(), output);
  }

  // bool low_beam = 12;
  if (this->low_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->low_beam(), output);
  }

  // bool left_turn = 13;
  if (this->left_turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->left_turn(), output);
  }

  // bool right_turn = 14;
  if (this->right_turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->right_turn(), output);
  }

  // bool horn = 15;
  if (this->horn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->horn(), output);
  }

  // bool reset_model = 16;
  if (this->reset_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->reset_model(), output);
  }

  // bool engine_on_off = 17;
  if (this->engine_on_off() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->engine_on_off(), output);
  }

  // double trajectory_fraction = 18;
  if (this->trajectory_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->trajectory_fraction(), output);
  }

  // .apollo.canbus.Chassis.DrivingMode driving_mode = 19;
  if (this->driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->driving_mode(), output);
  }

  // .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (this->gear_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->gear_location(), output);
  }

  // .apollo.control.TurnSignal turnsignal = 21;
  if (this->turnsignal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->turnsignal(), output);
  }

  // .apollo.control.Debug debug = 22;
  if (this->has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_debug(), output);
  }

  // .apollo.canbus.Signal signal = 23;
  if (this->has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_signal(), output);
  }

  // .apollo.control.LatencyStats latency_stats = 24;
  if (this->has_latency_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_latency_stats(), output);
  }

  // .apollo.control.PadMessage pad_msg = 25;
  if (this->has_pad_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_pad_msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // double throttle = 3;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle(), target);
  }

  // double brake = 4;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->brake(), target);
  }

  // double steering_rate = 6;
  if (this->steering_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_rate(), target);
  }

  // double steering_target = 7;
  if (this->steering_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->steering_target(), target);
  }

  // bool parking_brake = 8;
  if (this->parking_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->parking_brake(), target);
  }

  // double speed = 9;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed(), target);
  }

  // double acceleration = 10;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->acceleration(), target);
  }

  // bool high_beam = 11;
  if (this->high_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->high_beam(), target);
  }

  // bool low_beam = 12;
  if (this->low_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->low_beam(), target);
  }

  // bool left_turn = 13;
  if (this->left_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->left_turn(), target);
  }

  // bool right_turn = 14;
  if (this->right_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->right_turn(), target);
  }

  // bool horn = 15;
  if (this->horn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->horn(), target);
  }

  // bool reset_model = 16;
  if (this->reset_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->reset_model(), target);
  }

  // bool engine_on_off = 17;
  if (this->engine_on_off() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->engine_on_off(), target);
  }

  // double trajectory_fraction = 18;
  if (this->trajectory_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->trajectory_fraction(), target);
  }

  // .apollo.canbus.Chassis.DrivingMode driving_mode = 19;
  if (this->driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->driving_mode(), target);
  }

  // .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (this->gear_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->gear_location(), target);
  }

  // .apollo.control.TurnSignal turnsignal = 21;
  if (this->turnsignal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->turnsignal(), target);
  }

  // .apollo.control.Debug debug = 22;
  if (this->has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_debug(), deterministic, target);
  }

  // .apollo.canbus.Signal signal = 23;
  if (this->has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_signal(), deterministic, target);
  }

  // .apollo.control.LatencyStats latency_stats = 24;
  if (this->has_latency_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_latency_stats(), deterministic, target);
  }

  // .apollo.control.PadMessage pad_msg = 25;
  if (this->has_pad_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_pad_msg(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .apollo.control.Debug debug = 22;
  if (this->has_debug()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // .apollo.canbus.Signal signal = 23;
  if (this->has_signal()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signal_);
  }

  // .apollo.control.LatencyStats latency_stats = 24;
  if (this->has_latency_stats()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *latency_stats_);
  }

  // .apollo.control.PadMessage pad_msg = 25;
  if (this->has_pad_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pad_msg_);
  }

  // double throttle = 3;
  if (this->throttle() != 0) {
    total_size += 1 + 8;
  }

  // double brake = 4;
  if (this->brake() != 0) {
    total_size += 1 + 8;
  }

  // double steering_rate = 6;
  if (this->steering_rate() != 0) {
    total_size += 1 + 8;
  }

  // double steering_target = 7;
  if (this->steering_target() != 0) {
    total_size += 1 + 8;
  }

  // double speed = 9;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration = 10;
  if (this->acceleration() != 0) {
    total_size += 1 + 8;
  }

  // bool right_turn = 14;
  if (this->right_turn() != 0) {
    total_size += 1 + 1;
  }

  // bool high_beam = 11;
  if (this->high_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam = 12;
  if (this->low_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool horn = 15;
  if (this->horn() != 0) {
    total_size += 1 + 1;
  }

  // bool parking_brake = 8;
  if (this->parking_brake() != 0) {
    total_size += 1 + 1;
  }

  // bool reset_model = 16;
  if (this->reset_model() != 0) {
    total_size += 2 + 1;
  }

  // bool engine_on_off = 17;
  if (this->engine_on_off() != 0) {
    total_size += 2 + 1;
  }

  // bool left_turn = 13;
  if (this->left_turn() != 0) {
    total_size += 1 + 1;
  }

  // double trajectory_fraction = 18;
  if (this->trajectory_fraction() != 0) {
    total_size += 2 + 8;
  }

  // .apollo.canbus.Chassis.DrivingMode driving_mode = 19;
  if (this->driving_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
  }

  // .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (this->gear_location() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
  }

  // .apollo.control.TurnSignal turnsignal = 21;
  if (this->turnsignal() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turnsignal());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_debug()) {
    mutable_debug()->::apollo::control::Debug::MergeFrom(from.debug());
  }
  if (from.has_signal()) {
    mutable_signal()->::apollo::canbus::Signal::MergeFrom(from.signal());
  }
  if (from.has_latency_stats()) {
    mutable_latency_stats()->::apollo::control::LatencyStats::MergeFrom(from.latency_stats());
  }
  if (from.has_pad_msg()) {
    mutable_pad_msg()->::apollo::control::PadMessage::MergeFrom(from.pad_msg());
  }
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
  if (from.steering_rate() != 0) {
    set_steering_rate(from.steering_rate());
  }
  if (from.steering_target() != 0) {
    set_steering_target(from.steering_target());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
  if (from.right_turn() != 0) {
    set_right_turn(from.right_turn());
  }
  if (from.high_beam() != 0) {
    set_high_beam(from.high_beam());
  }
  if (from.low_beam() != 0) {
    set_low_beam(from.low_beam());
  }
  if (from.horn() != 0) {
    set_horn(from.horn());
  }
  if (from.parking_brake() != 0) {
    set_parking_brake(from.parking_brake());
  }
  if (from.reset_model() != 0) {
    set_reset_model(from.reset_model());
  }
  if (from.engine_on_off() != 0) {
    set_engine_on_off(from.engine_on_off());
  }
  if (from.left_turn() != 0) {
    set_left_turn(from.left_turn());
  }
  if (from.trajectory_fraction() != 0) {
    set_trajectory_fraction(from.trajectory_fraction());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.gear_location() != 0) {
    set_gear_location(from.gear_location());
  }
  if (from.turnsignal() != 0) {
    set_turnsignal(from.turnsignal());
  }
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(debug_, other->debug_);
  swap(signal_, other->signal_);
  swap(latency_stats_, other->latency_stats_);
  swap(pad_msg_, other->pad_msg_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(steering_rate_, other->steering_rate_);
  swap(steering_target_, other->steering_target_);
  swap(speed_, other->speed_);
  swap(acceleration_, other->acceleration_);
  swap(right_turn_, other->right_turn_);
  swap(high_beam_, other->high_beam_);
  swap(low_beam_, other->low_beam_);
  swap(horn_, other->horn_);
  swap(parking_brake_, other->parking_brake_);
  swap(reset_model_, other->reset_model_);
  swap(engine_on_off_, other->engine_on_off_);
  swap(left_turn_, other->left_turn_);
  swap(trajectory_fraction_, other->trajectory_fraction_);
  swap(driving_mode_, other->driving_mode_);
  swap(gear_location_, other->gear_location_);
  swap(turnsignal_, other->turnsignal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimpleLongitudinalDebug::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleLongitudinalDebug::kStationReferenceFieldNumber;
const int SimpleLongitudinalDebug::kStationErrorFieldNumber;
const int SimpleLongitudinalDebug::kStationErrorLimitedFieldNumber;
const int SimpleLongitudinalDebug::kPreviewStationErrorFieldNumber;
const int SimpleLongitudinalDebug::kSpeedReferenceFieldNumber;
const int SimpleLongitudinalDebug::kSpeedErrorFieldNumber;
const int SimpleLongitudinalDebug::kSpeedControllerInputLimitedFieldNumber;
const int SimpleLongitudinalDebug::kPreviewSpeedReferenceFieldNumber;
const int SimpleLongitudinalDebug::kPreviewSpeedErrorFieldNumber;
const int SimpleLongitudinalDebug::kPreviewAccelerationReferenceFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationCmdCloseloopFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationCmdFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationLookupFieldNumber;
const int SimpleLongitudinalDebug::kSpeedLookupFieldNumber;
const int SimpleLongitudinalDebug::kCalibrationValueFieldNumber;
const int SimpleLongitudinalDebug::kThrottleCmdFieldNumber;
const int SimpleLongitudinalDebug::kBrakeCmdFieldNumber;
const int SimpleLongitudinalDebug::kIsFullStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleLongitudinalDebug::SimpleLongitudinalDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_SimpleLongitudinalDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLongitudinalDebug)
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&station_reference_, &from.station_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&station_reference_)) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLongitudinalDebug)
}

void SimpleLongitudinalDebug::SharedCtor() {
  ::memset(&station_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&station_reference_)) + sizeof(is_full_stop_));
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLongitudinalDebug)
  SharedDtor();
}

void SimpleLongitudinalDebug::SharedDtor() {
}

void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimpleLongitudinalDebug::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleLongitudinalDebug& SimpleLongitudinalDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_SimpleLongitudinalDebug.base);
  return *internal_default_instance();
}


void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLongitudinalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&station_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&station_reference_)) + sizeof(is_full_stop_));
  _internal_metadata_.Clear();
}

bool SimpleLongitudinalDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleLongitudinalDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double station_reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_error_limited = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_station_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_reference = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_controller_input_limited = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_speed_reference = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_speed_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_speed_error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_acceleration_reference = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_acceleration_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_cmd_closeloop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_closeloop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_cmd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_lookup = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_lookup = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double calibration_value = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calibration_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle_cmd = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_cmd = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_full_stop = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleLongitudinalDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleLongitudinalDebug)
  return false;
#undef DO_
}

void SimpleLongitudinalDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleLongitudinalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double station_reference = 1;
  if (this->station_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->station_reference(), output);
  }

  // double station_error = 2;
  if (this->station_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->station_error(), output);
  }

  // double station_error_limited = 3;
  if (this->station_error_limited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->station_error_limited(), output);
  }

  // double preview_station_error = 4;
  if (this->preview_station_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preview_station_error(), output);
  }

  // double speed_reference = 5;
  if (this->speed_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_reference(), output);
  }

  // double speed_error = 6;
  if (this->speed_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_error(), output);
  }

  // double speed_controller_input_limited = 7;
  if (this->speed_controller_input_limited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed_controller_input_limited(), output);
  }

  // double preview_speed_reference = 8;
  if (this->preview_speed_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->preview_speed_reference(), output);
  }

  // double preview_speed_error = 9;
  if (this->preview_speed_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->preview_speed_error(), output);
  }

  // double preview_acceleration_reference = 10;
  if (this->preview_acceleration_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->preview_acceleration_reference(), output);
  }

  // double acceleration_cmd_closeloop = 11;
  if (this->acceleration_cmd_closeloop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->acceleration_cmd_closeloop(), output);
  }

  // double acceleration_cmd = 12;
  if (this->acceleration_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->acceleration_cmd(), output);
  }

  // double acceleration_lookup = 13;
  if (this->acceleration_lookup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->acceleration_lookup(), output);
  }

  // double speed_lookup = 14;
  if (this->speed_lookup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->speed_lookup(), output);
  }

  // double calibration_value = 15;
  if (this->calibration_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->calibration_value(), output);
  }

  // double throttle_cmd = 16;
  if (this->throttle_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->throttle_cmd(), output);
  }

  // double brake_cmd = 17;
  if (this->brake_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->brake_cmd(), output);
  }

  // bool is_full_stop = 18;
  if (this->is_full_stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_full_stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleLongitudinalDebug)
}

::google::protobuf::uint8* SimpleLongitudinalDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLongitudinalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double station_reference = 1;
  if (this->station_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->station_reference(), target);
  }

  // double station_error = 2;
  if (this->station_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->station_error(), target);
  }

  // double station_error_limited = 3;
  if (this->station_error_limited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->station_error_limited(), target);
  }

  // double preview_station_error = 4;
  if (this->preview_station_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preview_station_error(), target);
  }

  // double speed_reference = 5;
  if (this->speed_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_reference(), target);
  }

  // double speed_error = 6;
  if (this->speed_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_error(), target);
  }

  // double speed_controller_input_limited = 7;
  if (this->speed_controller_input_limited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed_controller_input_limited(), target);
  }

  // double preview_speed_reference = 8;
  if (this->preview_speed_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->preview_speed_reference(), target);
  }

  // double preview_speed_error = 9;
  if (this->preview_speed_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->preview_speed_error(), target);
  }

  // double preview_acceleration_reference = 10;
  if (this->preview_acceleration_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->preview_acceleration_reference(), target);
  }

  // double acceleration_cmd_closeloop = 11;
  if (this->acceleration_cmd_closeloop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->acceleration_cmd_closeloop(), target);
  }

  // double acceleration_cmd = 12;
  if (this->acceleration_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->acceleration_cmd(), target);
  }

  // double acceleration_lookup = 13;
  if (this->acceleration_lookup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->acceleration_lookup(), target);
  }

  // double speed_lookup = 14;
  if (this->speed_lookup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->speed_lookup(), target);
  }

  // double calibration_value = 15;
  if (this->calibration_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->calibration_value(), target);
  }

  // double throttle_cmd = 16;
  if (this->throttle_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->throttle_cmd(), target);
  }

  // double brake_cmd = 17;
  if (this->brake_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->brake_cmd(), target);
  }

  // bool is_full_stop = 18;
  if (this->is_full_stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_full_stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLongitudinalDebug)
  return target;
}

size_t SimpleLongitudinalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLongitudinalDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double station_reference = 1;
  if (this->station_reference() != 0) {
    total_size += 1 + 8;
  }

  // double station_error = 2;
  if (this->station_error() != 0) {
    total_size += 1 + 8;
  }

  // double station_error_limited = 3;
  if (this->station_error_limited() != 0) {
    total_size += 1 + 8;
  }

  // double preview_station_error = 4;
  if (this->preview_station_error() != 0) {
    total_size += 1 + 8;
  }

  // double speed_reference = 5;
  if (this->speed_reference() != 0) {
    total_size += 1 + 8;
  }

  // double speed_error = 6;
  if (this->speed_error() != 0) {
    total_size += 1 + 8;
  }

  // double speed_controller_input_limited = 7;
  if (this->speed_controller_input_limited() != 0) {
    total_size += 1 + 8;
  }

  // double preview_speed_reference = 8;
  if (this->preview_speed_reference() != 0) {
    total_size += 1 + 8;
  }

  // double preview_speed_error = 9;
  if (this->preview_speed_error() != 0) {
    total_size += 1 + 8;
  }

  // double preview_acceleration_reference = 10;
  if (this->preview_acceleration_reference() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_cmd_closeloop = 11;
  if (this->acceleration_cmd_closeloop() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_cmd = 12;
  if (this->acceleration_cmd() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_lookup = 13;
  if (this->acceleration_lookup() != 0) {
    total_size += 1 + 8;
  }

  // double speed_lookup = 14;
  if (this->speed_lookup() != 0) {
    total_size += 1 + 8;
  }

  // double calibration_value = 15;
  if (this->calibration_value() != 0) {
    total_size += 1 + 8;
  }

  // double throttle_cmd = 16;
  if (this->throttle_cmd() != 0) {
    total_size += 2 + 8;
  }

  // double brake_cmd = 17;
  if (this->brake_cmd() != 0) {
    total_size += 2 + 8;
  }

  // bool is_full_stop = 18;
  if (this->is_full_stop() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLongitudinalDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLongitudinalDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleLongitudinalDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLongitudinalDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLongitudinalDebug)
    MergeFrom(*source);
  }
}

void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.station_reference() != 0) {
    set_station_reference(from.station_reference());
  }
  if (from.station_error() != 0) {
    set_station_error(from.station_error());
  }
  if (from.station_error_limited() != 0) {
    set_station_error_limited(from.station_error_limited());
  }
  if (from.preview_station_error() != 0) {
    set_preview_station_error(from.preview_station_error());
  }
  if (from.speed_reference() != 0) {
    set_speed_reference(from.speed_reference());
  }
  if (from.speed_error() != 0) {
    set_speed_error(from.speed_error());
  }
  if (from.speed_controller_input_limited() != 0) {
    set_speed_controller_input_limited(from.speed_controller_input_limited());
  }
  if (from.preview_speed_reference() != 0) {
    set_preview_speed_reference(from.preview_speed_reference());
  }
  if (from.preview_speed_error() != 0) {
    set_preview_speed_error(from.preview_speed_error());
  }
  if (from.preview_acceleration_reference() != 0) {
    set_preview_acceleration_reference(from.preview_acceleration_reference());
  }
  if (from.acceleration_cmd_closeloop() != 0) {
    set_acceleration_cmd_closeloop(from.acceleration_cmd_closeloop());
  }
  if (from.acceleration_cmd() != 0) {
    set_acceleration_cmd(from.acceleration_cmd());
  }
  if (from.acceleration_lookup() != 0) {
    set_acceleration_lookup(from.acceleration_lookup());
  }
  if (from.speed_lookup() != 0) {
    set_speed_lookup(from.speed_lookup());
  }
  if (from.calibration_value() != 0) {
    set_calibration_value(from.calibration_value());
  }
  if (from.throttle_cmd() != 0) {
    set_throttle_cmd(from.throttle_cmd());
  }
  if (from.brake_cmd() != 0) {
    set_brake_cmd(from.brake_cmd());
  }
  if (from.is_full_stop() != 0) {
    set_is_full_stop(from.is_full_stop());
  }
}

void SimpleLongitudinalDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalDebug::Swap(SimpleLongitudinalDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  using std::swap;
  swap(station_reference_, other->station_reference_);
  swap(station_error_, other->station_error_);
  swap(station_error_limited_, other->station_error_limited_);
  swap(preview_station_error_, other->preview_station_error_);
  swap(speed_reference_, other->speed_reference_);
  swap(speed_error_, other->speed_error_);
  swap(speed_controller_input_limited_, other->speed_controller_input_limited_);
  swap(preview_speed_reference_, other->preview_speed_reference_);
  swap(preview_speed_error_, other->preview_speed_error_);
  swap(preview_acceleration_reference_, other->preview_acceleration_reference_);
  swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  swap(acceleration_cmd_, other->acceleration_cmd_);
  swap(acceleration_lookup_, other->acceleration_lookup_);
  swap(speed_lookup_, other->speed_lookup_);
  swap(calibration_value_, other->calibration_value_);
  swap(throttle_cmd_, other->throttle_cmd_);
  swap(brake_cmd_, other->brake_cmd_);
  swap(is_full_stop_, other->is_full_stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimpleLateralDebug::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleLateralDebug::kLateralErrorFieldNumber;
const int SimpleLateralDebug::kRefHeadingFieldNumber;
const int SimpleLateralDebug::kHeadingFieldNumber;
const int SimpleLateralDebug::kHeadingErrorFieldNumber;
const int SimpleLateralDebug::kHeadingErrorRateFieldNumber;
const int SimpleLateralDebug::kLateralErrorRateFieldNumber;
const int SimpleLateralDebug::kCurvatureFieldNumber;
const int SimpleLateralDebug::kSteerAngleFieldNumber;
const int SimpleLateralDebug::kSteerAngleFeedforwardFieldNumber;
const int SimpleLateralDebug::kSteerAngleLateralContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleLateralRateContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleHeadingContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleHeadingRateContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleFeedbackFieldNumber;
const int SimpleLateralDebug::kSteeringPositionFieldNumber;
const int SimpleLateralDebug::kRefSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleLateralDebug::SimpleLateralDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_SimpleLateralDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLateralDebug)
}
SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_speed_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(ref_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLateralDebug)
}

void SimpleLateralDebug::SharedCtor() {
  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_speed_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(ref_speed_));
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLateralDebug)
  SharedDtor();
}

void SimpleLateralDebug::SharedDtor() {
}

void SimpleLateralDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimpleLateralDebug::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleLateralDebug& SimpleLateralDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_SimpleLateralDebug.base);
  return *internal_default_instance();
}


void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLateralDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_speed_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(ref_speed_));
  _internal_metadata_.Clear();
}

bool SimpleLateralDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleLateralDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lateral_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_error_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_error_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double curvature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_feedforward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_lateral_contribution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_lateral_rate_contribution = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_heading_contribution = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_heading_rate_contribution = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_feedback = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_position = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_speed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleLateralDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleLateralDebug)
  return false;
#undef DO_
}

void SimpleLateralDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleLateralDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lateral_error = 1;
  if (this->lateral_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_error(), output);
  }

  // double ref_heading = 2;
  if (this->ref_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_heading(), output);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // double heading_error = 4;
  if (this->heading_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // double heading_error_rate = 5;
  if (this->heading_error_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_error_rate(), output);
  }

  // double lateral_error_rate = 6;
  if (this->lateral_error_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lateral_error_rate(), output);
  }

  // double curvature = 7;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature(), output);
  }

  // double steer_angle = 8;
  if (this->steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->steer_angle(), output);
  }

  // double steer_angle_feedforward = 9;
  if (this->steer_angle_feedforward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_feedforward(), output);
  }

  // double steer_angle_lateral_contribution = 10;
  if (this->steer_angle_lateral_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->steer_angle_lateral_contribution(), output);
  }

  // double steer_angle_lateral_rate_contribution = 11;
  if (this->steer_angle_lateral_rate_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_lateral_rate_contribution(), output);
  }

  // double steer_angle_heading_contribution = 12;
  if (this->steer_angle_heading_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steer_angle_heading_contribution(), output);
  }

  // double steer_angle_heading_rate_contribution = 13;
  if (this->steer_angle_heading_rate_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_angle_heading_rate_contribution(), output);
  }

  // double steer_angle_feedback = 14;
  if (this->steer_angle_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steer_angle_feedback(), output);
  }

  // double steering_position = 15;
  if (this->steering_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steering_position(), output);
  }

  // double ref_speed = 16;
  if (this->ref_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ref_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleLateralDebug)
}

::google::protobuf::uint8* SimpleLateralDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLateralDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lateral_error = 1;
  if (this->lateral_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_error(), target);
  }

  // double ref_heading = 2;
  if (this->ref_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_heading(), target);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // double heading_error = 4;
  if (this->heading_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // double heading_error_rate = 5;
  if (this->heading_error_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_error_rate(), target);
  }

  // double lateral_error_rate = 6;
  if (this->lateral_error_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_error_rate(), target);
  }

  // double curvature = 7;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature(), target);
  }

  // double steer_angle = 8;
  if (this->steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->steer_angle(), target);
  }

  // double steer_angle_feedforward = 9;
  if (this->steer_angle_feedforward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_feedforward(), target);
  }

  // double steer_angle_lateral_contribution = 10;
  if (this->steer_angle_lateral_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->steer_angle_lateral_contribution(), target);
  }

  // double steer_angle_lateral_rate_contribution = 11;
  if (this->steer_angle_lateral_rate_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_lateral_rate_contribution(), target);
  }

  // double steer_angle_heading_contribution = 12;
  if (this->steer_angle_heading_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steer_angle_heading_contribution(), target);
  }

  // double steer_angle_heading_rate_contribution = 13;
  if (this->steer_angle_heading_rate_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_angle_heading_rate_contribution(), target);
  }

  // double steer_angle_feedback = 14;
  if (this->steer_angle_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steer_angle_feedback(), target);
  }

  // double steering_position = 15;
  if (this->steering_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steering_position(), target);
  }

  // double ref_speed = 16;
  if (this->ref_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ref_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLateralDebug)
  return target;
}

size_t SimpleLateralDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLateralDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double lateral_error = 1;
  if (this->lateral_error() != 0) {
    total_size += 1 + 8;
  }

  // double ref_heading = 2;
  if (this->ref_heading() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // double heading_error = 4;
  if (this->heading_error() != 0) {
    total_size += 1 + 8;
  }

  // double heading_error_rate = 5;
  if (this->heading_error_rate() != 0) {
    total_size += 1 + 8;
  }

  // double lateral_error_rate = 6;
  if (this->lateral_error_rate() != 0) {
    total_size += 1 + 8;
  }

  // double curvature = 7;
  if (this->curvature() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle = 8;
  if (this->steer_angle() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedforward = 9;
  if (this->steer_angle_feedforward() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_contribution = 10;
  if (this->steer_angle_lateral_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_rate_contribution = 11;
  if (this->steer_angle_lateral_rate_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_contribution = 12;
  if (this->steer_angle_heading_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_rate_contribution = 13;
  if (this->steer_angle_heading_rate_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedback = 14;
  if (this->steer_angle_feedback() != 0) {
    total_size += 1 + 8;
  }

  // double steering_position = 15;
  if (this->steering_position() != 0) {
    total_size += 1 + 8;
  }

  // double ref_speed = 16;
  if (this->ref_speed() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLateralDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLateralDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleLateralDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLateralDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLateralDebug)
    MergeFrom(*source);
  }
}

void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lateral_error() != 0) {
    set_lateral_error(from.lateral_error());
  }
  if (from.ref_heading() != 0) {
    set_ref_heading(from.ref_heading());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.heading_error() != 0) {
    set_heading_error(from.heading_error());
  }
  if (from.heading_error_rate() != 0) {
    set_heading_error_rate(from.heading_error_rate());
  }
  if (from.lateral_error_rate() != 0) {
    set_lateral_error_rate(from.lateral_error_rate());
  }
  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
  if (from.steer_angle() != 0) {
    set_steer_angle(from.steer_angle());
  }
  if (from.steer_angle_feedforward() != 0) {
    set_steer_angle_feedforward(from.steer_angle_feedforward());
  }
  if (from.steer_angle_lateral_contribution() != 0) {
    set_steer_angle_lateral_contribution(from.steer_angle_lateral_contribution());
  }
  if (from.steer_angle_lateral_rate_contribution() != 0) {
    set_steer_angle_lateral_rate_contribution(from.steer_angle_lateral_rate_contribution());
  }
  if (from.steer_angle_heading_contribution() != 0) {
    set_steer_angle_heading_contribution(from.steer_angle_heading_contribution());
  }
  if (from.steer_angle_heading_rate_contribution() != 0) {
    set_steer_angle_heading_rate_contribution(from.steer_angle_heading_rate_contribution());
  }
  if (from.steer_angle_feedback() != 0) {
    set_steer_angle_feedback(from.steer_angle_feedback());
  }
  if (from.steering_position() != 0) {
    set_steering_position(from.steering_position());
  }
  if (from.ref_speed() != 0) {
    set_ref_speed(from.ref_speed());
  }
}

void SimpleLateralDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {
  return true;
}

void SimpleLateralDebug::Swap(SimpleLateralDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  using std::swap;
  swap(lateral_error_, other->lateral_error_);
  swap(ref_heading_, other->ref_heading_);
  swap(heading_, other->heading_);
  swap(heading_error_, other->heading_error_);
  swap(heading_error_rate_, other->heading_error_rate_);
  swap(lateral_error_rate_, other->lateral_error_rate_);
  swap(curvature_, other->curvature_);
  swap(steer_angle_, other->steer_angle_);
  swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  swap(steer_angle_feedback_, other->steer_angle_feedback_);
  swap(steering_position_, other->steering_position_);
  swap(ref_speed_, other->ref_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimpleLateralDebug::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InputDebug::InitAsDefaultInstance() {
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->localization_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->canbus_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->trajectory_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void InputDebug::clear_localization_header() {
  if (GetArenaNoVirtual() == NULL && localization_header_ != NULL) {
    delete localization_header_;
  }
  localization_header_ = NULL;
}
void InputDebug::clear_canbus_header() {
  if (GetArenaNoVirtual() == NULL && canbus_header_ != NULL) {
    delete canbus_header_;
  }
  canbus_header_ = NULL;
}
void InputDebug::clear_trajectory_header() {
  if (GetArenaNoVirtual() == NULL && trajectory_header_ != NULL) {
    delete trajectory_header_;
  }
  trajectory_header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputDebug::kLocalizationHeaderFieldNumber;
const int InputDebug::kCanbusHeaderFieldNumber;
const int InputDebug::kTrajectoryHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDebug::InputDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_InputDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.InputDebug)
}
InputDebug::InputDebug(const InputDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localization_header()) {
    localization_header_ = new ::apollo::common::Header(*from.localization_header_);
  } else {
    localization_header_ = NULL;
  }
  if (from.has_canbus_header()) {
    canbus_header_ = new ::apollo::common::Header(*from.canbus_header_);
  } else {
    canbus_header_ = NULL;
  }
  if (from.has_trajectory_header()) {
    trajectory_header_ = new ::apollo::common::Header(*from.trajectory_header_);
  } else {
    trajectory_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.InputDebug)
}

void InputDebug::SharedCtor() {
  ::memset(&localization_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_header_) -
      reinterpret_cast<char*>(&localization_header_)) + sizeof(trajectory_header_));
}

InputDebug::~InputDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.InputDebug)
  SharedDtor();
}

void InputDebug::SharedDtor() {
  if (this != internal_default_instance()) delete localization_header_;
  if (this != internal_default_instance()) delete canbus_header_;
  if (this != internal_default_instance()) delete trajectory_header_;
}

void InputDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InputDebug::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputDebug& InputDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_InputDebug.base);
  return *internal_default_instance();
}


void InputDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.InputDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && localization_header_ != NULL) {
    delete localization_header_;
  }
  localization_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && canbus_header_ != NULL) {
    delete canbus_header_;
  }
  canbus_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_header_ != NULL) {
    delete trajectory_header_;
  }
  trajectory_header_ = NULL;
  _internal_metadata_.Clear();
}

bool InputDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.InputDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.common.Header localization_header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localization_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.Header canbus_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_canbus_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.common.Header trajectory_header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.InputDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.InputDebug)
  return false;
#undef DO_
}

void InputDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.InputDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header localization_header = 1;
  if (this->has_localization_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_localization_header(), output);
  }

  // .apollo.common.Header canbus_header = 2;
  if (this->has_canbus_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_canbus_header(), output);
  }

  // .apollo.common.Header trajectory_header = 3;
  if (this->has_trajectory_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_trajectory_header(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.InputDebug)
}

::google::protobuf::uint8* InputDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.InputDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header localization_header = 1;
  if (this->has_localization_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_localization_header(), deterministic, target);
  }

  // .apollo.common.Header canbus_header = 2;
  if (this->has_canbus_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_canbus_header(), deterministic, target);
  }

  // .apollo.common.Header trajectory_header = 3;
  if (this->has_trajectory_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_trajectory_header(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.InputDebug)
  return target;
}

size_t InputDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.InputDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.common.Header localization_header = 1;
  if (this->has_localization_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *localization_header_);
  }

  // .apollo.common.Header canbus_header = 2;
  if (this->has_canbus_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *canbus_header_);
  }

  // .apollo.common.Header trajectory_header = 3;
  if (this->has_trajectory_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const InputDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.InputDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.InputDebug)
    MergeFrom(*source);
  }
}

void InputDebug::MergeFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_localization_header()) {
    mutable_localization_header()->::apollo::common::Header::MergeFrom(from.localization_header());
  }
  if (from.has_canbus_header()) {
    mutable_canbus_header()->::apollo::common::Header::MergeFrom(from.canbus_header());
  }
  if (from.has_trajectory_header()) {
    mutable_trajectory_header()->::apollo::common::Header::MergeFrom(from.trajectory_header());
  }
}

void InputDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDebug::CopyFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDebug::IsInitialized() const {
  return true;
}

void InputDebug::Swap(InputDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDebug::InternalSwap(InputDebug* other) {
  using std::swap;
  swap(localization_header_, other->localization_header_);
  swap(canbus_header_, other->canbus_header_);
  swap(trajectory_header_, other->trajectory_header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InputDebug::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debug::InitAsDefaultInstance() {
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->simple_lon_debug_ = const_cast< ::apollo::control::SimpleLongitudinalDebug*>(
      ::apollo::control::SimpleLongitudinalDebug::internal_default_instance());
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->simple_lat_debug_ = const_cast< ::apollo::control::SimpleLateralDebug*>(
      ::apollo::control::SimpleLateralDebug::internal_default_instance());
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->input_debug_ = const_cast< ::apollo::control::InputDebug*>(
      ::apollo::control::InputDebug::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kSimpleLonDebugFieldNumber;
const int Debug::kSimpleLatDebugFieldNumber;
const int Debug::kInputDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_Debug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.Debug)
}
Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_simple_lon_debug()) {
    simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug(*from.simple_lon_debug_);
  } else {
    simple_lon_debug_ = NULL;
  }
  if (from.has_simple_lat_debug()) {
    simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug(*from.simple_lat_debug_);
  } else {
    simple_lat_debug_ = NULL;
  }
  if (from.has_input_debug()) {
    input_debug_ = new ::apollo::control::InputDebug(*from.input_debug_);
  } else {
    input_debug_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.Debug)
}

void Debug::SharedCtor() {
  ::memset(&simple_lon_debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_debug_) -
      reinterpret_cast<char*>(&simple_lon_debug_)) + sizeof(input_debug_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.control.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != internal_default_instance()) delete simple_lon_debug_;
  if (this != internal_default_instance()) delete simple_lat_debug_;
  if (this != internal_default_instance()) delete input_debug_;
}

void Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug& Debug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::scc_info_Debug.base);
  return *internal_default_instance();
}


void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && simple_lon_debug_ != NULL) {
    delete simple_lon_debug_;
  }
  simple_lon_debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && simple_lat_debug_ != NULL) {
    delete simple_lat_debug_;
  }
  simple_lat_debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_debug_ != NULL) {
    delete input_debug_;
  }
  input_debug_ = NULL;
  _internal_metadata_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.Debug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_simple_lon_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_simple_lat_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.InputDebug input_debug = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (this->has_simple_lon_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_simple_lon_debug(), output);
  }

  // .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (this->has_simple_lat_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_simple_lat_debug(), output);
  }

  // .apollo.control.InputDebug input_debug = 3;
  if (this->has_input_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_input_debug(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (this->has_simple_lon_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_simple_lon_debug(), deterministic, target);
  }

  // .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (this->has_simple_lat_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_simple_lat_debug(), deterministic, target);
  }

  // .apollo.control.InputDebug input_debug = 3;
  if (this->has_input_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_input_debug(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.Debug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (this->has_simple_lon_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *simple_lon_debug_);
  }

  // .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (this->has_simple_lat_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *simple_lat_debug_);
  }

  // .apollo.control.InputDebug input_debug = 3;
  if (this->has_input_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_debug_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_simple_lon_debug()) {
    mutable_simple_lon_debug()->::apollo::control::SimpleLongitudinalDebug::MergeFrom(from.simple_lon_debug());
  }
  if (from.has_simple_lat_debug()) {
    mutable_simple_lat_debug()->::apollo::control::SimpleLateralDebug::MergeFrom(from.simple_lat_debug());
  }
  if (from.has_input_debug()) {
    mutable_input_debug()->::apollo::control::InputDebug::MergeFrom(from.input_debug());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  using std::swap;
  swap(simple_lon_debug_, other->simple_lon_debug_);
  swap(simple_lat_debug_, other->simple_lat_debug_);
  swap(input_debug_, other->input_debug_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::LatencyStats* Arena::CreateMaybeMessage< ::apollo::control::LatencyStats >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LatencyStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::ControlCommand* Arena::CreateMaybeMessage< ::apollo::control::ControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::ControlCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::SimpleLongitudinalDebug* Arena::CreateMaybeMessage< ::apollo::control::SimpleLongitudinalDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::SimpleLongitudinalDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::SimpleLateralDebug* Arena::CreateMaybeMessage< ::apollo::control::SimpleLateralDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::SimpleLateralDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::InputDebug* Arena::CreateMaybeMessage< ::apollo::control::InputDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::InputDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::Debug* Arena::CreateMaybeMessage< ::apollo::control::Debug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::Debug >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
