// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/lon_controller_conf.proto

#ifndef PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto
#define PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/control/calibration_table.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto 

namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto
namespace apollo {
namespace control {
class FilterConf;
class FilterConfDefaultTypeInternal;
extern FilterConfDefaultTypeInternal _FilterConf_default_instance_;
class LonControllerConf;
class LonControllerConfDefaultTypeInternal;
extern LonControllerConfDefaultTypeInternal _LonControllerConf_default_instance_;
class PidConf;
class PidConfDefaultTypeInternal;
extern PidConfDefaultTypeInternal _PidConf_default_instance_;
}  // namespace control
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::control::FilterConf* Arena::CreateMaybeMessage<::apollo::control::FilterConf>(Arena*);
template<> ::apollo::control::LonControllerConf* Arena::CreateMaybeMessage<::apollo::control::LonControllerConf>(Arena*);
template<> ::apollo::control::PidConf* Arena::CreateMaybeMessage<::apollo::control::PidConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace control {

// ===================================================================

class PidConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.PidConf) */ {
 public:
  PidConf();
  virtual ~PidConf();

  PidConf(const PidConf& from);

  inline PidConf& operator=(const PidConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PidConf(PidConf&& from) noexcept
    : PidConf() {
    *this = ::std::move(from);
  }

  inline PidConf& operator=(PidConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PidConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PidConf* internal_default_instance() {
    return reinterpret_cast<const PidConf*>(
               &_PidConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PidConf* other);
  friend void swap(PidConf& a, PidConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PidConf* New() const final {
    return CreateMaybeMessage<PidConf>(NULL);
  }

  PidConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PidConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PidConf& from);
  void MergeFrom(const PidConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PidConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double integrator_saturation_level = 2;
  void clear_integrator_saturation_level();
  static const int kIntegratorSaturationLevelFieldNumber = 2;
  double integrator_saturation_level() const;
  void set_integrator_saturation_level(double value);

  // double kp = 3;
  void clear_kp();
  static const int kKpFieldNumber = 3;
  double kp() const;
  void set_kp(double value);

  // double ki = 4;
  void clear_ki();
  static const int kKiFieldNumber = 4;
  double ki() const;
  void set_ki(double value);

  // double kd = 5;
  void clear_kd();
  static const int kKdFieldNumber = 5;
  double kd() const;
  void set_kd(double value);

  // bool integrator_enable = 1;
  void clear_integrator_enable();
  static const int kIntegratorEnableFieldNumber = 1;
  bool integrator_enable() const;
  void set_integrator_enable(bool value);

  // @@protoc_insertion_point(class_scope:apollo.control.PidConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double integrator_saturation_level_;
  double kp_;
  double ki_;
  double kd_;
  bool integrator_enable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FilterConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.FilterConf) */ {
 public:
  FilterConf();
  virtual ~FilterConf();

  FilterConf(const FilterConf& from);

  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FilterConf(FilterConf&& from) noexcept
    : FilterConf() {
    *this = ::std::move(from);
  }

  inline FilterConf& operator=(FilterConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterConf* internal_default_instance() {
    return reinterpret_cast<const FilterConf*>(
               &_FilterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FilterConf* other);
  friend void swap(FilterConf& a, FilterConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilterConf* New() const final {
    return CreateMaybeMessage<FilterConf>(NULL);
  }

  FilterConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FilterConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FilterConf& from);
  void MergeFrom(const FilterConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cutoff_freq = 1;
  void clear_cutoff_freq();
  static const int kCutoffFreqFieldNumber = 1;
  ::google::protobuf::int32 cutoff_freq() const;
  void set_cutoff_freq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.control.FilterConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cutoff_freq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LonControllerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.LonControllerConf) */ {
 public:
  LonControllerConf();
  virtual ~LonControllerConf();

  LonControllerConf(const LonControllerConf& from);

  inline LonControllerConf& operator=(const LonControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LonControllerConf(LonControllerConf&& from) noexcept
    : LonControllerConf() {
    *this = ::std::move(from);
  }

  inline LonControllerConf& operator=(LonControllerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LonControllerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LonControllerConf* internal_default_instance() {
    return reinterpret_cast<const LonControllerConf*>(
               &_LonControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LonControllerConf* other);
  friend void swap(LonControllerConf& a, LonControllerConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LonControllerConf* New() const final {
    return CreateMaybeMessage<LonControllerConf>(NULL);
  }

  LonControllerConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LonControllerConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LonControllerConf& from);
  void MergeFrom(const LonControllerConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LonControllerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .apollo.control.PidConf station_pid_conf = 8;
  bool has_station_pid_conf() const;
  void clear_station_pid_conf();
  static const int kStationPidConfFieldNumber = 8;
  private:
  const ::apollo::control::PidConf& _internal_station_pid_conf() const;
  public:
  const ::apollo::control::PidConf& station_pid_conf() const;
  ::apollo::control::PidConf* release_station_pid_conf();
  ::apollo::control::PidConf* mutable_station_pid_conf();
  void set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf);

  // .apollo.control.PidConf low_speed_pid_conf = 9;
  bool has_low_speed_pid_conf() const;
  void clear_low_speed_pid_conf();
  static const int kLowSpeedPidConfFieldNumber = 9;
  private:
  const ::apollo::control::PidConf& _internal_low_speed_pid_conf() const;
  public:
  const ::apollo::control::PidConf& low_speed_pid_conf() const;
  ::apollo::control::PidConf* release_low_speed_pid_conf();
  ::apollo::control::PidConf* mutable_low_speed_pid_conf();
  void set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf);

  // .apollo.control.PidConf high_speed_pid_conf = 10;
  bool has_high_speed_pid_conf() const;
  void clear_high_speed_pid_conf();
  static const int kHighSpeedPidConfFieldNumber = 10;
  private:
  const ::apollo::control::PidConf& _internal_high_speed_pid_conf() const;
  public:
  const ::apollo::control::PidConf& high_speed_pid_conf() const;
  ::apollo::control::PidConf* release_high_speed_pid_conf();
  ::apollo::control::PidConf* mutable_high_speed_pid_conf();
  void set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf);

  // .apollo.control.FilterConf throttle_filter_conf = 12;
  bool has_throttle_filter_conf() const;
  void clear_throttle_filter_conf();
  static const int kThrottleFilterConfFieldNumber = 12;
  private:
  const ::apollo::control::FilterConf& _internal_throttle_filter_conf() const;
  public:
  const ::apollo::control::FilterConf& throttle_filter_conf() const;
  ::apollo::control::FilterConf* release_throttle_filter_conf();
  ::apollo::control::FilterConf* mutable_throttle_filter_conf();
  void set_allocated_throttle_filter_conf(::apollo::control::FilterConf* throttle_filter_conf);

  // .apollo.control.FilterConf brake_filter_conf = 13;
  bool has_brake_filter_conf() const;
  void clear_brake_filter_conf();
  static const int kBrakeFilterConfFieldNumber = 13;
  private:
  const ::apollo::control::FilterConf& _internal_brake_filter_conf() const;
  public:
  const ::apollo::control::FilterConf& brake_filter_conf() const;
  ::apollo::control::FilterConf* release_brake_filter_conf();
  ::apollo::control::FilterConf* mutable_brake_filter_conf();
  void set_allocated_brake_filter_conf(::apollo::control::FilterConf* brake_filter_conf);

  // .apollo.control.FilterConf acceleration_filter_conf = 14;
  bool has_acceleration_filter_conf() const;
  void clear_acceleration_filter_conf();
  static const int kAccelerationFilterConfFieldNumber = 14;
  private:
  const ::apollo::control::FilterConf& _internal_acceleration_filter_conf() const;
  public:
  const ::apollo::control::FilterConf& acceleration_filter_conf() const;
  ::apollo::control::FilterConf* release_acceleration_filter_conf();
  ::apollo::control::FilterConf* mutable_acceleration_filter_conf();
  void set_allocated_acceleration_filter_conf(::apollo::control::FilterConf* acceleration_filter_conf);

  // .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  bool has_calibration_table() const;
  void clear_calibration_table();
  static const int kCalibrationTableFieldNumber = 15;
  private:
  const ::apollo::control::calibrationtable::ControlCalibrationTable& _internal_calibration_table() const;
  public:
  const ::apollo::control::calibrationtable::ControlCalibrationTable& calibration_table() const;
  ::apollo::control::calibrationtable::ControlCalibrationTable* release_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* mutable_calibration_table();
  void set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table);

  // double ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  double ts() const;
  void set_ts(double value);

  // double brake_deadzone = 2;
  void clear_brake_deadzone();
  static const int kBrakeDeadzoneFieldNumber = 2;
  double brake_deadzone() const;
  void set_brake_deadzone(double value);

  // double throttle_deadzone = 3;
  void clear_throttle_deadzone();
  static const int kThrottleDeadzoneFieldNumber = 3;
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);

  // double speed_controller_input_limit = 4;
  void clear_speed_controller_input_limit();
  static const int kSpeedControllerInputLimitFieldNumber = 4;
  double speed_controller_input_limit() const;
  void set_speed_controller_input_limit(double value);

  // double station_error_limit = 5;
  void clear_station_error_limit();
  static const int kStationErrorLimitFieldNumber = 5;
  double station_error_limit() const;
  void set_station_error_limit(double value);

  // double preview_window = 6;
  void clear_preview_window();
  static const int kPreviewWindowFieldNumber = 6;
  double preview_window() const;
  void set_preview_window(double value);

  // double standstill_acceleration = 7;
  void clear_standstill_acceleration();
  static const int kStandstillAccelerationFieldNumber = 7;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  // double switch_speed = 11;
  void clear_switch_speed();
  static const int kSwitchSpeedFieldNumber = 11;
  double switch_speed() const;
  void set_switch_speed(double value);

  // @@protoc_insertion_point(class_scope:apollo.control.LonControllerConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::apollo::control::PidConf* station_pid_conf_;
  ::apollo::control::PidConf* low_speed_pid_conf_;
  ::apollo::control::PidConf* high_speed_pid_conf_;
  ::apollo::control::FilterConf* throttle_filter_conf_;
  ::apollo::control::FilterConf* brake_filter_conf_;
  ::apollo::control::FilterConf* acceleration_filter_conf_;
  ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table_;
  double ts_;
  double brake_deadzone_;
  double throttle_deadzone_;
  double speed_controller_input_limit_;
  double station_error_limit_;
  double preview_window_;
  double standstill_acceleration_;
  double switch_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PidConf

// bool integrator_enable = 1;
inline void PidConf::clear_integrator_enable() {
  integrator_enable_ = false;
}
inline bool PidConf::integrator_enable() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.integrator_enable)
  return integrator_enable_;
}
inline void PidConf::set_integrator_enable(bool value) {
  
  integrator_enable_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.integrator_enable)
}

// double integrator_saturation_level = 2;
inline void PidConf::clear_integrator_saturation_level() {
  integrator_saturation_level_ = 0;
}
inline double PidConf::integrator_saturation_level() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.integrator_saturation_level)
  return integrator_saturation_level_;
}
inline void PidConf::set_integrator_saturation_level(double value) {
  
  integrator_saturation_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.integrator_saturation_level)
}

// double kp = 3;
inline void PidConf::clear_kp() {
  kp_ = 0;
}
inline double PidConf::kp() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.kp)
  return kp_;
}
inline void PidConf::set_kp(double value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.kp)
}

// double ki = 4;
inline void PidConf::clear_ki() {
  ki_ = 0;
}
inline double PidConf::ki() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.ki)
  return ki_;
}
inline void PidConf::set_ki(double value) {
  
  ki_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.ki)
}

// double kd = 5;
inline void PidConf::clear_kd() {
  kd_ = 0;
}
inline double PidConf::kd() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.kd)
  return kd_;
}
inline void PidConf::set_kd(double value) {
  
  kd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.kd)
}

// -------------------------------------------------------------------

// FilterConf

// int32 cutoff_freq = 1;
inline void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
inline ::google::protobuf::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.FilterConf.cutoff_freq)
  return cutoff_freq_;
}
inline void FilterConf::set_cutoff_freq(::google::protobuf::int32 value) {
  
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.FilterConf.cutoff_freq)
}

// -------------------------------------------------------------------

// LonControllerConf

// double ts = 1;
inline void LonControllerConf::clear_ts() {
  ts_ = 0;
}
inline double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.ts)
  return ts_;
}
inline void LonControllerConf::set_ts(double value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.ts)
}

// double brake_deadzone = 2;
inline void LonControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
}
inline double LonControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_deadzone)
  return brake_deadzone_;
}
inline void LonControllerConf::set_brake_deadzone(double value) {
  
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.brake_deadzone)
}

// double throttle_deadzone = 3;
inline void LonControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
}
inline double LonControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
inline void LonControllerConf::set_throttle_deadzone(double value) {
  
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.throttle_deadzone)
}

// double speed_controller_input_limit = 4;
inline void LonControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
}
inline double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.speed_controller_input_limit)
  return speed_controller_input_limit_;
}
inline void LonControllerConf::set_speed_controller_input_limit(double value) {
  
  speed_controller_input_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.speed_controller_input_limit)
}

// double station_error_limit = 5;
inline void LonControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
}
inline double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_error_limit)
  return station_error_limit_;
}
inline void LonControllerConf::set_station_error_limit(double value) {
  
  station_error_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.station_error_limit)
}

// double preview_window = 6;
inline void LonControllerConf::clear_preview_window() {
  preview_window_ = 0;
}
inline double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.preview_window)
  return preview_window_;
}
inline void LonControllerConf::set_preview_window(double value) {
  
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.preview_window)
}

// double standstill_acceleration = 7;
inline void LonControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
}
inline double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
inline void LonControllerConf::set_standstill_acceleration(double value) {
  
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.standstill_acceleration)
}

// .apollo.control.PidConf station_pid_conf = 8;
inline bool LonControllerConf::has_station_pid_conf() const {
  return this != internal_default_instance() && station_pid_conf_ != NULL;
}
inline void LonControllerConf::clear_station_pid_conf() {
  if (GetArenaNoVirtual() == NULL && station_pid_conf_ != NULL) {
    delete station_pid_conf_;
  }
  station_pid_conf_ = NULL;
}
inline const ::apollo::control::PidConf& LonControllerConf::_internal_station_pid_conf() const {
  return *station_pid_conf_;
}
inline const ::apollo::control::PidConf& LonControllerConf::station_pid_conf() const {
  const ::apollo::control::PidConf* p = station_pid_conf_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_pid_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::PidConf*>(
      &::apollo::control::_PidConf_default_instance_);
}
inline ::apollo::control::PidConf* LonControllerConf::release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.station_pid_conf)
  
  ::apollo::control::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = NULL;
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_station_pid_conf() {
  
  if (station_pid_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::PidConf>(GetArenaNoVirtual());
    station_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_;
}
inline void LonControllerConf::set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete station_pid_conf_;
  }
  if (station_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      station_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, station_pid_conf, submessage_arena);
    }
    
  } else {
    
  }
  station_pid_conf_ = station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}

// .apollo.control.PidConf low_speed_pid_conf = 9;
inline bool LonControllerConf::has_low_speed_pid_conf() const {
  return this != internal_default_instance() && low_speed_pid_conf_ != NULL;
}
inline void LonControllerConf::clear_low_speed_pid_conf() {
  if (GetArenaNoVirtual() == NULL && low_speed_pid_conf_ != NULL) {
    delete low_speed_pid_conf_;
  }
  low_speed_pid_conf_ = NULL;
}
inline const ::apollo::control::PidConf& LonControllerConf::_internal_low_speed_pid_conf() const {
  return *low_speed_pid_conf_;
}
inline const ::apollo::control::PidConf& LonControllerConf::low_speed_pid_conf() const {
  const ::apollo::control::PidConf* p = low_speed_pid_conf_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.low_speed_pid_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::PidConf*>(
      &::apollo::control::_PidConf_default_instance_);
}
inline ::apollo::control::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.low_speed_pid_conf)
  
  ::apollo::control::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  
  if (low_speed_pid_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::PidConf>(GetArenaNoVirtual());
    low_speed_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_;
}
inline void LonControllerConf::set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete low_speed_pid_conf_;
  }
  if (low_speed_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      low_speed_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, low_speed_pid_conf, submessage_arena);
    }
    
  } else {
    
  }
  low_speed_pid_conf_ = low_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}

// .apollo.control.PidConf high_speed_pid_conf = 10;
inline bool LonControllerConf::has_high_speed_pid_conf() const {
  return this != internal_default_instance() && high_speed_pid_conf_ != NULL;
}
inline void LonControllerConf::clear_high_speed_pid_conf() {
  if (GetArenaNoVirtual() == NULL && high_speed_pid_conf_ != NULL) {
    delete high_speed_pid_conf_;
  }
  high_speed_pid_conf_ = NULL;
}
inline const ::apollo::control::PidConf& LonControllerConf::_internal_high_speed_pid_conf() const {
  return *high_speed_pid_conf_;
}
inline const ::apollo::control::PidConf& LonControllerConf::high_speed_pid_conf() const {
  const ::apollo::control::PidConf* p = high_speed_pid_conf_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.high_speed_pid_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::PidConf*>(
      &::apollo::control::_PidConf_default_instance_);
}
inline ::apollo::control::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.high_speed_pid_conf)
  
  ::apollo::control::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  
  if (high_speed_pid_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::PidConf>(GetArenaNoVirtual());
    high_speed_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_;
}
inline void LonControllerConf::set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete high_speed_pid_conf_;
  }
  if (high_speed_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      high_speed_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, high_speed_pid_conf, submessage_arena);
    }
    
  } else {
    
  }
  high_speed_pid_conf_ = high_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}

// double switch_speed = 11;
inline void LonControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
}
inline double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.switch_speed)
  return switch_speed_;
}
inline void LonControllerConf::set_switch_speed(double value) {
  
  switch_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.switch_speed)
}

// .apollo.control.FilterConf throttle_filter_conf = 12;
inline bool LonControllerConf::has_throttle_filter_conf() const {
  return this != internal_default_instance() && throttle_filter_conf_ != NULL;
}
inline void LonControllerConf::clear_throttle_filter_conf() {
  if (GetArenaNoVirtual() == NULL && throttle_filter_conf_ != NULL) {
    delete throttle_filter_conf_;
  }
  throttle_filter_conf_ = NULL;
}
inline const ::apollo::control::FilterConf& LonControllerConf::_internal_throttle_filter_conf() const {
  return *throttle_filter_conf_;
}
inline const ::apollo::control::FilterConf& LonControllerConf::throttle_filter_conf() const {
  const ::apollo::control::FilterConf* p = throttle_filter_conf_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_filter_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::FilterConf*>(
      &::apollo::control::_FilterConf_default_instance_);
}
inline ::apollo::control::FilterConf* LonControllerConf::release_throttle_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.throttle_filter_conf)
  
  ::apollo::control::FilterConf* temp = throttle_filter_conf_;
  throttle_filter_conf_ = NULL;
  return temp;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_throttle_filter_conf() {
  
  if (throttle_filter_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::FilterConf>(GetArenaNoVirtual());
    throttle_filter_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.throttle_filter_conf)
  return throttle_filter_conf_;
}
inline void LonControllerConf::set_allocated_throttle_filter_conf(::apollo::control::FilterConf* throttle_filter_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete throttle_filter_conf_;
  }
  if (throttle_filter_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      throttle_filter_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, throttle_filter_conf, submessage_arena);
    }
    
  } else {
    
  }
  throttle_filter_conf_ = throttle_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.throttle_filter_conf)
}

// .apollo.control.FilterConf brake_filter_conf = 13;
inline bool LonControllerConf::has_brake_filter_conf() const {
  return this != internal_default_instance() && brake_filter_conf_ != NULL;
}
inline void LonControllerConf::clear_brake_filter_conf() {
  if (GetArenaNoVirtual() == NULL && brake_filter_conf_ != NULL) {
    delete brake_filter_conf_;
  }
  brake_filter_conf_ = NULL;
}
inline const ::apollo::control::FilterConf& LonControllerConf::_internal_brake_filter_conf() const {
  return *brake_filter_conf_;
}
inline const ::apollo::control::FilterConf& LonControllerConf::brake_filter_conf() const {
  const ::apollo::control::FilterConf* p = brake_filter_conf_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_filter_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::FilterConf*>(
      &::apollo::control::_FilterConf_default_instance_);
}
inline ::apollo::control::FilterConf* LonControllerConf::release_brake_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.brake_filter_conf)
  
  ::apollo::control::FilterConf* temp = brake_filter_conf_;
  brake_filter_conf_ = NULL;
  return temp;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_brake_filter_conf() {
  
  if (brake_filter_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::FilterConf>(GetArenaNoVirtual());
    brake_filter_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.brake_filter_conf)
  return brake_filter_conf_;
}
inline void LonControllerConf::set_allocated_brake_filter_conf(::apollo::control::FilterConf* brake_filter_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete brake_filter_conf_;
  }
  if (brake_filter_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brake_filter_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brake_filter_conf, submessage_arena);
    }
    
  } else {
    
  }
  brake_filter_conf_ = brake_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.brake_filter_conf)
}

// .apollo.control.FilterConf acceleration_filter_conf = 14;
inline bool LonControllerConf::has_acceleration_filter_conf() const {
  return this != internal_default_instance() && acceleration_filter_conf_ != NULL;
}
inline void LonControllerConf::clear_acceleration_filter_conf() {
  if (GetArenaNoVirtual() == NULL && acceleration_filter_conf_ != NULL) {
    delete acceleration_filter_conf_;
  }
  acceleration_filter_conf_ = NULL;
}
inline const ::apollo::control::FilterConf& LonControllerConf::_internal_acceleration_filter_conf() const {
  return *acceleration_filter_conf_;
}
inline const ::apollo::control::FilterConf& LonControllerConf::acceleration_filter_conf() const {
  const ::apollo::control::FilterConf* p = acceleration_filter_conf_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.acceleration_filter_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::FilterConf*>(
      &::apollo::control::_FilterConf_default_instance_);
}
inline ::apollo::control::FilterConf* LonControllerConf::release_acceleration_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.acceleration_filter_conf)
  
  ::apollo::control::FilterConf* temp = acceleration_filter_conf_;
  acceleration_filter_conf_ = NULL;
  return temp;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_acceleration_filter_conf() {
  
  if (acceleration_filter_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::FilterConf>(GetArenaNoVirtual());
    acceleration_filter_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.acceleration_filter_conf)
  return acceleration_filter_conf_;
}
inline void LonControllerConf::set_allocated_acceleration_filter_conf(::apollo::control::FilterConf* acceleration_filter_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acceleration_filter_conf_;
  }
  if (acceleration_filter_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration_filter_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration_filter_conf, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_filter_conf_ = acceleration_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.acceleration_filter_conf)
}

// .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
inline bool LonControllerConf::has_calibration_table() const {
  return this != internal_default_instance() && calibration_table_ != NULL;
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::_internal_calibration_table() const {
  return *calibration_table_;
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  const ::apollo::control::calibrationtable::ControlCalibrationTable* p = calibration_table_;
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.calibration_table)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::control::calibrationtable::ControlCalibrationTable*>(
      &::apollo::control::calibrationtable::_ControlCalibrationTable_default_instance_);
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.calibration_table)
  
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  
  if (calibration_table_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationTable>(GetArenaNoVirtual());
    calibration_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_;
}
inline void LonControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(calibration_table_);
  }
  if (calibration_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      calibration_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, calibration_table, submessage_arena);
    }
    
  } else {
    
  }
  calibration_table_ = calibration_table;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.calibration_table)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto
