// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/lon_controller_conf.proto

#include "apollo_msgs/proto/control/lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControlCalibrationTable;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FilterConf;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PidConf;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto
namespace apollo {
namespace control {
class PidConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PidConf>
      _instance;
} _PidConf_default_instance_;
class FilterConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterConf>
      _instance;
} _FilterConf_default_instance_;
class LonControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LonControllerConf>
      _instance;
} _LonControllerConf_default_instance_;
}  // namespace control
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto {
static void InitDefaultsPidConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_PidConf_default_instance_;
    new (ptr) ::apollo::control::PidConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::PidConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PidConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPidConf}, {}};

static void InitDefaultsFilterConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_FilterConf_default_instance_;
    new (ptr) ::apollo::control::FilterConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::FilterConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FilterConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFilterConf}, {}};

static void InitDefaultsLonControllerConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LonControllerConf_default_instance_;
    new (ptr) ::apollo::control::LonControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LonControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LonControllerConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLonControllerConf}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_PidConf.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_FilterConf.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto::scc_info_ControlCalibrationTable.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PidConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FilterConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LonControllerConf.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::PidConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::PidConf, integrator_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::PidConf, integrator_saturation_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::PidConf, kp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::PidConf, ki_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::PidConf, kd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::FilterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::FilterConf, cutoff_freq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, brake_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, throttle_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, speed_controller_input_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, station_error_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, preview_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, standstill_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, station_pid_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, low_speed_pid_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, high_speed_pid_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, switch_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, throttle_filter_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, brake_filter_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, acceleration_filter_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LonControllerConf, calibration_table_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::control::PidConf)},
  { 10, -1, sizeof(::apollo::control::FilterConf)},
  { 16, -1, sizeof(::apollo::control::LonControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_PidConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_FilterConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_LonControllerConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/control/lon_controller_conf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3apollo_msgs/proto/control/lon_controll"
      "er_conf.proto\022\016apollo.control\0321apollo_ms"
      "gs/proto/control/calibration_table.proto"
      "\"m\n\007PidConf\022\031\n\021integrator_enable\030\001 \001(\010\022#"
      "\n\033integrator_saturation_level\030\002 \001(\001\022\n\n\002k"
      "p\030\003 \001(\001\022\n\n\002ki\030\004 \001(\001\022\n\n\002kd\030\005 \001(\001\"!\n\nFilte"
      "rConf\022\023\n\013cutoff_freq\030\001 \001(\005\"\206\005\n\021LonContro"
      "llerConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016brake_deadzone\030\002"
      " \001(\001\022\031\n\021throttle_deadzone\030\003 \001(\001\022$\n\034speed"
      "_controller_input_limit\030\004 \001(\001\022\033\n\023station"
      "_error_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 \001"
      "(\001\022\037\n\027standstill_acceleration\030\007 \001(\001\0221\n\020s"
      "tation_pid_conf\030\010 \001(\0132\027.apollo.control.P"
      "idConf\0223\n\022low_speed_pid_conf\030\t \001(\0132\027.apo"
      "llo.control.PidConf\0224\n\023high_speed_pid_co"
      "nf\030\n \001(\0132\027.apollo.control.PidConf\022\024\n\014swi"
      "tch_speed\030\013 \001(\001\0228\n\024throttle_filter_conf\030"
      "\014 \001(\0132\032.apollo.control.FilterConf\0225\n\021bra"
      "ke_filter_conf\030\r \001(\0132\032.apollo.control.Fi"
      "lterConf\022<\n\030acceleration_filter_conf\030\016 \001"
      "(\0132\032.apollo.control.FilterConf\022S\n\021calibr"
      "ation_table\030\017 \001(\01328.apollo.control.calib"
      "rationtable.ControlCalibrationTableb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/lon_controller_conf.proto", &protobuf_RegisterTypes);
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto
namespace apollo {
namespace control {

// ===================================================================

void PidConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PidConf::kIntegratorEnableFieldNumber;
const int PidConf::kIntegratorSaturationLevelFieldNumber;
const int PidConf::kKpFieldNumber;
const int PidConf::kKiFieldNumber;
const int PidConf::kKdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PidConf::PidConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_PidConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.PidConf)
}
PidConf::PidConf(const PidConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&integrator_saturation_level_, &from.integrator_saturation_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&integrator_enable_) -
    reinterpret_cast<char*>(&integrator_saturation_level_)) + sizeof(integrator_enable_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.PidConf)
}

void PidConf::SharedCtor() {
  ::memset(&integrator_saturation_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&integrator_enable_) -
      reinterpret_cast<char*>(&integrator_saturation_level_)) + sizeof(integrator_enable_));
}

PidConf::~PidConf() {
  // @@protoc_insertion_point(destructor:apollo.control.PidConf)
  SharedDtor();
}

void PidConf::SharedDtor() {
}

void PidConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PidConf::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PidConf& PidConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_PidConf.base);
  return *internal_default_instance();
}


void PidConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.PidConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&integrator_saturation_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&integrator_enable_) -
      reinterpret_cast<char*>(&integrator_saturation_level_)) + sizeof(integrator_enable_));
  _internal_metadata_.Clear();
}

bool PidConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.PidConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool integrator_enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &integrator_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double integrator_saturation_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &integrator_saturation_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ki = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ki_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.PidConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.PidConf)
  return false;
#undef DO_
}

void PidConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.PidConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool integrator_enable = 1;
  if (this->integrator_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->integrator_enable(), output);
  }

  // double integrator_saturation_level = 2;
  if (this->integrator_saturation_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->integrator_saturation_level(), output);
  }

  // double kp = 3;
  if (this->kp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kp(), output);
  }

  // double ki = 4;
  if (this->ki() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ki(), output);
  }

  // double kd = 5;
  if (this->kd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.PidConf)
}

::google::protobuf::uint8* PidConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.PidConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool integrator_enable = 1;
  if (this->integrator_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->integrator_enable(), target);
  }

  // double integrator_saturation_level = 2;
  if (this->integrator_saturation_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->integrator_saturation_level(), target);
  }

  // double kp = 3;
  if (this->kp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kp(), target);
  }

  // double ki = 4;
  if (this->ki() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ki(), target);
  }

  // double kd = 5;
  if (this->kd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.PidConf)
  return target;
}

size_t PidConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.PidConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double integrator_saturation_level = 2;
  if (this->integrator_saturation_level() != 0) {
    total_size += 1 + 8;
  }

  // double kp = 3;
  if (this->kp() != 0) {
    total_size += 1 + 8;
  }

  // double ki = 4;
  if (this->ki() != 0) {
    total_size += 1 + 8;
  }

  // double kd = 5;
  if (this->kd() != 0) {
    total_size += 1 + 8;
  }

  // bool integrator_enable = 1;
  if (this->integrator_enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PidConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.PidConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PidConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PidConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.PidConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.PidConf)
    MergeFrom(*source);
  }
}

void PidConf::MergeFrom(const PidConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.PidConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.integrator_saturation_level() != 0) {
    set_integrator_saturation_level(from.integrator_saturation_level());
  }
  if (from.kp() != 0) {
    set_kp(from.kp());
  }
  if (from.ki() != 0) {
    set_ki(from.ki());
  }
  if (from.kd() != 0) {
    set_kd(from.kd());
  }
  if (from.integrator_enable() != 0) {
    set_integrator_enable(from.integrator_enable());
  }
}

void PidConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.PidConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PidConf::CopyFrom(const PidConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.PidConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PidConf::IsInitialized() const {
  return true;
}

void PidConf::Swap(PidConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PidConf::InternalSwap(PidConf* other) {
  using std::swap;
  swap(integrator_saturation_level_, other->integrator_saturation_level_);
  swap(kp_, other->kp_);
  swap(ki_, other->ki_);
  swap(kd_, other->kd_);
  swap(integrator_enable_, other->integrator_enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PidConf::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FilterConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConf::kCutoffFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConf::FilterConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_FilterConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.FilterConf)
}
FilterConf::FilterConf(const FilterConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutoff_freq_ = from.cutoff_freq_;
  // @@protoc_insertion_point(copy_constructor:apollo.control.FilterConf)
}

void FilterConf::SharedCtor() {
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:apollo.control.FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
}

void FilterConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FilterConf::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FilterConf& FilterConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_FilterConf.base);
  return *internal_default_instance();
}


void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cutoff_freq_ = 0;
  _internal_metadata_.Clear();
}

bool FilterConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.FilterConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cutoff_freq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.FilterConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.FilterConf)
  return false;
#undef DO_
}

void FilterConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_freq = 1;
  if (this->cutoff_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_freq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.FilterConf)
}

::google::protobuf::uint8* FilterConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_freq = 1;
  if (this->cutoff_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_freq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.FilterConf)
  return target;
}

size_t FilterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.FilterConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 cutoff_freq = 1;
  if (this->cutoff_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.FilterConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cutoff_freq() != 0) {
    set_cutoff_freq(from.cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  return true;
}

void FilterConf::Swap(FilterConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConf::InternalSwap(FilterConf* other) {
  using std::swap;
  swap(cutoff_freq_, other->cutoff_freq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LonControllerConf::InitAsDefaultInstance() {
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->station_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->low_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->high_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->throttle_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(
      ::apollo::control::FilterConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->brake_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(
      ::apollo::control::FilterConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->acceleration_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(
      ::apollo::control::FilterConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->calibration_table_ = const_cast< ::apollo::control::calibrationtable::ControlCalibrationTable*>(
      ::apollo::control::calibrationtable::ControlCalibrationTable::internal_default_instance());
}
void LonControllerConf::clear_calibration_table() {
  if (GetArenaNoVirtual() == NULL && calibration_table_ != NULL) {
    delete calibration_table_;
  }
  calibration_table_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LonControllerConf::kTsFieldNumber;
const int LonControllerConf::kBrakeDeadzoneFieldNumber;
const int LonControllerConf::kThrottleDeadzoneFieldNumber;
const int LonControllerConf::kSpeedControllerInputLimitFieldNumber;
const int LonControllerConf::kStationErrorLimitFieldNumber;
const int LonControllerConf::kPreviewWindowFieldNumber;
const int LonControllerConf::kStandstillAccelerationFieldNumber;
const int LonControllerConf::kStationPidConfFieldNumber;
const int LonControllerConf::kLowSpeedPidConfFieldNumber;
const int LonControllerConf::kHighSpeedPidConfFieldNumber;
const int LonControllerConf::kSwitchSpeedFieldNumber;
const int LonControllerConf::kThrottleFilterConfFieldNumber;
const int LonControllerConf::kBrakeFilterConfFieldNumber;
const int LonControllerConf::kAccelerationFilterConfFieldNumber;
const int LonControllerConf::kCalibrationTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LonControllerConf::LonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_LonControllerConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LonControllerConf)
}
LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_pid_conf()) {
    station_pid_conf_ = new ::apollo::control::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = NULL;
  }
  if (from.has_low_speed_pid_conf()) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf(*from.low_speed_pid_conf_);
  } else {
    low_speed_pid_conf_ = NULL;
  }
  if (from.has_high_speed_pid_conf()) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf(*from.high_speed_pid_conf_);
  } else {
    high_speed_pid_conf_ = NULL;
  }
  if (from.has_throttle_filter_conf()) {
    throttle_filter_conf_ = new ::apollo::control::FilterConf(*from.throttle_filter_conf_);
  } else {
    throttle_filter_conf_ = NULL;
  }
  if (from.has_brake_filter_conf()) {
    brake_filter_conf_ = new ::apollo::control::FilterConf(*from.brake_filter_conf_);
  } else {
    brake_filter_conf_ = NULL;
  }
  if (from.has_acceleration_filter_conf()) {
    acceleration_filter_conf_ = new ::apollo::control::FilterConf(*from.acceleration_filter_conf_);
  } else {
    acceleration_filter_conf_ = NULL;
  }
  if (from.has_calibration_table()) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = NULL;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&switch_speed_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(switch_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
  ::memset(&station_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&switch_speed_) -
      reinterpret_cast<char*>(&station_pid_conf_)) + sizeof(switch_speed_));
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete station_pid_conf_;
  if (this != internal_default_instance()) delete low_speed_pid_conf_;
  if (this != internal_default_instance()) delete high_speed_pid_conf_;
  if (this != internal_default_instance()) delete throttle_filter_conf_;
  if (this != internal_default_instance()) delete brake_filter_conf_;
  if (this != internal_default_instance()) delete acceleration_filter_conf_;
  if (this != internal_default_instance()) delete calibration_table_;
}

void LonControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LonControllerConf::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LonControllerConf& LonControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_LonControllerConf.base);
  return *internal_default_instance();
}


void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && station_pid_conf_ != NULL) {
    delete station_pid_conf_;
  }
  station_pid_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && low_speed_pid_conf_ != NULL) {
    delete low_speed_pid_conf_;
  }
  low_speed_pid_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && high_speed_pid_conf_ != NULL) {
    delete high_speed_pid_conf_;
  }
  high_speed_pid_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && throttle_filter_conf_ != NULL) {
    delete throttle_filter_conf_;
  }
  throttle_filter_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && brake_filter_conf_ != NULL) {
    delete brake_filter_conf_;
  }
  brake_filter_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_filter_conf_ != NULL) {
    delete acceleration_filter_conf_;
  }
  acceleration_filter_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && calibration_table_ != NULL) {
    delete calibration_table_;
  }
  calibration_table_ = NULL;
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&switch_speed_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(switch_speed_));
  _internal_metadata_.Clear();
}

bool LonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LonControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_deadzone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle_deadzone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_controller_input_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_error_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_window = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double standstill_acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.PidConf station_pid_conf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.PidConf low_speed_pid_conf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.PidConf high_speed_pid_conf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double switch_speed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.FilterConf throttle_filter_conf = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_throttle_filter_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.FilterConf brake_filter_conf = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_filter_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.FilterConf acceleration_filter_conf = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration_filter_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LonControllerConf)
  return false;
#undef DO_
}

void LonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ts = 1;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // double brake_deadzone = 2;
  if (this->brake_deadzone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_deadzone(), output);
  }

  // double throttle_deadzone = 3;
  if (this->throttle_deadzone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle_deadzone(), output);
  }

  // double speed_controller_input_limit = 4;
  if (this->speed_controller_input_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_controller_input_limit(), output);
  }

  // double station_error_limit = 5;
  if (this->station_error_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->station_error_limit(), output);
  }

  // double preview_window = 6;
  if (this->preview_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->preview_window(), output);
  }

  // double standstill_acceleration = 7;
  if (this->standstill_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standstill_acceleration(), output);
  }

  // .apollo.control.PidConf station_pid_conf = 8;
  if (this->has_station_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_station_pid_conf(), output);
  }

  // .apollo.control.PidConf low_speed_pid_conf = 9;
  if (this->has_low_speed_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_low_speed_pid_conf(), output);
  }

  // .apollo.control.PidConf high_speed_pid_conf = 10;
  if (this->has_high_speed_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_high_speed_pid_conf(), output);
  }

  // double switch_speed = 11;
  if (this->switch_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->switch_speed(), output);
  }

  // .apollo.control.FilterConf throttle_filter_conf = 12;
  if (this->has_throttle_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_throttle_filter_conf(), output);
  }

  // .apollo.control.FilterConf brake_filter_conf = 13;
  if (this->has_brake_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_brake_filter_conf(), output);
  }

  // .apollo.control.FilterConf acceleration_filter_conf = 14;
  if (this->has_acceleration_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_acceleration_filter_conf(), output);
  }

  // .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  if (this->has_calibration_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_calibration_table(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LonControllerConf)
}

::google::protobuf::uint8* LonControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ts = 1;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // double brake_deadzone = 2;
  if (this->brake_deadzone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_deadzone(), target);
  }

  // double throttle_deadzone = 3;
  if (this->throttle_deadzone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle_deadzone(), target);
  }

  // double speed_controller_input_limit = 4;
  if (this->speed_controller_input_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_controller_input_limit(), target);
  }

  // double station_error_limit = 5;
  if (this->station_error_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->station_error_limit(), target);
  }

  // double preview_window = 6;
  if (this->preview_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->preview_window(), target);
  }

  // double standstill_acceleration = 7;
  if (this->standstill_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standstill_acceleration(), target);
  }

  // .apollo.control.PidConf station_pid_conf = 8;
  if (this->has_station_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_station_pid_conf(), deterministic, target);
  }

  // .apollo.control.PidConf low_speed_pid_conf = 9;
  if (this->has_low_speed_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_low_speed_pid_conf(), deterministic, target);
  }

  // .apollo.control.PidConf high_speed_pid_conf = 10;
  if (this->has_high_speed_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_high_speed_pid_conf(), deterministic, target);
  }

  // double switch_speed = 11;
  if (this->switch_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->switch_speed(), target);
  }

  // .apollo.control.FilterConf throttle_filter_conf = 12;
  if (this->has_throttle_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_throttle_filter_conf(), deterministic, target);
  }

  // .apollo.control.FilterConf brake_filter_conf = 13;
  if (this->has_brake_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_brake_filter_conf(), deterministic, target);
  }

  // .apollo.control.FilterConf acceleration_filter_conf = 14;
  if (this->has_acceleration_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_acceleration_filter_conf(), deterministic, target);
  }

  // .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  if (this->has_calibration_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_calibration_table(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LonControllerConf)
  return target;
}

size_t LonControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LonControllerConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .apollo.control.PidConf station_pid_conf = 8;
  if (this->has_station_pid_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *station_pid_conf_);
  }

  // .apollo.control.PidConf low_speed_pid_conf = 9;
  if (this->has_low_speed_pid_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *low_speed_pid_conf_);
  }

  // .apollo.control.PidConf high_speed_pid_conf = 10;
  if (this->has_high_speed_pid_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *high_speed_pid_conf_);
  }

  // .apollo.control.FilterConf throttle_filter_conf = 12;
  if (this->has_throttle_filter_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *throttle_filter_conf_);
  }

  // .apollo.control.FilterConf brake_filter_conf = 13;
  if (this->has_brake_filter_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brake_filter_conf_);
  }

  // .apollo.control.FilterConf acceleration_filter_conf = 14;
  if (this->has_acceleration_filter_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acceleration_filter_conf_);
  }

  // .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  if (this->has_calibration_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *calibration_table_);
  }

  // double ts = 1;
  if (this->ts() != 0) {
    total_size += 1 + 8;
  }

  // double brake_deadzone = 2;
  if (this->brake_deadzone() != 0) {
    total_size += 1 + 8;
  }

  // double throttle_deadzone = 3;
  if (this->throttle_deadzone() != 0) {
    total_size += 1 + 8;
  }

  // double speed_controller_input_limit = 4;
  if (this->speed_controller_input_limit() != 0) {
    total_size += 1 + 8;
  }

  // double station_error_limit = 5;
  if (this->station_error_limit() != 0) {
    total_size += 1 + 8;
  }

  // double preview_window = 6;
  if (this->preview_window() != 0) {
    total_size += 1 + 8;
  }

  // double standstill_acceleration = 7;
  if (this->standstill_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // double switch_speed = 11;
  if (this->switch_speed() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LonControllerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LonControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_station_pid_conf()) {
    mutable_station_pid_conf()->::apollo::control::PidConf::MergeFrom(from.station_pid_conf());
  }
  if (from.has_low_speed_pid_conf()) {
    mutable_low_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.low_speed_pid_conf());
  }
  if (from.has_high_speed_pid_conf()) {
    mutable_high_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.high_speed_pid_conf());
  }
  if (from.has_throttle_filter_conf()) {
    mutable_throttle_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.throttle_filter_conf());
  }
  if (from.has_brake_filter_conf()) {
    mutable_brake_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.brake_filter_conf());
  }
  if (from.has_acceleration_filter_conf()) {
    mutable_acceleration_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.acceleration_filter_conf());
  }
  if (from.has_calibration_table()) {
    mutable_calibration_table()->::apollo::control::calibrationtable::ControlCalibrationTable::MergeFrom(from.calibration_table());
  }
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
  if (from.brake_deadzone() != 0) {
    set_brake_deadzone(from.brake_deadzone());
  }
  if (from.throttle_deadzone() != 0) {
    set_throttle_deadzone(from.throttle_deadzone());
  }
  if (from.speed_controller_input_limit() != 0) {
    set_speed_controller_input_limit(from.speed_controller_input_limit());
  }
  if (from.station_error_limit() != 0) {
    set_station_error_limit(from.station_error_limit());
  }
  if (from.preview_window() != 0) {
    set_preview_window(from.preview_window());
  }
  if (from.standstill_acceleration() != 0) {
    set_standstill_acceleration(from.standstill_acceleration());
  }
  if (from.switch_speed() != 0) {
    set_switch_speed(from.switch_speed());
  }
}

void LonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {
  return true;
}

void LonControllerConf::Swap(LonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LonControllerConf::InternalSwap(LonControllerConf* other) {
  using std::swap;
  swap(station_pid_conf_, other->station_pid_conf_);
  swap(low_speed_pid_conf_, other->low_speed_pid_conf_);
  swap(high_speed_pid_conf_, other->high_speed_pid_conf_);
  swap(throttle_filter_conf_, other->throttle_filter_conf_);
  swap(brake_filter_conf_, other->brake_filter_conf_);
  swap(acceleration_filter_conf_, other->acceleration_filter_conf_);
  swap(calibration_table_, other->calibration_table_);
  swap(ts_, other->ts_);
  swap(brake_deadzone_, other->brake_deadzone_);
  swap(throttle_deadzone_, other->throttle_deadzone_);
  swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  swap(station_error_limit_, other->station_error_limit_);
  swap(preview_window_, other->preview_window_);
  swap(standstill_acceleration_, other->standstill_acceleration_);
  swap(switch_speed_, other->switch_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LonControllerConf::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::PidConf* Arena::CreateMaybeMessage< ::apollo::control::PidConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::PidConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::FilterConf* Arena::CreateMaybeMessage< ::apollo::control::FilterConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::FilterConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::LonControllerConf* Arena::CreateMaybeMessage< ::apollo::control::LonControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LonControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
