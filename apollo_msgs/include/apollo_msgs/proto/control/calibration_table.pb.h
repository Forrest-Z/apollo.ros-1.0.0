// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/calibration_table.proto

#ifndef PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto
#define PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto 

namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto
namespace apollo {
namespace control {
namespace calibrationtable {
class ControlCalibrationInfo;
class ControlCalibrationInfoDefaultTypeInternal;
extern ControlCalibrationInfoDefaultTypeInternal _ControlCalibrationInfo_default_instance_;
class ControlCalibrationTable;
class ControlCalibrationTableDefaultTypeInternal;
extern ControlCalibrationTableDefaultTypeInternal _ControlCalibrationTable_default_instance_;
}  // namespace calibrationtable
}  // namespace control
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::control::calibrationtable::ControlCalibrationInfo* Arena::CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationInfo>(Arena*);
template<> ::apollo::control::calibrationtable::ControlCalibrationTable* Arena::CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationTable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace control {
namespace calibrationtable {

// ===================================================================

class ControlCalibrationTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.calibrationtable.ControlCalibrationTable) */ {
 public:
  ControlCalibrationTable();
  virtual ~ControlCalibrationTable();

  ControlCalibrationTable(const ControlCalibrationTable& from);

  inline ControlCalibrationTable& operator=(const ControlCalibrationTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCalibrationTable(ControlCalibrationTable&& from) noexcept
    : ControlCalibrationTable() {
    *this = ::std::move(from);
  }

  inline ControlCalibrationTable& operator=(ControlCalibrationTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCalibrationTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCalibrationTable* internal_default_instance() {
    return reinterpret_cast<const ControlCalibrationTable*>(
               &_ControlCalibrationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControlCalibrationTable* other);
  friend void swap(ControlCalibrationTable& a, ControlCalibrationTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCalibrationTable* New() const final {
    return CreateMaybeMessage<ControlCalibrationTable>(NULL);
  }

  ControlCalibrationTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlCalibrationTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlCalibrationTable& from);
  void MergeFrom(const ControlCalibrationTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCalibrationTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.control.calibrationtable.ControlCalibrationInfo calibration = 1;
  int calibration_size() const;
  void clear_calibration();
  static const int kCalibrationFieldNumber = 1;
  ::apollo::control::calibrationtable::ControlCalibrationInfo* mutable_calibration(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >*
      mutable_calibration();
  const ::apollo::control::calibrationtable::ControlCalibrationInfo& calibration(int index) const;
  ::apollo::control::calibrationtable::ControlCalibrationInfo* add_calibration();
  const ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >&
      calibration() const;

  // @@protoc_insertion_point(class_scope:apollo.control.calibrationtable.ControlCalibrationTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo > calibration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlCalibrationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.calibrationtable.ControlCalibrationInfo) */ {
 public:
  ControlCalibrationInfo();
  virtual ~ControlCalibrationInfo();

  ControlCalibrationInfo(const ControlCalibrationInfo& from);

  inline ControlCalibrationInfo& operator=(const ControlCalibrationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCalibrationInfo(ControlCalibrationInfo&& from) noexcept
    : ControlCalibrationInfo() {
    *this = ::std::move(from);
  }

  inline ControlCalibrationInfo& operator=(ControlCalibrationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCalibrationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCalibrationInfo* internal_default_instance() {
    return reinterpret_cast<const ControlCalibrationInfo*>(
               &_ControlCalibrationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ControlCalibrationInfo* other);
  friend void swap(ControlCalibrationInfo& a, ControlCalibrationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCalibrationInfo* New() const final {
    return CreateMaybeMessage<ControlCalibrationInfo>(NULL);
  }

  ControlCalibrationInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlCalibrationInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlCalibrationInfo& from);
  void MergeFrom(const ControlCalibrationInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCalibrationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double speed = 1;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // double acceleration = 2;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 2;
  double acceleration() const;
  void set_acceleration(double value);

  // double command = 3;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  double command() const;
  void set_command(double value);

  // @@protoc_insertion_point(class_scope:apollo.control.calibrationtable.ControlCalibrationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double speed_;
  double acceleration_;
  double command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCalibrationTable

// repeated .apollo.control.calibrationtable.ControlCalibrationInfo calibration = 1;
inline int ControlCalibrationTable::calibration_size() const {
  return calibration_.size();
}
inline void ControlCalibrationTable::clear_calibration() {
  calibration_.Clear();
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::mutable_calibration(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >*
ControlCalibrationTable::mutable_calibration() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return &calibration_;
}
inline const ::apollo::control::calibrationtable::ControlCalibrationInfo& ControlCalibrationTable::calibration(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_.Get(index);
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::add_calibration() {
  // @@protoc_insertion_point(field_add:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >&
ControlCalibrationTable::calibration() const {
  // @@protoc_insertion_point(field_list:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_;
}

// -------------------------------------------------------------------

// ControlCalibrationInfo

// double speed = 1;
inline void ControlCalibrationInfo::clear_speed() {
  speed_ = 0;
}
inline double ControlCalibrationInfo::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.speed)
  return speed_;
}
inline void ControlCalibrationInfo::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.speed)
}

// double acceleration = 2;
inline void ControlCalibrationInfo::clear_acceleration() {
  acceleration_ = 0;
}
inline double ControlCalibrationInfo::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.acceleration)
  return acceleration_;
}
inline void ControlCalibrationInfo::set_acceleration(double value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.acceleration)
}

// double command = 3;
inline void ControlCalibrationInfo::clear_command() {
  command_ = 0;
}
inline double ControlCalibrationInfo::command() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.command)
  return command_;
}
inline void ControlCalibrationInfo::set_command(double value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calibrationtable
}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto
