// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/control_conf.proto

#include "apollo_msgs/proto/control/control_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatControllerConf;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LonControllerConf;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto
namespace apollo {
namespace control {
class ControlConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlConf>
      _instance;
} _ControlConf_default_instance_;
}  // namespace control
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto {
static void InitDefaultsControlConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_ControlConf_default_instance_;
    new (ptr) ::apollo::control::ControlConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::ControlConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ControlConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsControlConf}, {
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::scc_info_LatControllerConf.base,
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::scc_info_LonControllerConf.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ControlConf.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, control_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, max_planning_interval_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, max_planning_delay_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, soft_estop_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, active_controllers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, max_steering_percentage_allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, max_status_interval_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, lat_controller_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, lon_controller_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, trajectory_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, chassis_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::ControlConf, localization_period_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::control::ControlConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_ControlConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/control/control_conf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n,apollo_msgs/proto/control/control_conf"
      ".proto\022\016apollo.control\032&apollo_msgs/prot"
      "o/canbus/chassis.proto\032\'apollo_msgs/prot"
      "o/control/pad_msg.proto\0323apollo_msgs/pro"
      "to/control/lat_controller_conf.proto\0323ap"
      "ollo_msgs/proto/control/lon_controller_c"
      "onf.proto\"\215\005\n\013ControlConf\022\026\n\016control_per"
      "iod\030\001 \001(\001\022!\n\031max_planning_interval_sec\030\002"
      " \001(\001\022$\n\034max_planning_delay_threshold\030\003 \001"
      "(\001\0228\n\014driving_mode\030\004 \001(\0162\".apollo.canbus"
      ".Chassis.DrivingMode\022-\n\006action\030\005 \001(\0162\035.a"
      "pollo.control.DrivingAction\022\030\n\020soft_esto"
      "p_brake\030\006 \001(\001\022F\n\022active_controllers\030\007 \003("
      "\0162*.apollo.control.ControlConf.Controlle"
      "rType\022\'\n\037max_steering_percentage_allowed"
      "\030\010 \001(\005\022\037\n\027max_status_interval_sec\030\t \001(\001\022"
      ">\n\023lat_controller_conf\030\n \001(\0132!.apollo.co"
      "ntrol.LatControllerConf\022>\n\023lon_controlle"
      "r_conf\030\013 \001(\0132!.apollo.control.LonControl"
      "lerConf\022\031\n\021trajectory_period\030\014 \001(\001\022\026\n\016ch"
      "assis_period\030\r \001(\001\022\033\n\023localization_perio"
      "d\030\016 \001(\001\"8\n\016ControllerType\022\022\n\016LAT_CONTROL"
      "LER\020\000\022\022\n\016LON_CONTROLLER\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/control_conf.proto", &protobuf_RegisterTypes);
  ::protobuf_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto::AddDescriptors();
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto::AddDescriptors();
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::AddDescriptors();
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto
namespace apollo {
namespace control {
const ::google::protobuf::EnumDescriptor* ControlConf_ControllerType_descriptor() {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool ControlConf_ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControlConf_ControllerType ControlConf::LAT_CONTROLLER;
const ControlConf_ControllerType ControlConf::LON_CONTROLLER;
const ControlConf_ControllerType ControlConf::ControllerType_MIN;
const ControlConf_ControllerType ControlConf::ControllerType_MAX;
const int ControlConf::ControllerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ControlConf::InitAsDefaultInstance() {
  ::apollo::control::_ControlConf_default_instance_._instance.get_mutable()->lat_controller_conf_ = const_cast< ::apollo::control::LatControllerConf*>(
      ::apollo::control::LatControllerConf::internal_default_instance());
  ::apollo::control::_ControlConf_default_instance_._instance.get_mutable()->lon_controller_conf_ = const_cast< ::apollo::control::LonControllerConf*>(
      ::apollo::control::LonControllerConf::internal_default_instance());
}
void ControlConf::clear_lat_controller_conf() {
  if (GetArenaNoVirtual() == NULL && lat_controller_conf_ != NULL) {
    delete lat_controller_conf_;
  }
  lat_controller_conf_ = NULL;
}
void ControlConf::clear_lon_controller_conf() {
  if (GetArenaNoVirtual() == NULL && lon_controller_conf_ != NULL) {
    delete lon_controller_conf_;
  }
  lon_controller_conf_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlConf::kControlPeriodFieldNumber;
const int ControlConf::kMaxPlanningIntervalSecFieldNumber;
const int ControlConf::kMaxPlanningDelayThresholdFieldNumber;
const int ControlConf::kDrivingModeFieldNumber;
const int ControlConf::kActionFieldNumber;
const int ControlConf::kSoftEstopBrakeFieldNumber;
const int ControlConf::kActiveControllersFieldNumber;
const int ControlConf::kMaxSteeringPercentageAllowedFieldNumber;
const int ControlConf::kMaxStatusIntervalSecFieldNumber;
const int ControlConf::kLatControllerConfFieldNumber;
const int ControlConf::kLonControllerConfFieldNumber;
const int ControlConf::kTrajectoryPeriodFieldNumber;
const int ControlConf::kChassisPeriodFieldNumber;
const int ControlConf::kLocalizationPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlConf::ControlConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::scc_info_ControlConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlConf)
}
ControlConf::ControlConf(const ControlConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      active_controllers_(from.active_controllers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_controller_conf()) {
    lat_controller_conf_ = new ::apollo::control::LatControllerConf(*from.lat_controller_conf_);
  } else {
    lat_controller_conf_ = NULL;
  }
  if (from.has_lon_controller_conf()) {
    lon_controller_conf_ = new ::apollo::control::LonControllerConf(*from.lon_controller_conf_);
  } else {
    lon_controller_conf_ = NULL;
  }
  ::memcpy(&control_period_, &from.control_period_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
    reinterpret_cast<char*>(&control_period_)) + sizeof(max_steering_percentage_allowed_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlConf)
}

void ControlConf::SharedCtor() {
  ::memset(&lat_controller_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
      reinterpret_cast<char*>(&lat_controller_conf_)) + sizeof(max_steering_percentage_allowed_));
}

ControlConf::~ControlConf() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlConf)
  SharedDtor();
}

void ControlConf::SharedDtor() {
  if (this != internal_default_instance()) delete lat_controller_conf_;
  if (this != internal_default_instance()) delete lon_controller_conf_;
}

void ControlConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlConf::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlConf& ControlConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::scc_info_ControlConf.base);
  return *internal_default_instance();
}


void ControlConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_controllers_.Clear();
  if (GetArenaNoVirtual() == NULL && lat_controller_conf_ != NULL) {
    delete lat_controller_conf_;
  }
  lat_controller_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && lon_controller_conf_ != NULL) {
    delete lon_controller_conf_;
  }
  lon_controller_conf_ = NULL;
  ::memset(&control_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
      reinterpret_cast<char*>(&control_period_)) + sizeof(max_steering_percentage_allowed_));
  _internal_metadata_.Clear();
}

bool ControlConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.ControlConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double control_period = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_planning_interval_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_interval_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_planning_delay_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_delay_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.DrivingAction action = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::apollo::control::DrivingAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double soft_estop_brake = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_estop_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_active_controllers(static_cast< ::apollo::control::ControlConf_ControllerType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_active_controllers(static_cast< ::apollo::control::ControlConf_ControllerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_steering_percentage_allowed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_steering_percentage_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_status_interval_sec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_status_interval_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.LatControllerConf lat_controller_conf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .apollo.control.LonControllerConf lon_controller_conf = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lon_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trajectory_period = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double chassis_period = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassis_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double localization_period = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &localization_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.ControlConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.ControlConf)
  return false;
#undef DO_
}

void ControlConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double control_period = 1;
  if (this->control_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->control_period(), output);
  }

  // double max_planning_interval_sec = 2;
  if (this->max_planning_interval_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_planning_interval_sec(), output);
  }

  // double max_planning_delay_threshold = 3;
  if (this->max_planning_delay_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_planning_delay_threshold(), output);
  }

  // .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (this->driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->driving_mode(), output);
  }

  // .apollo.control.DrivingAction action = 5;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // double soft_estop_brake = 6;
  if (this->soft_estop_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->soft_estop_brake(), output);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  if (this->active_controllers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_active_controllers_cached_byte_size_));
  }
  for (int i = 0, n = this->active_controllers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->active_controllers(i), output);
  }

  // int32 max_steering_percentage_allowed = 8;
  if (this->max_steering_percentage_allowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_steering_percentage_allowed(), output);
  }

  // double max_status_interval_sec = 9;
  if (this->max_status_interval_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_status_interval_sec(), output);
  }

  // .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (this->has_lat_controller_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_lat_controller_conf(), output);
  }

  // .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (this->has_lon_controller_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_lon_controller_conf(), output);
  }

  // double trajectory_period = 12;
  if (this->trajectory_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->trajectory_period(), output);
  }

  // double chassis_period = 13;
  if (this->chassis_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->chassis_period(), output);
  }

  // double localization_period = 14;
  if (this->localization_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->localization_period(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.ControlConf)
}

::google::protobuf::uint8* ControlConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double control_period = 1;
  if (this->control_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->control_period(), target);
  }

  // double max_planning_interval_sec = 2;
  if (this->max_planning_interval_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_planning_interval_sec(), target);
  }

  // double max_planning_delay_threshold = 3;
  if (this->max_planning_delay_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_planning_delay_threshold(), target);
  }

  // .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (this->driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->driving_mode(), target);
  }

  // .apollo.control.DrivingAction action = 5;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // double soft_estop_brake = 6;
  if (this->soft_estop_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->soft_estop_brake(), target);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  if (this->active_controllers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _active_controllers_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->active_controllers_, target);
  }

  // int32 max_steering_percentage_allowed = 8;
  if (this->max_steering_percentage_allowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_steering_percentage_allowed(), target);
  }

  // double max_status_interval_sec = 9;
  if (this->max_status_interval_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_status_interval_sec(), target);
  }

  // .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (this->has_lat_controller_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_lat_controller_conf(), deterministic, target);
  }

  // .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (this->has_lon_controller_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_lon_controller_conf(), deterministic, target);
  }

  // double trajectory_period = 12;
  if (this->trajectory_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->trajectory_period(), target);
  }

  // double chassis_period = 13;
  if (this->chassis_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->chassis_period(), target);
  }

  // double localization_period = 14;
  if (this->localization_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->localization_period(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlConf)
  return target;
}

size_t ControlConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->active_controllers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_controllers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _active_controllers_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (this->has_lat_controller_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lat_controller_conf_);
  }

  // .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (this->has_lon_controller_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lon_controller_conf_);
  }

  // double control_period = 1;
  if (this->control_period() != 0) {
    total_size += 1 + 8;
  }

  // double max_planning_interval_sec = 2;
  if (this->max_planning_interval_sec() != 0) {
    total_size += 1 + 8;
  }

  // double max_planning_delay_threshold = 3;
  if (this->max_planning_delay_threshold() != 0) {
    total_size += 1 + 8;
  }

  // .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (this->driving_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
  }

  // .apollo.control.DrivingAction action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // double soft_estop_brake = 6;
  if (this->soft_estop_brake() != 0) {
    total_size += 1 + 8;
  }

  // double max_status_interval_sec = 9;
  if (this->max_status_interval_sec() != 0) {
    total_size += 1 + 8;
  }

  // double trajectory_period = 12;
  if (this->trajectory_period() != 0) {
    total_size += 1 + 8;
  }

  // double chassis_period = 13;
  if (this->chassis_period() != 0) {
    total_size += 1 + 8;
  }

  // double localization_period = 14;
  if (this->localization_period() != 0) {
    total_size += 1 + 8;
  }

  // int32 max_steering_percentage_allowed = 8;
  if (this->max_steering_percentage_allowed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_steering_percentage_allowed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlConf)
    MergeFrom(*source);
  }
}

void ControlConf::MergeFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_controllers_.MergeFrom(from.active_controllers_);
  if (from.has_lat_controller_conf()) {
    mutable_lat_controller_conf()->::apollo::control::LatControllerConf::MergeFrom(from.lat_controller_conf());
  }
  if (from.has_lon_controller_conf()) {
    mutable_lon_controller_conf()->::apollo::control::LonControllerConf::MergeFrom(from.lon_controller_conf());
  }
  if (from.control_period() != 0) {
    set_control_period(from.control_period());
  }
  if (from.max_planning_interval_sec() != 0) {
    set_max_planning_interval_sec(from.max_planning_interval_sec());
  }
  if (from.max_planning_delay_threshold() != 0) {
    set_max_planning_delay_threshold(from.max_planning_delay_threshold());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.soft_estop_brake() != 0) {
    set_soft_estop_brake(from.soft_estop_brake());
  }
  if (from.max_status_interval_sec() != 0) {
    set_max_status_interval_sec(from.max_status_interval_sec());
  }
  if (from.trajectory_period() != 0) {
    set_trajectory_period(from.trajectory_period());
  }
  if (from.chassis_period() != 0) {
    set_chassis_period(from.chassis_period());
  }
  if (from.localization_period() != 0) {
    set_localization_period(from.localization_period());
  }
  if (from.max_steering_percentage_allowed() != 0) {
    set_max_steering_percentage_allowed(from.max_steering_percentage_allowed());
  }
}

void ControlConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlConf::CopyFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlConf::IsInitialized() const {
  return true;
}

void ControlConf::Swap(ControlConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlConf::InternalSwap(ControlConf* other) {
  using std::swap;
  active_controllers_.InternalSwap(&other->active_controllers_);
  swap(lat_controller_conf_, other->lat_controller_conf_);
  swap(lon_controller_conf_, other->lon_controller_conf_);
  swap(control_period_, other->control_period_);
  swap(max_planning_interval_sec_, other->max_planning_interval_sec_);
  swap(max_planning_delay_threshold_, other->max_planning_delay_threshold_);
  swap(driving_mode_, other->driving_mode_);
  swap(action_, other->action_);
  swap(soft_estop_brake_, other->soft_estop_brake_);
  swap(max_status_interval_sec_, other->max_status_interval_sec_);
  swap(trajectory_period_, other->trajectory_period_);
  swap(chassis_period_, other->chassis_period_);
  swap(localization_period_, other->localization_period_);
  swap(max_steering_percentage_allowed_, other->max_steering_percentage_allowed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlConf::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::ControlConf* Arena::CreateMaybeMessage< ::apollo::control::ControlConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::ControlConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
