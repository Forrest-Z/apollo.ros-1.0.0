// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/lat_controller_conf.proto

#include "apollo_msgs/proto/control/lat_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
class LatControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatControllerConf>
      _instance;
} _LatControllerConf_default_instance_;
}  // namespace control
}  // namespace apollo
namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto {
static void InitDefaultsLatControllerConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LatControllerConf_default_instance_;
    new (ptr) ::apollo::control::LatControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LatControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatControllerConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatControllerConf}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatControllerConf.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, preview_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, cf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, cr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, wheelbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, matrix_q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, cutoff_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, mean_filter_window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, steer_transmission_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, steer_single_direction_max_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::control::LatControllerConf, max_iteration_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::control::LatControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::control::_LatControllerConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "apollo_msgs/proto/control/lat_controller_conf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3apollo_msgs/proto/control/lat_controll"
      "er_conf.proto\022\016apollo.control\"\337\002\n\021LatCon"
      "trollerConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016preview_windo"
      "w\030\002 \001(\005\022\n\n\002cf\030\003 \001(\001\022\n\n\002cr\030\004 \001(\001\022\021\n\twheel"
      "base\030\005 \001(\001\022\017\n\007mass_fl\030\006 \001(\005\022\017\n\007mass_fr\030\007"
      " \001(\005\022\017\n\007mass_rl\030\010 \001(\005\022\017\n\007mass_rr\030\t \001(\005\022\013"
      "\n\003eps\030\n \001(\001\022\020\n\010matrix_q\030\013 \003(\001\022\023\n\013cutoff_"
      "freq\030\014 \001(\005\022\037\n\027mean_filter_window_size\030\r "
      "\001(\005\022 \n\030steer_transmission_ratio\030\016 \001(\005\022)\n"
      "!steer_single_direction_max_degree\030\017 \001(\005"
      "\022\025\n\rmax_iteration\030\020 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/lat_controller_conf.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto
namespace apollo {
namespace control {

// ===================================================================

void LatControllerConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatControllerConf::kTsFieldNumber;
const int LatControllerConf::kPreviewWindowFieldNumber;
const int LatControllerConf::kCfFieldNumber;
const int LatControllerConf::kCrFieldNumber;
const int LatControllerConf::kWheelbaseFieldNumber;
const int LatControllerConf::kMassFlFieldNumber;
const int LatControllerConf::kMassFrFieldNumber;
const int LatControllerConf::kMassRlFieldNumber;
const int LatControllerConf::kMassRrFieldNumber;
const int LatControllerConf::kEpsFieldNumber;
const int LatControllerConf::kMatrixQFieldNumber;
const int LatControllerConf::kCutoffFreqFieldNumber;
const int LatControllerConf::kMeanFilterWindowSizeFieldNumber;
const int LatControllerConf::kSteerTransmissionRatioFieldNumber;
const int LatControllerConf::kSteerSingleDirectionMaxDegreeFieldNumber;
const int LatControllerConf::kMaxIterationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatControllerConf::LatControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::scc_info_LatControllerConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatControllerConf)
}
LatControllerConf::LatControllerConf(const LatControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matrix_q_(from.matrix_q_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_iteration_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(max_iteration_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatControllerConf)
}

void LatControllerConf::SharedCtor() {
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_iteration_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(max_iteration_));
}

LatControllerConf::~LatControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LatControllerConf)
  SharedDtor();
}

void LatControllerConf::SharedDtor() {
}

void LatControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatControllerConf::descriptor() {
  ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatControllerConf& LatControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::scc_info_LatControllerConf.base);
  return *internal_default_instance();
}


void LatControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_iteration_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(max_iteration_));
  _internal_metadata_.Clear();
}

bool LatControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LatControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 preview_window = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preview_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelbase = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelbase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mass_fl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mass_fr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mass_rl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mass_rr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double eps = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double matrix_q = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_q())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 90u, input, this->mutable_matrix_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cutoff_freq = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mean_filter_window_size = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_filter_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_transmission_ratio = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_transmission_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_single_direction_max_degree = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_single_direction_max_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_iteration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LatControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LatControllerConf)
  return false;
#undef DO_
}

void LatControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LatControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ts = 1;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // int32 preview_window = 2;
  if (this->preview_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preview_window(), output);
  }

  // double cf = 3;
  if (this->cf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cf(), output);
  }

  // double cr = 4;
  if (this->cr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cr(), output);
  }

  // double wheelbase = 5;
  if (this->wheelbase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->wheelbase(), output);
  }

  // int32 mass_fl = 6;
  if (this->mass_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mass_fl(), output);
  }

  // int32 mass_fr = 7;
  if (this->mass_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mass_fr(), output);
  }

  // int32 mass_rl = 8;
  if (this->mass_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mass_rl(), output);
  }

  // int32 mass_rr = 9;
  if (this->mass_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mass_rr(), output);
  }

  // double eps = 10;
  if (this->eps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->eps(), output);
  }

  // repeated double matrix_q = 11;
  if (this->matrix_q_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _matrix_q_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->matrix_q().data(), this->matrix_q_size(), output);
  }

  // int32 cutoff_freq = 12;
  if (this->cutoff_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cutoff_freq(), output);
  }

  // int32 mean_filter_window_size = 13;
  if (this->mean_filter_window_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mean_filter_window_size(), output);
  }

  // int32 steer_transmission_ratio = 14;
  if (this->steer_transmission_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->steer_transmission_ratio(), output);
  }

  // int32 steer_single_direction_max_degree = 15;
  if (this->steer_single_direction_max_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->steer_single_direction_max_degree(), output);
  }

  // int32 max_iteration = 16;
  if (this->max_iteration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_iteration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LatControllerConf)
}

::google::protobuf::uint8* LatControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ts = 1;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // int32 preview_window = 2;
  if (this->preview_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preview_window(), target);
  }

  // double cf = 3;
  if (this->cf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cf(), target);
  }

  // double cr = 4;
  if (this->cr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cr(), target);
  }

  // double wheelbase = 5;
  if (this->wheelbase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->wheelbase(), target);
  }

  // int32 mass_fl = 6;
  if (this->mass_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mass_fl(), target);
  }

  // int32 mass_fr = 7;
  if (this->mass_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mass_fr(), target);
  }

  // int32 mass_rl = 8;
  if (this->mass_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mass_rl(), target);
  }

  // int32 mass_rr = 9;
  if (this->mass_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mass_rr(), target);
  }

  // double eps = 10;
  if (this->eps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->eps(), target);
  }

  // repeated double matrix_q = 11;
  if (this->matrix_q_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _matrix_q_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->matrix_q_, target);
  }

  // int32 cutoff_freq = 12;
  if (this->cutoff_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cutoff_freq(), target);
  }

  // int32 mean_filter_window_size = 13;
  if (this->mean_filter_window_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mean_filter_window_size(), target);
  }

  // int32 steer_transmission_ratio = 14;
  if (this->steer_transmission_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->steer_transmission_ratio(), target);
  }

  // int32 steer_single_direction_max_degree = 15;
  if (this->steer_single_direction_max_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->steer_single_direction_max_degree(), target);
  }

  // int32 max_iteration = 16;
  if (this->max_iteration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_iteration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatControllerConf)
  return target;
}

size_t LatControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatControllerConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double matrix_q = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_q_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _matrix_q_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double ts = 1;
  if (this->ts() != 0) {
    total_size += 1 + 8;
  }

  // double cf = 3;
  if (this->cf() != 0) {
    total_size += 1 + 8;
  }

  // double cr = 4;
  if (this->cr() != 0) {
    total_size += 1 + 8;
  }

  // int32 preview_window = 2;
  if (this->preview_window() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->preview_window());
  }

  // int32 mass_fl = 6;
  if (this->mass_fl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_fl());
  }

  // double wheelbase = 5;
  if (this->wheelbase() != 0) {
    total_size += 1 + 8;
  }

  // int32 mass_fr = 7;
  if (this->mass_fr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_fr());
  }

  // int32 mass_rl = 8;
  if (this->mass_rl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_rl());
  }

  // double eps = 10;
  if (this->eps() != 0) {
    total_size += 1 + 8;
  }

  // int32 mass_rr = 9;
  if (this->mass_rr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_rr());
  }

  // int32 cutoff_freq = 12;
  if (this->cutoff_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  // int32 mean_filter_window_size = 13;
  if (this->mean_filter_window_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mean_filter_window_size());
  }

  // int32 steer_transmission_ratio = 14;
  if (this->steer_transmission_ratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_transmission_ratio());
  }

  // int32 steer_single_direction_max_degree = 15;
  if (this->steer_single_direction_max_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_single_direction_max_degree());
  }

  // int32 max_iteration = 16;
  if (this->max_iteration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_iteration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LatControllerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatControllerConf)
    MergeFrom(*source);
  }
}

void LatControllerConf::MergeFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
  if (from.cf() != 0) {
    set_cf(from.cf());
  }
  if (from.cr() != 0) {
    set_cr(from.cr());
  }
  if (from.preview_window() != 0) {
    set_preview_window(from.preview_window());
  }
  if (from.mass_fl() != 0) {
    set_mass_fl(from.mass_fl());
  }
  if (from.wheelbase() != 0) {
    set_wheelbase(from.wheelbase());
  }
  if (from.mass_fr() != 0) {
    set_mass_fr(from.mass_fr());
  }
  if (from.mass_rl() != 0) {
    set_mass_rl(from.mass_rl());
  }
  if (from.eps() != 0) {
    set_eps(from.eps());
  }
  if (from.mass_rr() != 0) {
    set_mass_rr(from.mass_rr());
  }
  if (from.cutoff_freq() != 0) {
    set_cutoff_freq(from.cutoff_freq());
  }
  if (from.mean_filter_window_size() != 0) {
    set_mean_filter_window_size(from.mean_filter_window_size());
  }
  if (from.steer_transmission_ratio() != 0) {
    set_steer_transmission_ratio(from.steer_transmission_ratio());
  }
  if (from.steer_single_direction_max_degree() != 0) {
    set_steer_single_direction_max_degree(from.steer_single_direction_max_degree());
  }
  if (from.max_iteration() != 0) {
    set_max_iteration(from.max_iteration());
  }
}

void LatControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatControllerConf::CopyFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatControllerConf::IsInitialized() const {
  return true;
}

void LatControllerConf::Swap(LatControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatControllerConf::InternalSwap(LatControllerConf* other) {
  using std::swap;
  matrix_q_.InternalSwap(&other->matrix_q_);
  swap(ts_, other->ts_);
  swap(cf_, other->cf_);
  swap(cr_, other->cr_);
  swap(preview_window_, other->preview_window_);
  swap(mass_fl_, other->mass_fl_);
  swap(wheelbase_, other->wheelbase_);
  swap(mass_fr_, other->mass_fr_);
  swap(mass_rl_, other->mass_rl_);
  swap(eps_, other->eps_);
  swap(mass_rr_, other->mass_rr_);
  swap(cutoff_freq_, other->cutoff_freq_);
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(steer_transmission_ratio_, other->steer_transmission_ratio_);
  swap(steer_single_direction_max_degree_, other->steer_single_direction_max_degree_);
  swap(max_iteration_, other->max_iteration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatControllerConf::GetMetadata() const {
  protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::control::LatControllerConf* Arena::CreateMaybeMessage< ::apollo::control::LatControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LatControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
