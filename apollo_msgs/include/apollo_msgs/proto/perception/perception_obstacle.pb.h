// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/perception/perception_obstacle.proto

#ifndef PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto
#define PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/common/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto 

namespace protobuf_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto
namespace apollo {
namespace perception {
class PerceptionObstacle;
class PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class PerceptionObstacles;
class PerceptionObstaclesDefaultTypeInternal;
extern PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::perception::PerceptionObstacle* Arena::CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(Arena*);
template<> ::apollo::perception::PerceptionObstacles* Arena::CreateMaybeMessage<::apollo::perception::PerceptionObstacles>(Arena*);
template<> ::apollo::perception::Point* Arena::CreateMaybeMessage<::apollo::perception::Point>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace perception {

enum PerceptionObstacle_Type {
  PerceptionObstacle_Type_UNKNOWN = 0,
  PerceptionObstacle_Type_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_Type_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_Type_PEDESTRIAN = 3,
  PerceptionObstacle_Type_BICYCLE = 4,
  PerceptionObstacle_Type_VEHICLE = 5,
  PerceptionObstacle_Type_PerceptionObstacle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PerceptionObstacle_Type_PerceptionObstacle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PerceptionObstacle_Type_IsValid(int value);
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MIN = PerceptionObstacle_Type_UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MAX = PerceptionObstacle_Type_VEHICLE;
const int PerceptionObstacle_Type_Type_ARRAYSIZE = PerceptionObstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor();
inline const ::std::string& PerceptionObstacle_Type_Name(PerceptionObstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_Type_descriptor(), value);
}
inline bool PerceptionObstacle_Type_Parse(
    const ::std::string& name, PerceptionObstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_Type>(
    PerceptionObstacle_Type_descriptor(), name, value);
}
enum PerceptionErrorCode {
  ERROR_NONE = 0,
  ERROR_TF = 1,
  ERROR_PROCESS = 2,
  ERROR_UNKNOWN = 3,
  PerceptionErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PerceptionErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PerceptionErrorCode_IsValid(int value);
const PerceptionErrorCode PerceptionErrorCode_MIN = ERROR_NONE;
const PerceptionErrorCode PerceptionErrorCode_MAX = ERROR_UNKNOWN;
const int PerceptionErrorCode_ARRAYSIZE = PerceptionErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionErrorCode_descriptor();
inline const ::std::string& PerceptionErrorCode_Name(PerceptionErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionErrorCode_descriptor(), value);
}
inline bool PerceptionErrorCode_Parse(
    const ::std::string& name, PerceptionErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionErrorCode>(
    PerceptionErrorCode_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacle) */ {
 public:
  PerceptionObstacle();
  virtual ~PerceptionObstacle();

  PerceptionObstacle(const PerceptionObstacle& from);

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObstacle(PerceptionObstacle&& from) noexcept
    : PerceptionObstacle() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacle& operator=(PerceptionObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObstacle* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacle*>(
               &_PerceptionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PerceptionObstacle* other);
  friend void swap(PerceptionObstacle& a, PerceptionObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacle* New() const final {
    return CreateMaybeMessage<PerceptionObstacle>(NULL);
  }

  PerceptionObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptionObstacle& from);
  void MergeFrom(const PerceptionObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerceptionObstacle_Type Type;
  static const Type UNKNOWN =
    PerceptionObstacle_Type_UNKNOWN;
  static const Type UNKNOWN_MOVABLE =
    PerceptionObstacle_Type_UNKNOWN_MOVABLE;
  static const Type UNKNOWN_UNMOVABLE =
    PerceptionObstacle_Type_UNKNOWN_UNMOVABLE;
  static const Type PEDESTRIAN =
    PerceptionObstacle_Type_PEDESTRIAN;
  static const Type BICYCLE =
    PerceptionObstacle_Type_BICYCLE;
  static const Type VEHICLE =
    PerceptionObstacle_Type_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return PerceptionObstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PerceptionObstacle_Type_Type_MIN;
  static const Type Type_MAX =
    PerceptionObstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PerceptionObstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PerceptionObstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PerceptionObstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PerceptionObstacle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.Point polygon_point = 8;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 8;
  ::apollo::perception::Point* mutable_polygon_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
      mutable_polygon_point();
  const ::apollo::perception::Point& polygon_point(int index) const;
  ::apollo::perception::Point* add_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
      polygon_point() const;

  // repeated double point_cloud = 12;
  int point_cloud_size() const;
  void clear_point_cloud();
  static const int kPointCloudFieldNumber = 12;
  double point_cloud(int index) const;
  void set_point_cloud(int index, double value);
  void add_point_cloud(double value);
  const ::google::protobuf::RepeatedField< double >&
      point_cloud() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_point_cloud();

  // .apollo.perception.Point position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::apollo::perception::Point& _internal_position() const;
  public:
  const ::apollo::perception::Point& position() const;
  ::apollo::perception::Point* release_position();
  ::apollo::perception::Point* mutable_position();
  void set_allocated_position(::apollo::perception::Point* position);

  // .apollo.perception.Point velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  private:
  const ::apollo::perception::Point& _internal_velocity() const;
  public:
  const ::apollo::perception::Point& velocity() const;
  ::apollo::perception::Point* release_velocity();
  ::apollo::perception::Point* mutable_velocity();
  void set_allocated_velocity(::apollo::perception::Point* velocity);

  // double theta = 3;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // double length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .apollo.perception.PerceptionObstacle.Type type = 10;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);

  // double width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // double height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // double tracking_time = 9;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 9;
  double tracking_time() const;
  void set_tracking_time(double value);

  // double timestamp = 11;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point > polygon_point_;
  ::google::protobuf::RepeatedField< double > point_cloud_;
  mutable int _point_cloud_cached_byte_size_;
  ::apollo::perception::Point* position_;
  ::apollo::perception::Point* velocity_;
  double theta_;
  double length_;
  ::google::protobuf::int32 id_;
  int type_;
  double width_;
  double height_;
  double tracking_time_;
  double timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacles) */ {
 public:
  PerceptionObstacles();
  virtual ~PerceptionObstacles();

  PerceptionObstacles(const PerceptionObstacles& from);

  inline PerceptionObstacles& operator=(const PerceptionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObstacles(PerceptionObstacles&& from) noexcept
    : PerceptionObstacles() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacles& operator=(PerceptionObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObstacles* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacles*>(
               &_PerceptionObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PerceptionObstacles* other);
  friend void swap(PerceptionObstacles& a, PerceptionObstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacles* New() const final {
    return CreateMaybeMessage<PerceptionObstacles>(NULL);
  }

  PerceptionObstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptionObstacles& from);
  void MergeFrom(const PerceptionObstacles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  int perception_obstacle_size() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 1;
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
      mutable_perception_obstacle();
  const ::apollo::perception::PerceptionObstacle& perception_obstacle(int index) const;
  ::apollo::perception::PerceptionObstacle* add_perception_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
      perception_obstacle() const;

  // .apollo.common.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // .apollo.perception.PerceptionErrorCode error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::apollo::perception::PerceptionErrorCode error_code() const;
  void set_error_code(::apollo::perception::PerceptionErrorCode value);

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle > perception_obstacle_;
  ::apollo::common::Header* header_;
  int error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.y)
}

// double z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.z)
  return z_;
}
inline void Point::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.z)
}

// -------------------------------------------------------------------

// PerceptionObstacle

// int32 id = 1;
inline void PerceptionObstacle::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return id_;
}
inline void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// .apollo.perception.Point position = 2;
inline bool PerceptionObstacle::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void PerceptionObstacle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::apollo::perception::Point& PerceptionObstacle::_internal_position() const {
  return *position_;
}
inline const ::apollo::perception::Point& PerceptionObstacle::position() const {
  const ::apollo::perception::Point* p = position_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::Point*>(
      &::apollo::perception::_Point_default_instance_);
}
inline ::apollo::perception::Point* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  
  ::apollo::perception::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::Point>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return position_;
}
inline void PerceptionObstacle::set_allocated_position(::apollo::perception::Point* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// double theta = 3;
inline void PerceptionObstacle::clear_theta() {
  theta_ = 0;
}
inline double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return theta_;
}
inline void PerceptionObstacle::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// .apollo.perception.Point velocity = 4;
inline bool PerceptionObstacle::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline void PerceptionObstacle::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
inline const ::apollo::perception::Point& PerceptionObstacle::_internal_velocity() const {
  return *velocity_;
}
inline const ::apollo::perception::Point& PerceptionObstacle::velocity() const {
  const ::apollo::perception::Point* p = velocity_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::Point*>(
      &::apollo::perception::_Point_default_instance_);
}
inline ::apollo::perception::Point* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  
  ::apollo::perception::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::Point>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return velocity_;
}
inline void PerceptionObstacle::set_allocated_velocity(::apollo::perception::Point* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete velocity_;
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// double length = 5;
inline void PerceptionObstacle::clear_length() {
  length_ = 0;
}
inline double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return length_;
}
inline void PerceptionObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// double width = 6;
inline void PerceptionObstacle::clear_width() {
  width_ = 0;
}
inline double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return width_;
}
inline void PerceptionObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// double height = 7;
inline void PerceptionObstacle::clear_height() {
  height_ = 0;
}
inline double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return height_;
}
inline void PerceptionObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.perception.Point polygon_point = 8;
inline int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
inline void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::apollo::perception::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
inline ::apollo::perception::Point* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// double tracking_time = 9;
inline void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
}
inline double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
inline void PerceptionObstacle::set_tracking_time(double value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// .apollo.perception.PerceptionObstacle.Type type = 10;
inline void PerceptionObstacle::clear_type() {
  type_ = 0;
}
inline ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
inline void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// double timestamp = 11;
inline void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
}
inline double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
inline void PerceptionObstacle::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12;
inline int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
inline void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
inline double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
inline void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
inline void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// -------------------------------------------------------------------

// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
inline void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
inline const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// .apollo.common.Header header = 2;
inline bool PerceptionObstacles::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::apollo::common::Header& PerceptionObstacles::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& PerceptionObstacles::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* PerceptionObstacles::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return header_;
}
inline void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// .apollo.perception.PerceptionErrorCode error_code = 3;
inline void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
}
inline ::apollo::perception::PerceptionErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return static_cast< ::apollo::perception::PerceptionErrorCode >(error_code_);
}
inline void PerceptionObstacles::set_error_code(::apollo::perception::PerceptionErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_Type>() {
  return ::apollo::perception::PerceptionObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::PerceptionErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionErrorCode>() {
  return ::apollo::perception::PerceptionErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto
